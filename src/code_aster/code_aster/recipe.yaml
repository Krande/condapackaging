context:
  name: code-aster
  version: 16.4.2
  asrun_ver: 2021.1
  med_ver: 4.1.1
  metis_ver: 5.1.0_aster4
  mgis_ver: 2.1
  mfront_ver: 4.1.0
  mumps_ver: 5.5.1_aster1
  scotch_ver: 7.0.1
  petsc_ver: 3.17.1_aster
  medcoupling_ver: 9.10.0

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  - fn: '{{ name }}_{{ version }}.tar.gz'
    url: https://gitlab.com/codeaster/src/-/archive/{{ version }}/src-{{ version }}.tar.gz
    patches:
      - patches/add_stdexcept.patch

build:
  detect_binary_files_with_prefix: true
  number: 1

requirements:
  build:
    - waf
    - "{{ compiler('c') }}"
    - "{{ compiler('cxx') }}"
    - gcc 9
    - gxx 9
    - gfortran 9
    - pyyaml

  host:
    - python
    - krande/label/dev::mfront {{ mfront_ver }}
    - krande/label/dev::libmed {{ med_ver }}
    - asrun {{ asrun_ver }}
    - metis {{ metis_ver }}
    - mumps {{ mumps_ver }}
    - mgis {{ mgis_ver }}
    - scotch {{ scotch_ver }}
    - medcoupling {{ medcoupling_ver }}
    - numpy >1.22
    - pyyaml
    - boost

  run:
    - "{{ pin_compatible('libmed', max_pin='x.x.x') }}"
    - "{{ pin_compatible('mfront', max_pin='x.x.x') }}"
    - "{{ pin_compatible('boost', max_pin='x.x.x') }}"
    - numpy
    - scotch {{ scotch_ver }}
    - medcoupling {{ medcoupling_ver }}
    - asrun {{ asrun_ver }}
    - metis {{ metis_ver }}
    - mumps {{ mumps_ver }}
    - mgis {{ mgis_ver }}
    - pyyaml

test:
  imports:
    - code_aster
  commands:
    - run_aster --help
#    - python test_import.py
#    - run_ctest -R 'forma01a' --resutest=./temp
#    - as_run --info
#    - as_run --test sslp114a
#    - as_run --test mumps02a
#    - as_run --test mumps01a
#    - as_run --test umat001a
#    - as_run --test zzzz121a
  files:
    - test_import.py

about:
  home: https://www.code-aster.org
  license: GPL-3.0-only AND CECILL-C AND Apache-2.0 AND LGPL-3.0-only
  license_family: GPL
  summary: 'Code_Aster : a finite element solver'
  description: |
    Code_Aster offers a full range of multiphysical analysis and modelling methods that go well beyond the standard functions of a thermomechanical calculation code: from seismic analysis to porous media via acoustics, fatigue, stochastic dynamics, etc..
  doc_url: https://www.code-aster.org/V2/doc/default/en/index.php?man=commande
  dev_url: https://sourceforge.net/projects/codeaster/

extra:
  recipe-maintainers:
    - Krande
