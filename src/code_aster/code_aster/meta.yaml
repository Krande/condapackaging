{% set name = 'code-aster' %}
{% set version = '17.1.0' %}
{% set win_build = '4' %}
{% set build = 0 %}

{% if mpi == 'nompi' %}
# prioritize nompi variant via build number
{% set build = build + 100 %}
{% endif %}

# prioritize release over debug
{% if build_type == 'release' %}
{% set build = build + 200 %}
{% endif %}

# add build string so packages can depend on
# mpi or nompi variants explicitly:
# `pkg * mpi_mpich_*` for mpich
# `pkg * mpi_*` for any mpi
# `pkg * nompi_*` for no mpi
{% if mpi != 'nompi' %}
{% set mpi_prefix = "mpi_" + mpi %}
{% else %}
{% set mpi_prefix = "nompi" %}
{% endif %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  - fn: '{{ name }}_{{ version }}.{{ win_build }}_win.tar.gz'                                                             # [win]
    url: https://gitlab.com/krande/src/-/archive/{{ version }}.{{ win_build }}/src-{{ version }}.{{ win_build }}.tar.gz   # [win]
    sha256: 17db6429eea4bcfc8ac7b0e8660d5072688859da457c0cb6a74070ab64025d03                                              # [win]
  - fn: '{{ name }}_{{ version }}.tar.gz'                                                                                 # [not win]
    url: https://gitlab.com/codeaster/src/-/archive/{{ version }}/src-{{ version }}.tar.gz                                # [not win]
    patches:                                                                                                              # [not win]
      - patches/skip_numpy_distutils_check.patch                                                                          # [not win]

build:
  detect_binary_files_with_prefix: true
  number: {{ build }}
  string: "py{{ CONDA_PY }}_{{ mpi_prefix }}_{{ build_type}}_h{{ PKG_HASH }}_{{ build }}"
  run_exports:
    - {{ pin_subpackage(name, 'x.x') }}
  ignore_run_exports:
    - llvm-openmp  # [win]

requirements:
  build:
    - "{{ compiler('c') }}"
    - "{{ compiler('cxx') }}"
    - "{{ compiler('fortran') }}" # [not win]
    - pyyaml
    - waf 2.0.27
    - clang  # [win]

  host:
    - python
    - numpy
    - libboost-devel
    - mkl-devel                                     # [win]
    - openblas                                      # [not win]
    - libblas
    - liblapack
    - metis *=*{{ build_type }}*
    - mumps *=*{{ build_type }}*
    - mfront *=*{{ build_type }}*
    - mgis *=*{{ build_type }}*
    - libmed *=*{{ build_type }}*
    - scotch *=*{{ build_type }}*
    - medcoupling *=*{{ build_type }}*
    - psutil
    - {{ mpi }}                                     # [mpi != "nompi"]
    - mpi4py {{ mpi4py_ver }}                       # [mpi != 'nompi']
    - petsc {{ petsc_ver }}                         # [mpi != "nompi"]
    - parmetis                                      # [mpi != "nompi"]

  run:
    - python
    - psutil                                        # [win]
    - intel-fortran-rt                              # [win]
    - {{ pin_compatible('numpy', max_pin='x.x') }}
    - {{ mpi }}                                     # [mpi != "nompi"]
    - libxcrypt                                     # [not win]

test:
  imports:
    - code_aster
  commands:
    - run_aster --help
    - python basic_import.py
    - python tests/test1/main.py
    #- run_ctest -R 'zzzz506h' --resutest=../resutest --only-failed-results -j 1     # [mpi != "nompi"]
#    - run_ctest -R 'forma01a' --resutest=../resutest --only-failed-results -j 1
#    - run_ctest -R 'forma01a|sslp114a|mumps02a|mumps01a|zzzz121a' --resutest=../resutest --only-failed-results -j 1
#    - run_ctest -R 'sslp201a|sdld23a|sdnl133b|sdnl133a' --resutest=../cmathissue --only-failed-results -j 1 # related to py310&py39 failing only
  requires:
    - metis *=*{{ build_type }}*
    - mumps *=*{{ build_type }}*
    - mfront *=*{{ build_type }}*
    - mgis *=*{{ build_type }}*
    - libmed *=*{{ build_type }}*
    - scotch *=*{{ build_type }}*
    - medcoupling *=*{{ build_type }}*
    - petsc {{ petsc_ver }}                         # [mpi != "nompi"]
    - parmetis                                      # [mpi != "nompi"]
  files:
    - basic_import.py
    - tests/test1

about:
  home: https://www.code-aster.org
  license: GPL-3.0-only AND CECILL-C AND Apache-2.0 AND LGPL-3.0-only
  license_family: GPL
  summary: "Code_Aster - a finite element solver"
  description: |
    Code_Aster offers a full range of multiphysical analysis and modelling methods that go well beyond the standard functions of a thermomechanical calculation code: from seismic analysis to porous media via acoustics, fatigue, stochastic dynamics, etc..
  doc_url: https://www.code-aster.org/V2/doc/default/en/index.php?man=commande
  dev_url: https://sourceforge.net/projects/codeaster/

extra:
  recipe-maintainers:
    - Krande
