diff -ruN MUMPS_5.1.2/include/cmumps_root.h mumps-5.1.2-aster7/include/cmumps_root.h
--- MUMPS_5.1.2/include/cmumps_root.h	2017-10-02 09:37:22.000000000 +0200
+++ mumps-5.1.2-aster7/include/cmumps_root.h	2020-10-23 11:16:48.000000000 +0200
@@ -12,34 +12,34 @@
 !
       TYPE CMUMPS_ROOT_STRUC
         SEQUENCE
-        INTEGER :: MBLOCK, NBLOCK, NPROW, NPCOL
-        INTEGER :: MYROW, MYCOL
-        INTEGER :: SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
-        INTEGER :: RHS_NLOC
-        INTEGER :: ROOT_SIZE, TOT_ROOT_SIZE
+        INTEGER(4) :: MBLOCK, NBLOCK, NPROW, NPCOL
+        INTEGER(4) :: MYROW, MYCOL
+        INTEGER(4) :: SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
+        INTEGER(4) :: RHS_NLOC
+        INTEGER(4) :: ROOT_SIZE, TOT_ROOT_SIZE
 !       descriptor for scalapack
-        INTEGER, DIMENSION( 9 ) :: DESCRIPTOR
-        INTEGER :: CNTXT_BLACS, LPIV, rootpad0
-        INTEGER, DIMENSION(:), POINTER :: RG2L_ROW
-        INTEGER, DIMENSION(:), POINTER :: RG2L_COL
-        INTEGER , DIMENSION(:), POINTER :: IPIV, rootpad1
+        INTEGER(4), DIMENSION( 9 ) :: DESCRIPTOR
+        INTEGER(4) :: CNTXT_BLACS, LPIV, rootpad0
+        INTEGER(4), DIMENSION(:), POINTER :: RG2L_ROW
+        INTEGER(4), DIMENSION(:), POINTER :: RG2L_COL
+        INTEGER(4) , DIMENSION(:), POINTER :: IPIV, rootpad1
 !       Centralized master of root
-        COMPLEX, DIMENSION(:), POINTER :: RHS_CNTR_MASTER_ROOT
+        COMPLEX(4), DIMENSION(:), POINTER :: RHS_CNTR_MASTER_ROOT
 !       Used to access Schur easily from root structure
-        COMPLEX, DIMENSION(:), POINTER :: SCHUR_POINTER
+        COMPLEX(4), DIMENSION(:), POINTER :: SCHUR_POINTER
 !       for try_null_space preprocessing constant only:
-        COMPLEX, DIMENSION(:), POINTER :: QR_TAU, rootpad2
+        COMPLEX(4), DIMENSION(:), POINTER :: QR_TAU, rootpad2
 !       Fwd in facto: 
 !           case of scalapack root: to store RHS in 2D block cyclic
 !           format compatible with root distribution
-        COMPLEX, DIMENSION(:,:), POINTER :: RHS_ROOT, rootpad
+        COMPLEX(4), DIMENSION(:,:), POINTER :: RHS_ROOT, rootpad
 !       for try_nullspace preprocessing constant only:
-        REAL :: QR_RCOND, rootpad3
-        LOGICAL :: yes, gridinit_done
+        REAL(4) :: QR_RCOND, rootpad3
+        LOGICAL(4) :: yes, gridinit_done
 !       for SVD on root (#define try_null_space)
-        COMPLEX, DIMENSION(:,:), POINTER :: SVD_U, SVD_VT
+        COMPLEX(4), DIMENSION(:,:), POINTER :: SVD_U, SVD_VT
 !       for RR on root (#define try_null_space)
-        REAL, DIMENSION(:), POINTER :: SINGULAR_VALUES
-        INTEGER :: NB_SINGULAR_VALUES,rootpad4
+        REAL(4), DIMENSION(:), POINTER :: SINGULAR_VALUES
+        INTEGER(4) :: NB_SINGULAR_VALUES
 !
       END TYPE CMUMPS_ROOT_STRUC
diff -ruN MUMPS_5.1.2/include/cmumps_struc.h mumps-5.1.2-aster7/include/cmumps_struc.h
--- MUMPS_5.1.2/include/cmumps_struc.h	2017-10-02 09:37:22.000000000 +0200
+++ mumps-5.1.2-aster7/include/cmumps_struc.h	2020-10-23 11:16:48.000000000 +0200
@@ -14,7 +14,7 @@
       TYPE CMUMPS_STRUC
         SEQUENCE
 !
-! This structure contains all parameters 
+! This structure contains all parameters
 ! for the interface to the user, plus internal
 ! information from the solver
 !
@@ -24,102 +24,102 @@
 !    -----------------
 !    MPI Communicator
 !    -----------------
-        INTEGER :: COMM
+        INTEGER(4) :: COMM
 !    ------------------
 !    Problem definition
 !    ------------------
-!    Solver (SYM=0 unsymmetric,SYM=1 symmetric Positive Definite, 
+!    Solver (SYM=0 unsymmetric,SYM=1 symmetric Positive Definite,
 !        SYM=2 general symmetric)
 !    Type of parallelism (PAR=1 host working, PAR=0 host not working)
-        INTEGER ::  SYM, PAR
-        INTEGER ::  JOB 
+        INTEGER(4) ::  SYM, PAR
+        INTEGER(4) ::  JOB
 !    --------------------
-!    Order of Input matrix 
+!    Order of Input matrix
 !    --------------------
-        INTEGER ::  N
+        INTEGER(4) ::  N
 !
 !    ----------------------------------------
 !    Assembled input matrix : User interface
 !    ----------------------------------------
-        INTEGER    :: NZ  ! Standard integer input + bwd. compat.
+        INTEGER(4) :: NZ  ! Standard integer input + bwd. compat.
         INTEGER(8) :: NNZ ! 64-bit integer input
-        COMPLEX, DIMENSION(:), POINTER :: A
-        INTEGER, DIMENSION(:), POINTER :: IRN, JCN
-        REAL, DIMENSION(:), POINTER :: COLSCA, ROWSCA, pad0
+        COMPLEX(4), DIMENSION(:), POINTER :: A
+        INTEGER(4), DIMENSION(:), POINTER :: IRN, JCN
+        REAL(4), DIMENSION(:), POINTER :: COLSCA, ROWSCA, pad0
 !
 !       ------------------------------------
 !       Case of distributed assembled matrix
 !       matrix on entry:
 !       ------------------------------------
-        INTEGER    :: NZ_loc  ! Standard integer input + bwd. compat.
-        INTEGER    :: pad1
+        INTEGER(4) :: NZ_loc  ! Standard integer input + bwd. compat.
+        INTEGER(4) :: pad1
         INTEGER(8) :: NNZ_loc ! 64-bit integer input
-        INTEGER, DIMENSION(:), POINTER :: IRN_loc, JCN_loc
-        COMPLEX, DIMENSION(:), POINTER :: A_loc, pad2
+        INTEGER(4), DIMENSION(:), POINTER :: IRN_loc, JCN_loc
+        COMPLEX(4), DIMENSION(:), POINTER :: A_loc, pad2
 !
 !    ----------------------------------------
 !    Unassembled input matrix: User interface
 !    ----------------------------------------
-        INTEGER :: NELT, pad3
-        INTEGER, DIMENSION(:), POINTER :: ELTPTR
-        INTEGER, DIMENSION(:), POINTER :: ELTVAR
-        COMPLEX, DIMENSION(:), POINTER :: A_ELT, pad4
+        INTEGER(4) :: NELT, pad3
+        INTEGER(4), DIMENSION(:), POINTER :: ELTPTR
+        INTEGER(4), DIMENSION(:), POINTER :: ELTVAR
+        COMPLEX(4), DIMENSION(:), POINTER :: A_ELT, pad4
 !
 !    ---------------------------------------------
-!    Symmetric permutation : 
+!    Symmetric permutation :
 !               PERM_IN if given by user (optional)
 !    ---------------------------------------------
-        INTEGER, DIMENSION(:), POINTER :: PERM_IN
+        INTEGER(4), DIMENSION(:), POINTER :: PERM_IN
 !
 !
 ! ******************
-! INPUT/OUTPUT data 
+! INPUT/OUTPUT data
 ! ******************
 !    --------------------------------------------------------
 !    RHS / SOL_loc
 !    -------------
 !       right-hand side and solution
 !    -------------------------------------------------------
-        COMPLEX, DIMENSION(:), POINTER :: RHS, REDRHS
-        COMPLEX, DIMENSION(:), POINTER :: RHS_SPARSE
-        COMPLEX, DIMENSION(:), POINTER :: SOL_loc
-        INTEGER, DIMENSION(:), POINTER :: IRHS_SPARSE
-        INTEGER, DIMENSION(:), POINTER :: IRHS_PTR
-        INTEGER, DIMENSION(:), POINTER :: ISOL_loc
-        INTEGER ::  LRHS, NRHS, NZ_RHS, LSOL_loc, LREDRHS
-        INTEGER ::  pad5
+        COMPLEX(4), DIMENSION(:), POINTER :: RHS, REDRHS
+        COMPLEX(4), DIMENSION(:), POINTER :: RHS_SPARSE
+        COMPLEX(4), DIMENSION(:), POINTER :: SOL_loc
+        INTEGER(4), DIMENSION(:), POINTER :: IRHS_SPARSE
+        INTEGER(4), DIMENSION(:), POINTER :: IRHS_PTR
+        INTEGER(4), DIMENSION(:), POINTER :: ISOL_loc
+        INTEGER(4) ::  LRHS, NRHS, NZ_RHS, LSOL_loc, LREDRHS
+        INTEGER(4) ::  pad5
 !    ----------------------------
 !    Control parameters,
 !    statistics and output data
 !    ---------------------------
-        INTEGER ::  ICNTL(40)
-        INTEGER ::  INFO(40) 
-        INTEGER :: INFOG(40)
-        REAL ::  COST_SUBTREES
-        REAL ::  CNTL(15)
-        REAL ::  RINFO(40)
-        REAL ::  RINFOG(40)
+        INTEGER(4) ::  ICNTL(40)
+        INTEGER(4) ::  INFO(40)
+        INTEGER(4) :: INFOG(40)
+        REAL(4) ::  COST_SUBTREES
+        REAL(4) ::  CNTL(15)
+        REAL(4) ::  RINFO(40)
+        REAL(4) ::  RINFOG(40)
 !    ---------------------------------------------------------
 !    Permutations computed during analysis:
-!       SYM_PERM: Symmetric permutation 
+!       SYM_PERM: Symmetric permutation
 !       UNS_PERM: Column permutation (optional)
 !    ---------------------------------------------------------
-        INTEGER, DIMENSION(:), POINTER :: SYM_PERM, UNS_PERM
-! 
+        INTEGER(4), DIMENSION(:), POINTER :: SYM_PERM, UNS_PERM
+!
 !    -----
 !    Schur
 !    -----
-        INTEGER ::  NPROW, NPCOL, MBLOCK, NBLOCK
-        INTEGER ::  SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
-        INTEGER ::  SIZE_SCHUR
-        COMPLEX, DIMENSION(:), POINTER :: SCHUR
-        COMPLEX, DIMENSION(:), POINTER :: SCHUR_CINTERFACE
-        INTEGER, DIMENSION(:), POINTER :: LISTVAR_SCHUR
+        INTEGER(4) ::  NPROW, NPCOL, MBLOCK, NBLOCK
+        INTEGER(4) ::  SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
+        INTEGER(4) ::  SIZE_SCHUR
+        COMPLEX(4), DIMENSION(:), POINTER :: SCHUR
+        COMPLEX(4), DIMENSION(:), POINTER :: SCHUR_CINTERFACE
+        INTEGER(4), DIMENSION(:), POINTER :: LISTVAR_SCHUR
 !    -------------------------------------
 !    Case of distributed matrix on entry:
 !    CMUMPS potentially provides mapping
 !    -------------------------------------
-        INTEGER, DIMENSION(:), POINTER :: MAPPING
+        INTEGER(4), DIMENSION(:), POINTER :: MAPPING
 !    --------------
 !    Version number
 !    --------------
@@ -145,133 +145,133 @@
 ! INTERNAL Working data
 ! *********************
         INTEGER(8) :: KEEP8(150), MAX_SURF_MASTER
-        INTEGER ::  INST_Number
+        INTEGER(4) ::  INST_Number
 !       For MPI
-        INTEGER ::  COMM_NODES, MYID_NODES, COMM_LOAD
-        INTEGER ::   MYID, NPROCS, NSLAVES
-        INTEGER ::  ASS_IRECV
-        INTEGER ::  LBUFR
-        INTEGER ::  LBUFR_BYTES
-        INTEGER, DIMENSION(:), POINTER ::  BUFR
+        INTEGER(4) ::  COMM_NODES, MYID_NODES, COMM_LOAD
+        INTEGER(4) ::   MYID, NPROCS, NSLAVES
+        INTEGER(4) ::  ASS_IRECV
+        INTEGER(4) ::  LBUFR
+        INTEGER(4) ::  LBUFR_BYTES
+        INTEGER(4), DIMENSION(:), POINTER ::  BUFR
 !       IS is used for the factors + workspace for contrib. blocks
-        INTEGER, DIMENSION(:), POINTER :: IS
-!       IS1 (maxis1) contains working arrays computed 
+        INTEGER(4), DIMENSION(:), POINTER :: IS
+!       IS1 (maxis1) contains working arrays computed
 !       and used only during analysis
-        INTEGER, DIMENSION(:), POINTER :: IS1
+        INTEGER(4), DIMENSION(:), POINTER :: IS1
 !       For analysis/facto/solve phases
-        INTEGER ::  MAXIS1, Deficiency
-        INTEGER ::  KEEP(500)
+        INTEGER(4) ::  MAXIS1, Deficiency
+        INTEGER(4) ::  KEEP(500)
 !       The following data/arrays are computed during the analysis
 !       phase and used during the factorization and solve phases.
-        INTEGER ::  LNA
-        INTEGER ::  NBSA
-        INTEGER,POINTER,DIMENSION(:) :: STEP, NE_STEPS, ND_STEPS
-!  Info for pruning tree 
-        INTEGER,POINTER,DIMENSION(:) :: Step2node
+        INTEGER(4) ::  LNA
+        INTEGER(4) ::  NBSA
+        INTEGER(4),POINTER,DIMENSION(:) :: STEP, NE_STEPS, ND_STEPS
+!  Info for pruning tree
+        INTEGER(4),POINTER,DIMENSION(:) :: Step2node
 !  ---------------------
-        INTEGER,POINTER,DIMENSION(:) :: FRERE_STEPS, DAD_STEPS
-        INTEGER,POINTER,DIMENSION(:) :: FILS, FRTPTR, FRTELT
+        INTEGER(4),POINTER,DIMENSION(:) :: FRERE_STEPS, DAD_STEPS
+        INTEGER(4),POINTER,DIMENSION(:) :: FILS, FRTPTR, FRTELT
         INTEGER(8),POINTER,DIMENSION(:) :: PTRAR
-        INTEGER,POINTER,DIMENSION(:) :: NA, PROCNODE_STEPS
+        INTEGER(4),POINTER,DIMENSION(:) :: NA, PROCNODE_STEPS
 !       The two pointer arrays computed in facto and used by the solve
-!          (except the factors) are PTLUST_S and PTRFAC. 
-        INTEGER, DIMENSION(:), POINTER :: PTLUST_S
+!          (except the factors) are PTLUST_S and PTRFAC.
+        INTEGER(4), DIMENSION(:), POINTER :: PTLUST_S
         INTEGER(8), DIMENSION(:), POINTER :: PTRFAC
 !       main real working arrays for factorization/solve phases
-        COMPLEX, DIMENSION(:), POINTER :: S
+        COMPLEX(4), DIMENSION(:), POINTER :: S
 !       Information on mapping
-        INTEGER, DIMENSION(:), POINTER :: PROCNODE
-!       Input matrix ready for numerical assembly 
+        INTEGER(4), DIMENSION(:), POINTER :: PROCNODE
+!       Input matrix ready for numerical assembly
 !           -arrowhead format in case of assembled matrix
 !           -element format otherwise
-        INTEGER, DIMENSION(:), POINTER :: INTARR
-        COMPLEX, DIMENSION(:), POINTER :: DBLARR
+        INTEGER(4), DIMENSION(:), POINTER :: INTARR
+        COMPLEX(4), DIMENSION(:), POINTER :: DBLARR
 !       Element entry: internal data
-        INTEGER :: NELT_loc, LELTVAR
-        INTEGER, DIMENSION(:), POINTER :: ELTPROC
+        INTEGER(4) :: NELT_loc, LELTVAR
+        INTEGER(4), DIMENSION(:), POINTER :: ELTPROC
 !       Candidates and node partitionning
-        INTEGER, DIMENSION(:,:), POINTER :: CANDIDATES
-        INTEGER, DIMENSION(:),   POINTER :: ISTEP_TO_INIV2
-        INTEGER, DIMENSION(:),   POINTER :: FUTURE_NIV2
-        INTEGER, DIMENSION(:,:), POINTER :: TAB_POS_IN_PERE 
-        LOGICAL, DIMENSION(:),   POINTER :: I_AM_CAND
+        INTEGER(4), DIMENSION(:,:), POINTER :: CANDIDATES
+        INTEGER(4), DIMENSION(:),   POINTER :: ISTEP_TO_INIV2
+        INTEGER(4), DIMENSION(:),   POINTER :: FUTURE_NIV2
+        INTEGER(4), DIMENSION(:,:), POINTER :: TAB_POS_IN_PERE
+        LOGICAL(4), DIMENSION(:),   POINTER :: I_AM_CAND
 !       For heterogeneous architecture
-        INTEGER, DIMENSION(:), POINTER :: MEM_DIST
+        INTEGER(4), DIMENSION(:), POINTER :: MEM_DIST
 !       Compressed RHS
-        INTEGER, DIMENSION(:),   POINTER :: POSINRHSCOMP_ROW
-        LOGICAL  :: POSINRHSCOMP_COL_ALLOC, pad11
-        INTEGER, DIMENSION(:),   POINTER :: POSINRHSCOMP_COL
-        COMPLEX, DIMENSION(:),   POINTER :: RHSCOMP
+        INTEGER(4), DIMENSION(:),   POINTER :: POSINRHSCOMP_ROW
+        LOGICAL(4)  :: POSINRHSCOMP_COL_ALLOC, pad11
+        INTEGER(4), DIMENSION(:),   POINTER :: POSINRHSCOMP_COL
+        COMPLEX(4), DIMENSION(:),   POINTER :: RHSCOMP
 !       Info on the subtrees to be used during factorization
         DOUBLE PRECISION, DIMENSION(:), POINTER :: MEM_SUBTREE
         DOUBLE PRECISION, DIMENSION(:), POINTER :: COST_TRAV
-        INTEGER, DIMENSION(:),   POINTER :: MY_ROOT_SBTR
-        INTEGER, DIMENSION(:),   POINTER :: MY_FIRST_LEAF
-        INTEGER, DIMENSION(:),   POINTER :: MY_NB_LEAF
-        INTEGER, DIMENSION(:),   POINTER :: DEPTH_FIRST
-        INTEGER, DIMENSION(:),   POINTER :: DEPTH_FIRST_SEQ
-        INTEGER, DIMENSION(:),   POINTER :: SBTR_ID
-        INTEGER, DIMENSION(:),   POINTER :: SCHED_DEP
-        INTEGER, DIMENSION(:),   POINTER :: SCHED_GRP
-        INTEGER, DIMENSION(:),   POINTER :: SCHED_SBTR
-        INTEGER, DIMENSION(:),   POINTER :: CROIX_MANU
-        COMPLEX, DIMENSION(:), POINTER :: WK_USER
-        INTEGER :: NBSA_LOCAL
-        INTEGER :: LWK_USER
+        INTEGER(4), DIMENSION(:),   POINTER :: MY_ROOT_SBTR
+        INTEGER(4), DIMENSION(:),   POINTER :: MY_FIRST_LEAF
+        INTEGER(4), DIMENSION(:),   POINTER :: MY_NB_LEAF
+        INTEGER(4), DIMENSION(:),   POINTER :: DEPTH_FIRST
+        INTEGER(4), DIMENSION(:),   POINTER :: DEPTH_FIRST_SEQ
+        INTEGER(4), DIMENSION(:),   POINTER :: SBTR_ID
+        INTEGER(4), DIMENSION(:),   POINTER :: SCHED_DEP
+        INTEGER(4), DIMENSION(:),   POINTER :: SCHED_GRP
+        INTEGER(4), DIMENSION(:),   POINTER :: SCHED_SBTR
+        INTEGER(4), DIMENSION(:),   POINTER :: CROIX_MANU
+        COMPLEX(4), DIMENSION(:), POINTER :: WK_USER
+        INTEGER(4) :: NBSA_LOCAL
+        INTEGER(4) :: LWK_USER
 !    Internal control array
-        REAL ::  DKEEP(230)
+        REAL(4) ::  DKEEP(230)
 !    For simulating parallel out-of-core stack.
         DOUBLE PRECISION, DIMENSION(:),POINTER :: CB_SON_SIZE
 !    Instance number used/managed by the C/F77 interface
-        INTEGER ::  INSTANCE_NUMBER
+        INTEGER(4) ::  INSTANCE_NUMBER
 !    OOC management data that must persist from factorization to solve.
-        INTEGER ::  OOC_MAX_NB_NODES_FOR_ZONE
-        INTEGER, DIMENSION(:,:),   POINTER :: OOC_INODE_SEQUENCE
+        INTEGER(4) ::  OOC_MAX_NB_NODES_FOR_ZONE
+        INTEGER(4), DIMENSION(:,:),   POINTER :: OOC_INODE_SEQUENCE
         INTEGER(8),DIMENSION(:,:), POINTER :: OOC_SIZE_OF_BLOCK
         INTEGER(8), DIMENSION(:,:),   POINTER :: OOC_VADDR
-        INTEGER,DIMENSION(:), POINTER :: OOC_TOTAL_NB_NODES
-        INTEGER,DIMENSION(:), POINTER :: OOC_NB_FILES
-        INTEGER :: OOC_NB_FILE_TYPE,pad12
-        INTEGER,DIMENSION(:), POINTER :: OOC_FILE_NAME_LENGTH
+        INTEGER(4),DIMENSION(:), POINTER :: OOC_TOTAL_NB_NODES
+        INTEGER(4),DIMENSION(:), POINTER :: OOC_NB_FILES
+        INTEGER(4) :: OOC_NB_FILE_TYPE,pad12
+        INTEGER(4),DIMENSION(:), POINTER :: OOC_FILE_NAME_LENGTH
         CHARACTER,DIMENSION(:,:), POINTER :: OOC_FILE_NAMES  
 !    Indices of nul pivots
-        INTEGER,DIMENSION(:), POINTER :: PIVNUL_LIST
-!    Array needed to manage additionnal candidate processor 
-        INTEGER, DIMENSION(:,:), POINTER :: SUP_PROC, pad14
+        INTEGER(4),DIMENSION(:), POINTER :: PIVNUL_LIST
+!    Array needed to manage additionnal candidate processor
+        INTEGER(4), DIMENSION(:,:), POINTER :: SUP_PROC, pad14
 !    Lists of nodes where processors work. Built/used in solve phase.
-        INTEGER, DIMENSION(:), POINTER :: IPTR_WORKING, WORKING
+        INTEGER(4), DIMENSION(:), POINTER :: IPTR_WORKING, WORKING
 !    Root structure(internal)
         TYPE (CMUMPS_ROOT_STRUC) :: root
 !    Low-rank
-        INTEGER, POINTER, DIMENSION(:) :: LRGROUPS
-        INTEGER :: NBGRP,pad13
+        INTEGER(4), POINTER, DIMENSION(:) :: LRGROUPS
+        INTEGER(4) :: NBGRP,pad13
 !    Pointer encoding for FDM_F data
         CHARACTER(LEN=1), DIMENSION(:), POINTER :: FDM_F_ENCODING
 !    Pointer array encoding BLR factors pointers
         CHARACTER(LEN=1), DIMENSION(:), POINTER :: BLRARRAY_ENCODING
 !    Multicore
-        INTEGER :: LPOOL_AFTER_L0_OMP, LPOOL_BEFORE_L0_OMP
-        INTEGER :: L_PHYS_L0_OMP
-        INTEGER :: L_VIRT_L0_OMP                                    
-        INTEGER :: LL0_OMP_MAPPING,pad15
+        INTEGER(4) :: LPOOL_AFTER_L0_OMP, LPOOL_BEFORE_L0_OMP
+        INTEGER(4) :: L_PHYS_L0_OMP
+        INTEGER(4) :: L_VIRT_L0_OMP                                    
+        INTEGER(4) :: LL0_OMP_MAPPING,pad15
         INTEGER(8) :: THREAD_LA
 ! Pool before L0_OMP
-        INTEGER, DIMENSION(:), POINTER :: IPOOL_BEFORE_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: IPOOL_BEFORE_L0_OMP
 ! Pool after L0_OMP
-        INTEGER, DIMENSION(:), POINTER :: IPOOL_AFTER_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: IPOOL_AFTER_L0_OMP
 ! Subtrees
-        INTEGER, DIMENSION(:), POINTER :: PHYS_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: PHYS_L0_OMP
 ! Amalgamated subtrees
-        INTEGER, DIMENSION(:), POINTER :: VIRT_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: VIRT_L0_OMP
 ! From heaviest to lowest subtree
-        INTEGER, DIMENSION(:), POINTER :: PERM_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: PERM_L0_OMP
 ! To get leafs in global pool
-        INTEGER, DIMENSION(:), POINTER :: PTR_LEAFS_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: PTR_LEAFS_L0_OMP
 ! Mapping of the subtrees
-        INTEGER, DIMENSION(:), POINTER :: L0_OMP_MAPPING
+        INTEGER(4), DIMENSION(:), POINTER :: L0_OMP_MAPPING
 ! for RR on root
-        REAL, DIMENSION(:), POINTER :: SINGULAR_VALUES
-        INTEGER ::  NB_SINGULAR_VALUES
+        REAL(4), DIMENSION(:), POINTER :: SINGULAR_VALUES
+        INTEGER(4) ::  NB_SINGULAR_VALUES
 ! To know if OOC files are associated to a saved and so if they should be removed.
-        LOGICAL :: ASSOCIATED_OOC_FILES
+        LOGICAL(4) :: ASSOCIATED_OOC_FILES
       END TYPE CMUMPS_STRUC
diff -ruN MUMPS_5.1.2/include/dmumps_root.h mumps-5.1.2-aster7/include/dmumps_root.h
--- MUMPS_5.1.2/include/dmumps_root.h	2017-10-02 09:37:22.000000000 +0200
+++ mumps-5.1.2-aster7/include/dmumps_root.h	2020-10-23 11:16:48.000000000 +0200
@@ -12,17 +12,17 @@
 !
       TYPE DMUMPS_ROOT_STRUC
         SEQUENCE
-        INTEGER :: MBLOCK, NBLOCK, NPROW, NPCOL
-        INTEGER :: MYROW, MYCOL
-        INTEGER :: SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
-        INTEGER :: RHS_NLOC
-        INTEGER :: ROOT_SIZE, TOT_ROOT_SIZE
+        INTEGER(4) :: MBLOCK, NBLOCK, NPROW, NPCOL
+        INTEGER(4) :: MYROW, MYCOL
+        INTEGER(4) :: SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
+        INTEGER(4) :: RHS_NLOC
+        INTEGER(4) :: ROOT_SIZE, TOT_ROOT_SIZE
 !       descriptor for scalapack
-        INTEGER, DIMENSION( 9 ) :: DESCRIPTOR
-        INTEGER :: CNTXT_BLACS, LPIV, rootpad0
-        INTEGER, DIMENSION(:), POINTER :: RG2L_ROW
-        INTEGER, DIMENSION(:), POINTER :: RG2L_COL
-        INTEGER , DIMENSION(:), POINTER :: IPIV, rootpad1
+        INTEGER(4), DIMENSION( 9 ) :: DESCRIPTOR
+        INTEGER(4) :: CNTXT_BLACS, LPIV, rootpad0
+        INTEGER(4), DIMENSION(:), POINTER :: RG2L_ROW
+        INTEGER(4), DIMENSION(:), POINTER :: RG2L_COL
+        INTEGER(4) , DIMENSION(:), POINTER :: IPIV, rootpad1
 !       Centralized master of root
         DOUBLE PRECISION, DIMENSION(:), POINTER :: RHS_CNTR_MASTER_ROOT
 !       Used to access Schur easily from root structure
@@ -35,11 +35,11 @@
         DOUBLE PRECISION, DIMENSION(:,:), POINTER :: RHS_ROOT, rootpad
 !       for try_nullspace preprocessing constant only:
         DOUBLE PRECISION :: QR_RCOND, rootpad3
-        LOGICAL :: yes, gridinit_done
+        LOGICAL(4) :: yes, gridinit_done
 !       for SVD on root (#define try_null_space)
         DOUBLE PRECISION, DIMENSION(:,:), POINTER :: SVD_U, SVD_VT
 !       for RR on root (#define try_null_space)
         DOUBLE PRECISION, DIMENSION(:), POINTER :: SINGULAR_VALUES
-        INTEGER :: NB_SINGULAR_VALUES,rootpad4
+        INTEGER(4) :: NB_SINGULAR_VALUES
 !
       END TYPE DMUMPS_ROOT_STRUC
diff -ruN MUMPS_5.1.2/include/dmumps_struc.h mumps-5.1.2-aster7/include/dmumps_struc.h
--- MUMPS_5.1.2/include/dmumps_struc.h	2017-10-02 09:37:22.000000000 +0200
+++ mumps-5.1.2-aster7/include/dmumps_struc.h	2020-10-23 11:16:48.000000000 +0200
@@ -14,7 +14,7 @@
       TYPE DMUMPS_STRUC
         SEQUENCE
 !
-! This structure contains all parameters 
+! This structure contains all parameters
 ! for the interface to the user, plus internal
 ! information from the solver
 !
@@ -24,56 +24,56 @@
 !    -----------------
 !    MPI Communicator
 !    -----------------
-        INTEGER :: COMM
+        INTEGER(4) :: COMM
 !    ------------------
 !    Problem definition
 !    ------------------
-!    Solver (SYM=0 unsymmetric,SYM=1 symmetric Positive Definite, 
+!    Solver (SYM=0 unsymmetric,SYM=1 symmetric Positive Definite,
 !        SYM=2 general symmetric)
 !    Type of parallelism (PAR=1 host working, PAR=0 host not working)
-        INTEGER ::  SYM, PAR
-        INTEGER ::  JOB 
+        INTEGER(4) ::  SYM, PAR
+        INTEGER(4) ::  JOB
 !    --------------------
-!    Order of Input matrix 
+!    Order of Input matrix
 !    --------------------
-        INTEGER ::  N
+        INTEGER(4) ::  N
 !
 !    ----------------------------------------
 !    Assembled input matrix : User interface
 !    ----------------------------------------
-        INTEGER    :: NZ  ! Standard integer input + bwd. compat.
+        INTEGER(4) :: NZ  ! Standard integer input + bwd. compat.
         INTEGER(8) :: NNZ ! 64-bit integer input
         DOUBLE PRECISION, DIMENSION(:), POINTER :: A
-        INTEGER, DIMENSION(:), POINTER :: IRN, JCN
+        INTEGER(4), DIMENSION(:), POINTER :: IRN, JCN
         DOUBLE PRECISION, DIMENSION(:), POINTER :: COLSCA, ROWSCA, pad0
 !
 !       ------------------------------------
 !       Case of distributed assembled matrix
 !       matrix on entry:
 !       ------------------------------------
-        INTEGER    :: NZ_loc  ! Standard integer input + bwd. compat.
-        INTEGER    :: pad1
+        INTEGER(4)   :: NZ_loc  ! Standard integer input + bwd. compat.
+        INTEGER(4)   :: pad1
         INTEGER(8) :: NNZ_loc ! 64-bit integer input
-        INTEGER, DIMENSION(:), POINTER :: IRN_loc, JCN_loc
+        INTEGER(4), DIMENSION(:), POINTER :: IRN_loc, JCN_loc
         DOUBLE PRECISION, DIMENSION(:), POINTER :: A_loc, pad2
 !
 !    ----------------------------------------
 !    Unassembled input matrix: User interface
 !    ----------------------------------------
-        INTEGER :: NELT, pad3
-        INTEGER, DIMENSION(:), POINTER :: ELTPTR
-        INTEGER, DIMENSION(:), POINTER :: ELTVAR
+        INTEGER(4) :: NELT, pad3
+        INTEGER(4), DIMENSION(:), POINTER :: ELTPTR
+        INTEGER(4), DIMENSION(:), POINTER :: ELTVAR
         DOUBLE PRECISION, DIMENSION(:), POINTER :: A_ELT, pad4
 !
 !    ---------------------------------------------
-!    Symmetric permutation : 
+!    Symmetric permutation :
 !               PERM_IN if given by user (optional)
 !    ---------------------------------------------
-        INTEGER, DIMENSION(:), POINTER :: PERM_IN
+        INTEGER(4), DIMENSION(:), POINTER :: PERM_IN
 !
 !
 ! ******************
-! INPUT/OUTPUT data 
+! INPUT/OUTPUT data
 ! ******************
 !    --------------------------------------------------------
 !    RHS / SOL_loc
@@ -83,43 +83,43 @@
         DOUBLE PRECISION, DIMENSION(:), POINTER :: RHS, REDRHS
         DOUBLE PRECISION, DIMENSION(:), POINTER :: RHS_SPARSE
         DOUBLE PRECISION, DIMENSION(:), POINTER :: SOL_loc
-        INTEGER, DIMENSION(:), POINTER :: IRHS_SPARSE
-        INTEGER, DIMENSION(:), POINTER :: IRHS_PTR
-        INTEGER, DIMENSION(:), POINTER :: ISOL_loc
-        INTEGER ::  LRHS, NRHS, NZ_RHS, LSOL_loc, LREDRHS
-        INTEGER ::  pad5
+        INTEGER(4), DIMENSION(:), POINTER :: IRHS_SPARSE
+        INTEGER(4), DIMENSION(:), POINTER :: IRHS_PTR
+        INTEGER(4), DIMENSION(:), POINTER :: ISOL_loc
+        INTEGER(4) ::  LRHS, NRHS, NZ_RHS, LSOL_loc, LREDRHS
+        INTEGER(4) ::  pad5
 !    ----------------------------
 !    Control parameters,
 !    statistics and output data
 !    ---------------------------
-        INTEGER ::  ICNTL(40)
-        INTEGER ::  INFO(40) 
-        INTEGER :: INFOG(40)
+        INTEGER(4) ::  ICNTL(40)
+        INTEGER(4) ::  INFO(40)
+        INTEGER(4) :: INFOG(40)
         DOUBLE PRECISION ::  COST_SUBTREES
         DOUBLE PRECISION ::  CNTL(15)
         DOUBLE PRECISION ::  RINFO(40)
         DOUBLE PRECISION ::  RINFOG(40)
 !    ---------------------------------------------------------
 !    Permutations computed during analysis:
-!       SYM_PERM: Symmetric permutation 
+!       SYM_PERM: Symmetric permutation
 !       UNS_PERM: Column permutation (optional)
 !    ---------------------------------------------------------
-        INTEGER, DIMENSION(:), POINTER :: SYM_PERM, UNS_PERM
-! 
+        INTEGER(4), DIMENSION(:), POINTER :: SYM_PERM, UNS_PERM
+!
 !    -----
 !    Schur
 !    -----
-        INTEGER ::  NPROW, NPCOL, MBLOCK, NBLOCK
-        INTEGER ::  SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
-        INTEGER ::  SIZE_SCHUR
+        INTEGER(4) ::  NPROW, NPCOL, MBLOCK, NBLOCK
+        INTEGER(4) ::  SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
+        INTEGER(4) ::  SIZE_SCHUR
         DOUBLE PRECISION, DIMENSION(:), POINTER :: SCHUR
         DOUBLE PRECISION, DIMENSION(:), POINTER :: SCHUR_CINTERFACE
-        INTEGER, DIMENSION(:), POINTER :: LISTVAR_SCHUR
+        INTEGER(4), DIMENSION(:), POINTER :: LISTVAR_SCHUR
 !    -------------------------------------
 !    Case of distributed matrix on entry:
 !    DMUMPS potentially provides mapping
 !    -------------------------------------
-        INTEGER, DIMENSION(:), POINTER :: MAPPING
+        INTEGER(4), DIMENSION(:), POINTER :: MAPPING
 !    --------------
 !    Version number
 !    --------------
@@ -145,133 +145,133 @@
 ! INTERNAL Working data
 ! *********************
         INTEGER(8) :: KEEP8(150), MAX_SURF_MASTER
-        INTEGER ::  INST_Number
+        INTEGER(4) ::  INST_Number
 !       For MPI
-        INTEGER ::  COMM_NODES, MYID_NODES, COMM_LOAD
-        INTEGER ::   MYID, NPROCS, NSLAVES
-        INTEGER ::  ASS_IRECV
-        INTEGER ::  LBUFR
-        INTEGER ::  LBUFR_BYTES
-        INTEGER, DIMENSION(:), POINTER ::  BUFR
+        INTEGER(4) ::  COMM_NODES, MYID_NODES, COMM_LOAD
+        INTEGER(4) ::   MYID, NPROCS, NSLAVES
+        INTEGER(4) ::  ASS_IRECV
+        INTEGER(4) ::  LBUFR
+        INTEGER(4) ::  LBUFR_BYTES
+        INTEGER(4), DIMENSION(:), POINTER ::  BUFR
 !       IS is used for the factors + workspace for contrib. blocks
-        INTEGER, DIMENSION(:), POINTER :: IS
-!       IS1 (maxis1) contains working arrays computed 
+        INTEGER(4), DIMENSION(:), POINTER :: IS
+!       IS1 (maxis1) contains working arrays computed
 !       and used only during analysis
-        INTEGER, DIMENSION(:), POINTER :: IS1
+        INTEGER(4), DIMENSION(:), POINTER :: IS1
 !       For analysis/facto/solve phases
-        INTEGER ::  MAXIS1, Deficiency
-        INTEGER ::  KEEP(500)
+        INTEGER(4) ::  MAXIS1, Deficiency
+        INTEGER(4) ::  KEEP(500)
 !       The following data/arrays are computed during the analysis
 !       phase and used during the factorization and solve phases.
-        INTEGER ::  LNA
-        INTEGER ::  NBSA
-        INTEGER,POINTER,DIMENSION(:) :: STEP, NE_STEPS, ND_STEPS
-!  Info for pruning tree 
-        INTEGER,POINTER,DIMENSION(:) :: Step2node
+        INTEGER(4) ::  LNA
+        INTEGER(4) ::  NBSA
+        INTEGER(4),POINTER,DIMENSION(:) :: STEP, NE_STEPS, ND_STEPS
+!  Info for pruning tree
+        INTEGER(4),POINTER,DIMENSION(:) :: Step2node
 !  ---------------------
-        INTEGER,POINTER,DIMENSION(:) :: FRERE_STEPS, DAD_STEPS
-        INTEGER,POINTER,DIMENSION(:) :: FILS, FRTPTR, FRTELT
+        INTEGER(4),POINTER,DIMENSION(:) :: FRERE_STEPS, DAD_STEPS
+        INTEGER(4),POINTER,DIMENSION(:) :: FILS, FRTPTR, FRTELT
         INTEGER(8),POINTER,DIMENSION(:) :: PTRAR
-        INTEGER,POINTER,DIMENSION(:) :: NA, PROCNODE_STEPS
+        INTEGER(4),POINTER,DIMENSION(:) :: NA, PROCNODE_STEPS
 !       The two pointer arrays computed in facto and used by the solve
-!          (except the factors) are PTLUST_S and PTRFAC. 
-        INTEGER, DIMENSION(:), POINTER :: PTLUST_S
+!          (except the factors) are PTLUST_S and PTRFAC.
+        INTEGER(4), DIMENSION(:), POINTER :: PTLUST_S
         INTEGER(8), DIMENSION(:), POINTER :: PTRFAC
 !       main real working arrays for factorization/solve phases
         DOUBLE PRECISION, DIMENSION(:), POINTER :: S
 !       Information on mapping
-        INTEGER, DIMENSION(:), POINTER :: PROCNODE
-!       Input matrix ready for numerical assembly 
+        INTEGER(4), DIMENSION(:), POINTER :: PROCNODE
+!       Input matrix ready for numerical assembly
 !           -arrowhead format in case of assembled matrix
 !           -element format otherwise
-        INTEGER, DIMENSION(:), POINTER :: INTARR
+        INTEGER(4), DIMENSION(:), POINTER :: INTARR
         DOUBLE PRECISION, DIMENSION(:), POINTER :: DBLARR
 !       Element entry: internal data
-        INTEGER :: NELT_loc, LELTVAR
-        INTEGER, DIMENSION(:), POINTER :: ELTPROC
+        INTEGER(4) :: NELT_loc, LELTVAR
+        INTEGER(4), DIMENSION(:), POINTER :: ELTPROC
 !       Candidates and node partitionning
-        INTEGER, DIMENSION(:,:), POINTER :: CANDIDATES
-        INTEGER, DIMENSION(:),   POINTER :: ISTEP_TO_INIV2
-        INTEGER, DIMENSION(:),   POINTER :: FUTURE_NIV2
-        INTEGER, DIMENSION(:,:), POINTER :: TAB_POS_IN_PERE 
-        LOGICAL, DIMENSION(:),   POINTER :: I_AM_CAND
+        INTEGER(4), DIMENSION(:,:), POINTER :: CANDIDATES
+        INTEGER(4), DIMENSION(:),   POINTER :: ISTEP_TO_INIV2
+        INTEGER(4), DIMENSION(:),   POINTER :: FUTURE_NIV2
+        INTEGER(4), DIMENSION(:,:), POINTER :: TAB_POS_IN_PERE
+        LOGICAL(4), DIMENSION(:),   POINTER :: I_AM_CAND
 !       For heterogeneous architecture
-        INTEGER, DIMENSION(:), POINTER :: MEM_DIST
+        INTEGER(4), DIMENSION(:), POINTER :: MEM_DIST
 !       Compressed RHS
-        INTEGER, DIMENSION(:),   POINTER :: POSINRHSCOMP_ROW
-        LOGICAL  :: POSINRHSCOMP_COL_ALLOC, pad11
-        INTEGER, DIMENSION(:),   POINTER :: POSINRHSCOMP_COL
+        INTEGER(4), DIMENSION(:),   POINTER :: POSINRHSCOMP_ROW
+        LOGICAL(4)  :: POSINRHSCOMP_COL_ALLOC, pad11
+        INTEGER(4), DIMENSION(:),   POINTER :: POSINRHSCOMP_COL
         DOUBLE PRECISION, DIMENSION(:),   POINTER :: RHSCOMP
 !       Info on the subtrees to be used during factorization
         DOUBLE PRECISION, DIMENSION(:), POINTER :: MEM_SUBTREE
         DOUBLE PRECISION, DIMENSION(:), POINTER :: COST_TRAV
-        INTEGER, DIMENSION(:),   POINTER :: MY_ROOT_SBTR
-        INTEGER, DIMENSION(:),   POINTER :: MY_FIRST_LEAF
-        INTEGER, DIMENSION(:),   POINTER :: MY_NB_LEAF
-        INTEGER, DIMENSION(:),   POINTER :: DEPTH_FIRST
-        INTEGER, DIMENSION(:),   POINTER :: DEPTH_FIRST_SEQ
-        INTEGER, DIMENSION(:),   POINTER :: SBTR_ID
-        INTEGER, DIMENSION(:),   POINTER :: SCHED_DEP
-        INTEGER, DIMENSION(:),   POINTER :: SCHED_GRP
-        INTEGER, DIMENSION(:),   POINTER :: SCHED_SBTR
-        INTEGER, DIMENSION(:),   POINTER :: CROIX_MANU
+        INTEGER(4), DIMENSION(:),   POINTER :: MY_ROOT_SBTR
+        INTEGER(4), DIMENSION(:),   POINTER :: MY_FIRST_LEAF
+        INTEGER(4), DIMENSION(:),   POINTER :: MY_NB_LEAF
+        INTEGER(4), DIMENSION(:),   POINTER :: DEPTH_FIRST
+        INTEGER(4), DIMENSION(:),   POINTER :: DEPTH_FIRST_SEQ
+        INTEGER(4), DIMENSION(:),   POINTER :: SBTR_ID
+        INTEGER(4), DIMENSION(:),   POINTER :: SCHED_DEP
+        INTEGER(4), DIMENSION(:),   POINTER :: SCHED_GRP
+        INTEGER(4), DIMENSION(:),   POINTER :: SCHED_SBTR
+        INTEGER(4), DIMENSION(:),   POINTER :: CROIX_MANU
         DOUBLE PRECISION, DIMENSION(:), POINTER :: WK_USER
-        INTEGER :: NBSA_LOCAL
-        INTEGER :: LWK_USER
+        INTEGER(4) :: NBSA_LOCAL
+        INTEGER(4) :: LWK_USER
 !    Internal control array
         DOUBLE PRECISION ::  DKEEP(230)
 !    For simulating parallel out-of-core stack.
         DOUBLE PRECISION, DIMENSION(:),POINTER :: CB_SON_SIZE
 !    Instance number used/managed by the C/F77 interface
-        INTEGER ::  INSTANCE_NUMBER
+        INTEGER(4) ::  INSTANCE_NUMBER
 !    OOC management data that must persist from factorization to solve.
-        INTEGER ::  OOC_MAX_NB_NODES_FOR_ZONE
-        INTEGER, DIMENSION(:,:),   POINTER :: OOC_INODE_SEQUENCE
+        INTEGER(4) ::  OOC_MAX_NB_NODES_FOR_ZONE
+        INTEGER(4), DIMENSION(:,:),   POINTER :: OOC_INODE_SEQUENCE
         INTEGER(8),DIMENSION(:,:), POINTER :: OOC_SIZE_OF_BLOCK
         INTEGER(8), DIMENSION(:,:),   POINTER :: OOC_VADDR
-        INTEGER,DIMENSION(:), POINTER :: OOC_TOTAL_NB_NODES
-        INTEGER,DIMENSION(:), POINTER :: OOC_NB_FILES
-        INTEGER :: OOC_NB_FILE_TYPE,pad12
-        INTEGER,DIMENSION(:), POINTER :: OOC_FILE_NAME_LENGTH
+        INTEGER(4),DIMENSION(:), POINTER :: OOC_TOTAL_NB_NODES
+        INTEGER(4),DIMENSION(:), POINTER :: OOC_NB_FILES
+        INTEGER(4) :: OOC_NB_FILE_TYPE,pad12
+        INTEGER(4),DIMENSION(:), POINTER :: OOC_FILE_NAME_LENGTH
         CHARACTER,DIMENSION(:,:), POINTER :: OOC_FILE_NAMES  
 !    Indices of nul pivots
-        INTEGER,DIMENSION(:), POINTER :: PIVNUL_LIST
-!    Array needed to manage additionnal candidate processor 
-        INTEGER, DIMENSION(:,:), POINTER :: SUP_PROC, pad14
+        INTEGER(4),DIMENSION(:), POINTER :: PIVNUL_LIST
+!    Array needed to manage additionnal candidate processor
+        INTEGER(4), DIMENSION(:,:), POINTER :: SUP_PROC, pad14
 !    Lists of nodes where processors work. Built/used in solve phase.
-        INTEGER, DIMENSION(:), POINTER :: IPTR_WORKING, WORKING
+        INTEGER(4), DIMENSION(:), POINTER :: IPTR_WORKING, WORKING
 !    Root structure(internal)
         TYPE (DMUMPS_ROOT_STRUC) :: root
 !    Low-rank
-        INTEGER, POINTER, DIMENSION(:) :: LRGROUPS
-        INTEGER :: NBGRP,pad13
+        INTEGER(4), POINTER, DIMENSION(:) :: LRGROUPS
+        INTEGER(4) :: NBGRP,pad13
 !    Pointer encoding for FDM_F data
         CHARACTER(LEN=1), DIMENSION(:), POINTER :: FDM_F_ENCODING
 !    Pointer array encoding BLR factors pointers
         CHARACTER(LEN=1), DIMENSION(:), POINTER :: BLRARRAY_ENCODING
 !    Multicore
-        INTEGER :: LPOOL_AFTER_L0_OMP, LPOOL_BEFORE_L0_OMP
-        INTEGER :: L_PHYS_L0_OMP
-        INTEGER :: L_VIRT_L0_OMP                                    
-        INTEGER :: LL0_OMP_MAPPING,pad15
+        INTEGER(4) :: LPOOL_AFTER_L0_OMP, LPOOL_BEFORE_L0_OMP
+        INTEGER(4) :: L_PHYS_L0_OMP
+        INTEGER(4) :: L_VIRT_L0_OMP                                    
+        INTEGER(4) :: LL0_OMP_MAPPING,pad15
         INTEGER(8) :: THREAD_LA
 ! Pool before L0_OMP
-        INTEGER, DIMENSION(:), POINTER :: IPOOL_BEFORE_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: IPOOL_BEFORE_L0_OMP
 ! Pool after L0_OMP
-        INTEGER, DIMENSION(:), POINTER :: IPOOL_AFTER_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: IPOOL_AFTER_L0_OMP
 ! Subtrees
-        INTEGER, DIMENSION(:), POINTER :: PHYS_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: PHYS_L0_OMP
 ! Amalgamated subtrees
-        INTEGER, DIMENSION(:), POINTER :: VIRT_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: VIRT_L0_OMP
 ! From heaviest to lowest subtree
-        INTEGER, DIMENSION(:), POINTER :: PERM_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: PERM_L0_OMP
 ! To get leafs in global pool
-        INTEGER, DIMENSION(:), POINTER :: PTR_LEAFS_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: PTR_LEAFS_L0_OMP
 ! Mapping of the subtrees
-        INTEGER, DIMENSION(:), POINTER :: L0_OMP_MAPPING
+        INTEGER(4), DIMENSION(:), POINTER :: L0_OMP_MAPPING
 ! for RR on root
         DOUBLE PRECISION, DIMENSION(:), POINTER :: SINGULAR_VALUES
-        INTEGER ::  NB_SINGULAR_VALUES
+        INTEGER(4) ::  NB_SINGULAR_VALUES
 ! To know if OOC files are associated to a saved and so if they should be removed.
-        LOGICAL :: ASSOCIATED_OOC_FILES
+        LOGICAL(4) :: ASSOCIATED_OOC_FILES
       END TYPE DMUMPS_STRUC
diff -ruN MUMPS_5.1.2/include/smumps_root.h mumps-5.1.2-aster7/include/smumps_root.h
--- MUMPS_5.1.2/include/smumps_root.h	2017-10-02 09:37:22.000000000 +0200
+++ mumps-5.1.2-aster7/include/smumps_root.h	2020-10-23 11:16:48.000000000 +0200
@@ -12,34 +12,34 @@
 !
       TYPE SMUMPS_ROOT_STRUC
         SEQUENCE
-        INTEGER :: MBLOCK, NBLOCK, NPROW, NPCOL
-        INTEGER :: MYROW, MYCOL
-        INTEGER :: SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
-        INTEGER :: RHS_NLOC
-        INTEGER :: ROOT_SIZE, TOT_ROOT_SIZE
+        INTEGER(4) :: MBLOCK, NBLOCK, NPROW, NPCOL
+        INTEGER(4) :: MYROW, MYCOL
+        INTEGER(4) :: SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
+        INTEGER(4) :: RHS_NLOC
+        INTEGER(4) :: ROOT_SIZE, TOT_ROOT_SIZE
 !       descriptor for scalapack
-        INTEGER, DIMENSION( 9 ) :: DESCRIPTOR
-        INTEGER :: CNTXT_BLACS, LPIV, rootpad0
-        INTEGER, DIMENSION(:), POINTER :: RG2L_ROW
-        INTEGER, DIMENSION(:), POINTER :: RG2L_COL
-        INTEGER , DIMENSION(:), POINTER :: IPIV, rootpad1
+        INTEGER(4), DIMENSION( 9 ) :: DESCRIPTOR
+        INTEGER(4) :: CNTXT_BLACS, LPIV, rootpad0
+        INTEGER(4), DIMENSION(:), POINTER :: RG2L_ROW
+        INTEGER(4), DIMENSION(:), POINTER :: RG2L_COL
+        INTEGER(4) , DIMENSION(:), POINTER :: IPIV, rootpad1
 !       Centralized master of root
-        REAL, DIMENSION(:), POINTER :: RHS_CNTR_MASTER_ROOT
+        REAL(4), DIMENSION(:), POINTER :: RHS_CNTR_MASTER_ROOT
 !       Used to access Schur easily from root structure
-        REAL, DIMENSION(:), POINTER :: SCHUR_POINTER
+        REAL(4), DIMENSION(:), POINTER :: SCHUR_POINTER
 !       for try_null_space preprocessing constant only:
-        REAL, DIMENSION(:), POINTER :: QR_TAU, rootpad2
+        REAL(4), DIMENSION(:), POINTER :: QR_TAU, rootpad2
 !       Fwd in facto: 
 !           case of scalapack root: to store RHS in 2D block cyclic
 !           format compatible with root distribution
-        REAL, DIMENSION(:,:), POINTER :: RHS_ROOT, rootpad
+        REAL(4), DIMENSION(:,:), POINTER :: RHS_ROOT, rootpad
 !       for try_nullspace preprocessing constant only:
-        REAL :: QR_RCOND, rootpad3
-        LOGICAL :: yes, gridinit_done
+        REAL(4) :: QR_RCOND, rootpad3
+        LOGICAL(4) :: yes, gridinit_done
 !       for SVD on root (#define try_null_space)
-        REAL, DIMENSION(:,:), POINTER :: SVD_U, SVD_VT
+        REAL(4), DIMENSION(:,:), POINTER :: SVD_U, SVD_VT
 !       for RR on root (#define try_null_space)
-        REAL, DIMENSION(:), POINTER :: SINGULAR_VALUES
-        INTEGER :: NB_SINGULAR_VALUES,rootpad4
+        REAL(4), DIMENSION(:), POINTER :: SINGULAR_VALUES
+        INTEGER(4) :: NB_SINGULAR_VALUES,rootpad4
 !
       END TYPE SMUMPS_ROOT_STRUC
diff -ruN MUMPS_5.1.2/include/smumps_struc.h mumps-5.1.2-aster7/include/smumps_struc.h
--- MUMPS_5.1.2/include/smumps_struc.h	2017-10-02 09:37:22.000000000 +0200
+++ mumps-5.1.2-aster7/include/smumps_struc.h	2020-10-23 11:16:48.000000000 +0200
@@ -14,7 +14,7 @@
       TYPE SMUMPS_STRUC
         SEQUENCE
 !
-! This structure contains all parameters 
+! This structure contains all parameters
 ! for the interface to the user, plus internal
 ! information from the solver
 !
@@ -24,102 +24,102 @@
 !    -----------------
 !    MPI Communicator
 !    -----------------
-        INTEGER :: COMM
+        INTEGER(4) :: COMM
 !    ------------------
 !    Problem definition
 !    ------------------
-!    Solver (SYM=0 unsymmetric,SYM=1 symmetric Positive Definite, 
+!    Solver (SYM=0 unsymmetric,SYM=1 symmetric Positive Definite,
 !        SYM=2 general symmetric)
 !    Type of parallelism (PAR=1 host working, PAR=0 host not working)
-        INTEGER ::  SYM, PAR
-        INTEGER ::  JOB 
+        INTEGER(4) ::  SYM, PAR
+        INTEGER(4) ::  JOB
 !    --------------------
-!    Order of Input matrix 
+!    Order of Input matrix
 !    --------------------
-        INTEGER ::  N
+        INTEGER(4) ::  N
 !
 !    ----------------------------------------
 !    Assembled input matrix : User interface
 !    ----------------------------------------
-        INTEGER    :: NZ  ! Standard integer input + bwd. compat.
+        INTEGER(4) :: NZ  ! Standard integer input + bwd. compat.
         INTEGER(8) :: NNZ ! 64-bit integer input
-        REAL, DIMENSION(:), POINTER :: A
-        INTEGER, DIMENSION(:), POINTER :: IRN, JCN
-        REAL, DIMENSION(:), POINTER :: COLSCA, ROWSCA, pad0
+        REAL(4), DIMENSION(:), POINTER :: A
+        INTEGER(4), DIMENSION(:), POINTER :: IRN, JCN
+        REAL(4), DIMENSION(:), POINTER :: COLSCA, ROWSCA, pad0
 !
 !       ------------------------------------
 !       Case of distributed assembled matrix
 !       matrix on entry:
 !       ------------------------------------
-        INTEGER    :: NZ_loc  ! Standard integer input + bwd. compat.
-        INTEGER    :: pad1
+        INTEGER(4) :: NZ_loc  ! Standard integer input + bwd. compat.
+        INTEGER(4) :: pad1
         INTEGER(8) :: NNZ_loc ! 64-bit integer input
-        INTEGER, DIMENSION(:), POINTER :: IRN_loc, JCN_loc
-        REAL, DIMENSION(:), POINTER :: A_loc, pad2
+        INTEGER(4), DIMENSION(:), POINTER :: IRN_loc, JCN_loc
+        REAL(4), DIMENSION(:), POINTER :: A_loc, pad2
 !
 !    ----------------------------------------
 !    Unassembled input matrix: User interface
 !    ----------------------------------------
-        INTEGER :: NELT, pad3
-        INTEGER, DIMENSION(:), POINTER :: ELTPTR
-        INTEGER, DIMENSION(:), POINTER :: ELTVAR
-        REAL, DIMENSION(:), POINTER :: A_ELT, pad4
+        INTEGER(4) :: NELT, pad3
+        INTEGER(4), DIMENSION(:), POINTER :: ELTPTR
+        INTEGER(4), DIMENSION(:), POINTER :: ELTVAR
+        REAL(4), DIMENSION(:), POINTER :: A_ELT, pad4
 !
 !    ---------------------------------------------
-!    Symmetric permutation : 
+!    Symmetric permutation :
 !               PERM_IN if given by user (optional)
 !    ---------------------------------------------
-        INTEGER, DIMENSION(:), POINTER :: PERM_IN
+        INTEGER(4), DIMENSION(:), POINTER :: PERM_IN
 !
 !
 ! ******************
-! INPUT/OUTPUT data 
+! INPUT/OUTPUT data
 ! ******************
 !    --------------------------------------------------------
 !    RHS / SOL_loc
 !    -------------
 !       right-hand side and solution
 !    -------------------------------------------------------
-        REAL, DIMENSION(:), POINTER :: RHS, REDRHS
-        REAL, DIMENSION(:), POINTER :: RHS_SPARSE
-        REAL, DIMENSION(:), POINTER :: SOL_loc
-        INTEGER, DIMENSION(:), POINTER :: IRHS_SPARSE
-        INTEGER, DIMENSION(:), POINTER :: IRHS_PTR
-        INTEGER, DIMENSION(:), POINTER :: ISOL_loc
-        INTEGER ::  LRHS, NRHS, NZ_RHS, LSOL_loc, LREDRHS
-        INTEGER ::  pad5
+        REAL(4), DIMENSION(:), POINTER :: RHS, REDRHS
+        REAL(4), DIMENSION(:), POINTER :: RHS_SPARSE
+        REAL(4), DIMENSION(:), POINTER :: SOL_loc
+        INTEGER(4), DIMENSION(:), POINTER :: IRHS_SPARSE
+        INTEGER(4), DIMENSION(:), POINTER :: IRHS_PTR
+        INTEGER(4), DIMENSION(:), POINTER :: ISOL_loc
+        INTEGER(4) ::  LRHS, NRHS, NZ_RHS, LSOL_loc, LREDRHS
+        INTEGER(4) ::  pad5
 !    ----------------------------
 !    Control parameters,
 !    statistics and output data
 !    ---------------------------
-        INTEGER ::  ICNTL(40)
-        INTEGER ::  INFO(40) 
-        INTEGER :: INFOG(40)
-        REAL ::  COST_SUBTREES
-        REAL ::  CNTL(15)
-        REAL ::  RINFO(40)
-        REAL ::  RINFOG(40)
+        INTEGER(4) ::  ICNTL(40)
+        INTEGER(4) ::  INFO(40)
+        INTEGER(4) :: INFOG(40)
+        REAL(4) ::  COST_SUBTREES
+        REAL(4) ::  CNTL(15)
+        REAL(4) ::  RINFO(40)
+        REAL(4) ::  RINFOG(40)
 !    ---------------------------------------------------------
 !    Permutations computed during analysis:
-!       SYM_PERM: Symmetric permutation 
+!       SYM_PERM: Symmetric permutation
 !       UNS_PERM: Column permutation (optional)
 !    ---------------------------------------------------------
-        INTEGER, DIMENSION(:), POINTER :: SYM_PERM, UNS_PERM
-! 
+        INTEGER(4), DIMENSION(:), POINTER :: SYM_PERM, UNS_PERM
+!
 !    -----
 !    Schur
 !    -----
-        INTEGER ::  NPROW, NPCOL, MBLOCK, NBLOCK
-        INTEGER ::  SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
-        INTEGER ::  SIZE_SCHUR
-        REAL, DIMENSION(:), POINTER :: SCHUR
-        REAL, DIMENSION(:), POINTER :: SCHUR_CINTERFACE
-        INTEGER, DIMENSION(:), POINTER :: LISTVAR_SCHUR
+        INTEGER(4) ::  NPROW, NPCOL, MBLOCK, NBLOCK
+        INTEGER(4) ::  SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
+        INTEGER(4) ::  SIZE_SCHUR
+        REAL(4), DIMENSION(:), POINTER :: SCHUR
+        REAL(4), DIMENSION(:), POINTER :: SCHUR_CINTERFACE
+        INTEGER(4), DIMENSION(:), POINTER :: LISTVAR_SCHUR
 !    -------------------------------------
 !    Case of distributed matrix on entry:
 !    SMUMPS potentially provides mapping
 !    -------------------------------------
-        INTEGER, DIMENSION(:), POINTER :: MAPPING
+        INTEGER(4), DIMENSION(:), POINTER :: MAPPING
 !    --------------
 !    Version number
 !    --------------
@@ -145,133 +145,133 @@
 ! INTERNAL Working data
 ! *********************
         INTEGER(8) :: KEEP8(150), MAX_SURF_MASTER
-        INTEGER ::  INST_Number
+        INTEGER(4) ::  INST_Number
 !       For MPI
-        INTEGER ::  COMM_NODES, MYID_NODES, COMM_LOAD
-        INTEGER ::   MYID, NPROCS, NSLAVES
-        INTEGER ::  ASS_IRECV
-        INTEGER ::  LBUFR
-        INTEGER ::  LBUFR_BYTES
-        INTEGER, DIMENSION(:), POINTER ::  BUFR
+        INTEGER(4) ::  COMM_NODES, MYID_NODES, COMM_LOAD
+        INTEGER(4) ::   MYID, NPROCS, NSLAVES
+        INTEGER(4) ::  ASS_IRECV
+        INTEGER(4) ::  LBUFR
+        INTEGER(4) ::  LBUFR_BYTES
+        INTEGER(4), DIMENSION(:), POINTER ::  BUFR
 !       IS is used for the factors + workspace for contrib. blocks
-        INTEGER, DIMENSION(:), POINTER :: IS
-!       IS1 (maxis1) contains working arrays computed 
+        INTEGER(4), DIMENSION(:), POINTER :: IS
+!       IS1 (maxis1) contains working arrays computed
 !       and used only during analysis
-        INTEGER, DIMENSION(:), POINTER :: IS1
+        INTEGER(4), DIMENSION(:), POINTER :: IS1
 !       For analysis/facto/solve phases
-        INTEGER ::  MAXIS1, Deficiency
-        INTEGER ::  KEEP(500)
+        INTEGER(4) ::  MAXIS1, Deficiency
+        INTEGER(4) ::  KEEP(500)
 !       The following data/arrays are computed during the analysis
 !       phase and used during the factorization and solve phases.
-        INTEGER ::  LNA
-        INTEGER ::  NBSA
-        INTEGER,POINTER,DIMENSION(:) :: STEP, NE_STEPS, ND_STEPS
-!  Info for pruning tree 
-        INTEGER,POINTER,DIMENSION(:) :: Step2node
+        INTEGER(4) ::  LNA
+        INTEGER(4) ::  NBSA
+        INTEGER(4),POINTER,DIMENSION(:) :: STEP, NE_STEPS, ND_STEPS
+!  Info for pruning tree
+        INTEGER(4),POINTER,DIMENSION(:) :: Step2node
 !  ---------------------
-        INTEGER,POINTER,DIMENSION(:) :: FRERE_STEPS, DAD_STEPS
-        INTEGER,POINTER,DIMENSION(:) :: FILS, FRTPTR, FRTELT
+        INTEGER(4),POINTER,DIMENSION(:) :: FRERE_STEPS, DAD_STEPS
+        INTEGER(4),POINTER,DIMENSION(:) :: FILS, FRTPTR, FRTELT
         INTEGER(8),POINTER,DIMENSION(:) :: PTRAR
-        INTEGER,POINTER,DIMENSION(:) :: NA, PROCNODE_STEPS
+        INTEGER(4),POINTER,DIMENSION(:) :: NA, PROCNODE_STEPS
 !       The two pointer arrays computed in facto and used by the solve
-!          (except the factors) are PTLUST_S and PTRFAC. 
-        INTEGER, DIMENSION(:), POINTER :: PTLUST_S
+!          (except the factors) are PTLUST_S and PTRFAC.
+        INTEGER(4), DIMENSION(:), POINTER :: PTLUST_S
         INTEGER(8), DIMENSION(:), POINTER :: PTRFAC
 !       main real working arrays for factorization/solve phases
-        REAL, DIMENSION(:), POINTER :: S
+        REAL(4), DIMENSION(:), POINTER :: S
 !       Information on mapping
-        INTEGER, DIMENSION(:), POINTER :: PROCNODE
-!       Input matrix ready for numerical assembly 
+        INTEGER(4), DIMENSION(:), POINTER :: PROCNODE
+!       Input matrix ready for numerical assembly
 !           -arrowhead format in case of assembled matrix
 !           -element format otherwise
-        INTEGER, DIMENSION(:), POINTER :: INTARR
-        REAL, DIMENSION(:), POINTER :: DBLARR
+        INTEGER(4), DIMENSION(:), POINTER :: INTARR
+        REAL(4), DIMENSION(:), POINTER :: DBLARR
 !       Element entry: internal data
-        INTEGER :: NELT_loc, LELTVAR
-        INTEGER, DIMENSION(:), POINTER :: ELTPROC
+        INTEGER(4) :: NELT_loc, LELTVAR
+        INTEGER(4), DIMENSION(:), POINTER :: ELTPROC
 !       Candidates and node partitionning
-        INTEGER, DIMENSION(:,:), POINTER :: CANDIDATES
-        INTEGER, DIMENSION(:),   POINTER :: ISTEP_TO_INIV2
-        INTEGER, DIMENSION(:),   POINTER :: FUTURE_NIV2
-        INTEGER, DIMENSION(:,:), POINTER :: TAB_POS_IN_PERE 
-        LOGICAL, DIMENSION(:),   POINTER :: I_AM_CAND
+        INTEGER(4), DIMENSION(:,:), POINTER :: CANDIDATES
+        INTEGER(4), DIMENSION(:),   POINTER :: ISTEP_TO_INIV2
+        INTEGER(4), DIMENSION(:),   POINTER :: FUTURE_NIV2
+        INTEGER(4), DIMENSION(:,:), POINTER :: TAB_POS_IN_PERE
+        LOGICAL(4), DIMENSION(:),   POINTER :: I_AM_CAND
 !       For heterogeneous architecture
-        INTEGER, DIMENSION(:), POINTER :: MEM_DIST
+        INTEGER(4), DIMENSION(:), POINTER :: MEM_DIST
 !       Compressed RHS
-        INTEGER, DIMENSION(:),   POINTER :: POSINRHSCOMP_ROW
-        LOGICAL  :: POSINRHSCOMP_COL_ALLOC, pad11
-        INTEGER, DIMENSION(:),   POINTER :: POSINRHSCOMP_COL
-        REAL, DIMENSION(:),   POINTER :: RHSCOMP
+        INTEGER(4), DIMENSION(:),   POINTER :: POSINRHSCOMP_ROW
+        LOGICAL(4)  :: POSINRHSCOMP_COL_ALLOC, pad11
+        INTEGER(4), DIMENSION(:),   POINTER :: POSINRHSCOMP_COL
+        REAL(4), DIMENSION(:),   POINTER :: RHSCOMP
 !       Info on the subtrees to be used during factorization
         DOUBLE PRECISION, DIMENSION(:), POINTER :: MEM_SUBTREE
         DOUBLE PRECISION, DIMENSION(:), POINTER :: COST_TRAV
-        INTEGER, DIMENSION(:),   POINTER :: MY_ROOT_SBTR
-        INTEGER, DIMENSION(:),   POINTER :: MY_FIRST_LEAF
-        INTEGER, DIMENSION(:),   POINTER :: MY_NB_LEAF
-        INTEGER, DIMENSION(:),   POINTER :: DEPTH_FIRST
-        INTEGER, DIMENSION(:),   POINTER :: DEPTH_FIRST_SEQ
-        INTEGER, DIMENSION(:),   POINTER :: SBTR_ID
-        INTEGER, DIMENSION(:),   POINTER :: SCHED_DEP
-        INTEGER, DIMENSION(:),   POINTER :: SCHED_GRP
-        INTEGER, DIMENSION(:),   POINTER :: SCHED_SBTR
-        INTEGER, DIMENSION(:),   POINTER :: CROIX_MANU
-        REAL, DIMENSION(:), POINTER :: WK_USER
-        INTEGER :: NBSA_LOCAL
-        INTEGER :: LWK_USER
+        INTEGER(4), DIMENSION(:),   POINTER :: MY_ROOT_SBTR
+        INTEGER(4), DIMENSION(:),   POINTER :: MY_FIRST_LEAF
+        INTEGER(4), DIMENSION(:),   POINTER :: MY_NB_LEAF
+        INTEGER(4), DIMENSION(:),   POINTER :: DEPTH_FIRST
+        INTEGER(4), DIMENSION(:),   POINTER :: DEPTH_FIRST_SEQ
+        INTEGER(4), DIMENSION(:),   POINTER :: SBTR_ID
+        INTEGER(4), DIMENSION(:),   POINTER :: SCHED_DEP
+        INTEGER(4), DIMENSION(:),   POINTER :: SCHED_GRP
+        INTEGER(4), DIMENSION(:),   POINTER :: SCHED_SBTR
+        INTEGER(4), DIMENSION(:),   POINTER :: CROIX_MANU
+        REAL(4), DIMENSION(:), POINTER :: WK_USER
+        INTEGER(4) :: NBSA_LOCAL
+        INTEGER(4) :: LWK_USER
 !    Internal control array
-        REAL ::  DKEEP(230)
+        REAL(4) ::  DKEEP(230)
 !    For simulating parallel out-of-core stack.
         DOUBLE PRECISION, DIMENSION(:),POINTER :: CB_SON_SIZE
 !    Instance number used/managed by the C/F77 interface
-        INTEGER ::  INSTANCE_NUMBER
+        INTEGER(4) ::  INSTANCE_NUMBER
 !    OOC management data that must persist from factorization to solve.
-        INTEGER ::  OOC_MAX_NB_NODES_FOR_ZONE
-        INTEGER, DIMENSION(:,:),   POINTER :: OOC_INODE_SEQUENCE
+        INTEGER(4) ::  OOC_MAX_NB_NODES_FOR_ZONE
+        INTEGER(4), DIMENSION(:,:),   POINTER :: OOC_INODE_SEQUENCE
         INTEGER(8),DIMENSION(:,:), POINTER :: OOC_SIZE_OF_BLOCK
         INTEGER(8), DIMENSION(:,:),   POINTER :: OOC_VADDR
-        INTEGER,DIMENSION(:), POINTER :: OOC_TOTAL_NB_NODES
-        INTEGER,DIMENSION(:), POINTER :: OOC_NB_FILES
-        INTEGER :: OOC_NB_FILE_TYPE,pad12
-        INTEGER,DIMENSION(:), POINTER :: OOC_FILE_NAME_LENGTH
+        INTEGER(4),DIMENSION(:), POINTER :: OOC_TOTAL_NB_NODES
+        INTEGER(4),DIMENSION(:), POINTER :: OOC_NB_FILES
+        INTEGER(4) :: OOC_NB_FILE_TYPE,pad12
+        INTEGER(4),DIMENSION(:), POINTER :: OOC_FILE_NAME_LENGTH
         CHARACTER,DIMENSION(:,:), POINTER :: OOC_FILE_NAMES  
 !    Indices of nul pivots
-        INTEGER,DIMENSION(:), POINTER :: PIVNUL_LIST
-!    Array needed to manage additionnal candidate processor 
-        INTEGER, DIMENSION(:,:), POINTER :: SUP_PROC, pad14
+        INTEGER(4),DIMENSION(:), POINTER :: PIVNUL_LIST
+!    Array needed to manage additionnal candidate processor
+        INTEGER(4), DIMENSION(:,:), POINTER :: SUP_PROC, pad14
 !    Lists of nodes where processors work. Built/used in solve phase.
-        INTEGER, DIMENSION(:), POINTER :: IPTR_WORKING, WORKING
+        INTEGER(4), DIMENSION(:), POINTER :: IPTR_WORKING, WORKING
 !    Root structure(internal)
         TYPE (SMUMPS_ROOT_STRUC) :: root
 !    Low-rank
-        INTEGER, POINTER, DIMENSION(:) :: LRGROUPS
-        INTEGER :: NBGRP,pad13
+        INTEGER(4), POINTER, DIMENSION(:) :: LRGROUPS
+        INTEGER(4) :: NBGRP,pad13
 !    Pointer encoding for FDM_F data
         CHARACTER(LEN=1), DIMENSION(:), POINTER :: FDM_F_ENCODING
 !    Pointer array encoding BLR factors pointers
         CHARACTER(LEN=1), DIMENSION(:), POINTER :: BLRARRAY_ENCODING
 !    Multicore
-        INTEGER :: LPOOL_AFTER_L0_OMP, LPOOL_BEFORE_L0_OMP
-        INTEGER :: L_PHYS_L0_OMP
-        INTEGER :: L_VIRT_L0_OMP                                    
-        INTEGER :: LL0_OMP_MAPPING,pad15
+        INTEGER(4) :: LPOOL_AFTER_L0_OMP, LPOOL_BEFORE_L0_OMP
+        INTEGER(4) :: L_PHYS_L0_OMP
+        INTEGER(4) :: L_VIRT_L0_OMP                                    
+        INTEGER(4) :: LL0_OMP_MAPPING,pad15
         INTEGER(8) :: THREAD_LA
 ! Pool before L0_OMP
-        INTEGER, DIMENSION(:), POINTER :: IPOOL_BEFORE_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: IPOOL_BEFORE_L0_OMP
 ! Pool after L0_OMP
-        INTEGER, DIMENSION(:), POINTER :: IPOOL_AFTER_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: IPOOL_AFTER_L0_OMP
 ! Subtrees
-        INTEGER, DIMENSION(:), POINTER :: PHYS_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: PHYS_L0_OMP
 ! Amalgamated subtrees
-        INTEGER, DIMENSION(:), POINTER :: VIRT_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: VIRT_L0_OMP
 ! From heaviest to lowest subtree
-        INTEGER, DIMENSION(:), POINTER :: PERM_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: PERM_L0_OMP
 ! To get leafs in global pool
-        INTEGER, DIMENSION(:), POINTER :: PTR_LEAFS_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: PTR_LEAFS_L0_OMP
 ! Mapping of the subtrees
-        INTEGER, DIMENSION(:), POINTER :: L0_OMP_MAPPING
+        INTEGER(4), DIMENSION(:), POINTER :: L0_OMP_MAPPING
 ! for RR on root
-        REAL, DIMENSION(:), POINTER :: SINGULAR_VALUES
-        INTEGER ::  NB_SINGULAR_VALUES
+        REAL(4), DIMENSION(:), POINTER :: SINGULAR_VALUES
+        INTEGER(4) ::  NB_SINGULAR_VALUES
 ! To know if OOC files are associated to a saved and so if they should be removed.
-        LOGICAL :: ASSOCIATED_OOC_FILES
+        LOGICAL(4) :: ASSOCIATED_OOC_FILES
       END TYPE SMUMPS_STRUC
diff -ruN MUMPS_5.1.2/include/zmumps_root.h mumps-5.1.2-aster7/include/zmumps_root.h
--- MUMPS_5.1.2/include/zmumps_root.h	2017-10-02 09:37:22.000000000 +0200
+++ mumps-5.1.2-aster7/include/zmumps_root.h	2020-10-23 11:16:48.000000000 +0200
@@ -12,17 +12,17 @@
 !
       TYPE ZMUMPS_ROOT_STRUC
         SEQUENCE
-        INTEGER :: MBLOCK, NBLOCK, NPROW, NPCOL
-        INTEGER :: MYROW, MYCOL
-        INTEGER :: SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
-        INTEGER :: RHS_NLOC
-        INTEGER :: ROOT_SIZE, TOT_ROOT_SIZE
+        INTEGER(4) :: MBLOCK, NBLOCK, NPROW, NPCOL
+        INTEGER(4) :: MYROW, MYCOL
+        INTEGER(4) :: SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
+        INTEGER(4) :: RHS_NLOC
+        INTEGER(4) :: ROOT_SIZE, TOT_ROOT_SIZE
 !       descriptor for scalapack
-        INTEGER, DIMENSION( 9 ) :: DESCRIPTOR
-        INTEGER :: CNTXT_BLACS, LPIV, rootpad0
-        INTEGER, DIMENSION(:), POINTER :: RG2L_ROW
-        INTEGER, DIMENSION(:), POINTER :: RG2L_COL
-        INTEGER , DIMENSION(:), POINTER :: IPIV, rootpad1
+        INTEGER(4), DIMENSION( 9 ) :: DESCRIPTOR
+        INTEGER(4) :: CNTXT_BLACS, LPIV, rootpad0
+        INTEGER(4), DIMENSION(:), POINTER :: RG2L_ROW
+        INTEGER(4), DIMENSION(:), POINTER :: RG2L_COL
+        INTEGER(4) , DIMENSION(:), POINTER :: IPIV, rootpad1
 !       Centralized master of root
         COMPLEX(kind=8), DIMENSION(:), POINTER :: RHS_CNTR_MASTER_ROOT
 !       Used to access Schur easily from root structure
@@ -35,11 +35,11 @@
         COMPLEX(kind=8), DIMENSION(:,:), POINTER :: RHS_ROOT, rootpad
 !       for try_nullspace preprocessing constant only:
         DOUBLE PRECISION :: QR_RCOND, rootpad3
-        LOGICAL :: yes, gridinit_done
+        LOGICAL(4) :: yes, gridinit_done
 !       for SVD on root (#define try_null_space)
         COMPLEX(kind=8), DIMENSION(:,:), POINTER :: SVD_U, SVD_VT
 !       for RR on root (#define try_null_space)
         DOUBLE PRECISION, DIMENSION(:), POINTER :: SINGULAR_VALUES
-        INTEGER :: NB_SINGULAR_VALUES,rootpad4
+        INTEGER(4) :: NB_SINGULAR_VALUES,rootpad4
 !
       END TYPE ZMUMPS_ROOT_STRUC
diff -ruN MUMPS_5.1.2/include/zmumps_struc.h mumps-5.1.2-aster7/include/zmumps_struc.h
--- MUMPS_5.1.2/include/zmumps_struc.h	2017-10-02 09:37:22.000000000 +0200
+++ mumps-5.1.2-aster7/include/zmumps_struc.h	2020-10-23 11:16:48.000000000 +0200
@@ -14,7 +14,7 @@
       TYPE ZMUMPS_STRUC
         SEQUENCE
 !
-! This structure contains all parameters 
+! This structure contains all parameters
 ! for the interface to the user, plus internal
 ! information from the solver
 !
@@ -24,56 +24,56 @@
 !    -----------------
 !    MPI Communicator
 !    -----------------
-        INTEGER :: COMM
+        INTEGER(4) :: COMM
 !    ------------------
 !    Problem definition
 !    ------------------
-!    Solver (SYM=0 unsymmetric,SYM=1 symmetric Positive Definite, 
+!    Solver (SYM=0 unsymmetric,SYM=1 symmetric Positive Definite,
 !        SYM=2 general symmetric)
 !    Type of parallelism (PAR=1 host working, PAR=0 host not working)
-        INTEGER ::  SYM, PAR
-        INTEGER ::  JOB 
+        INTEGER(4) ::  SYM, PAR
+        INTEGER(4) ::  JOB
 !    --------------------
-!    Order of Input matrix 
+!    Order of Input matrix
 !    --------------------
-        INTEGER ::  N
+        INTEGER(4) ::  N
 !
 !    ----------------------------------------
 !    Assembled input matrix : User interface
 !    ----------------------------------------
-        INTEGER    :: NZ  ! Standard integer input + bwd. compat.
+        INTEGER(4) :: NZ  ! Standard integer input + bwd. compat.
         INTEGER(8) :: NNZ ! 64-bit integer input
         COMPLEX(kind=8), DIMENSION(:), POINTER :: A
-        INTEGER, DIMENSION(:), POINTER :: IRN, JCN
+        INTEGER(4), DIMENSION(:), POINTER :: IRN, JCN
         DOUBLE PRECISION, DIMENSION(:), POINTER :: COLSCA, ROWSCA, pad0
 !
 !       ------------------------------------
 !       Case of distributed assembled matrix
 !       matrix on entry:
 !       ------------------------------------
-        INTEGER    :: NZ_loc  ! Standard integer input + bwd. compat.
-        INTEGER    :: pad1
+        INTEGER(4) :: NZ_loc  ! Standard integer input + bwd. compat.
+        INTEGER(4) :: pad1
         INTEGER(8) :: NNZ_loc ! 64-bit integer input
-        INTEGER, DIMENSION(:), POINTER :: IRN_loc, JCN_loc
+        INTEGER(4), DIMENSION(:), POINTER :: IRN_loc, JCN_loc
         COMPLEX(kind=8), DIMENSION(:), POINTER :: A_loc, pad2
 !
 !    ----------------------------------------
 !    Unassembled input matrix: User interface
 !    ----------------------------------------
-        INTEGER :: NELT, pad3
-        INTEGER, DIMENSION(:), POINTER :: ELTPTR
-        INTEGER, DIMENSION(:), POINTER :: ELTVAR
+        INTEGER(4) :: NELT, pad3
+        INTEGER(4), DIMENSION(:), POINTER :: ELTPTR
+        INTEGER(4), DIMENSION(:), POINTER :: ELTVAR
         COMPLEX(kind=8), DIMENSION(:), POINTER :: A_ELT, pad4
 !
 !    ---------------------------------------------
-!    Symmetric permutation : 
+!    Symmetric permutation :
 !               PERM_IN if given by user (optional)
 !    ---------------------------------------------
-        INTEGER, DIMENSION(:), POINTER :: PERM_IN
+        INTEGER(4), DIMENSION(:), POINTER :: PERM_IN
 !
 !
 ! ******************
-! INPUT/OUTPUT data 
+! INPUT/OUTPUT data
 ! ******************
 !    --------------------------------------------------------
 !    RHS / SOL_loc
@@ -83,43 +83,43 @@
         COMPLEX(kind=8), DIMENSION(:), POINTER :: RHS, REDRHS
         COMPLEX(kind=8), DIMENSION(:), POINTER :: RHS_SPARSE
         COMPLEX(kind=8), DIMENSION(:), POINTER :: SOL_loc
-        INTEGER, DIMENSION(:), POINTER :: IRHS_SPARSE
-        INTEGER, DIMENSION(:), POINTER :: IRHS_PTR
-        INTEGER, DIMENSION(:), POINTER :: ISOL_loc
-        INTEGER ::  LRHS, NRHS, NZ_RHS, LSOL_loc, LREDRHS
-        INTEGER ::  pad5
+        INTEGER(4), DIMENSION(:), POINTER :: IRHS_SPARSE
+        INTEGER(4), DIMENSION(:), POINTER :: IRHS_PTR
+        INTEGER(4), DIMENSION(:), POINTER :: ISOL_loc
+        INTEGER(4) ::  LRHS, NRHS, NZ_RHS, LSOL_loc, LREDRHS
+        INTEGER(4) ::  pad5
 !    ----------------------------
 !    Control parameters,
 !    statistics and output data
 !    ---------------------------
-        INTEGER ::  ICNTL(40)
-        INTEGER ::  INFO(40) 
-        INTEGER :: INFOG(40)
+        INTEGER(4) ::  ICNTL(40)
+        INTEGER(4) ::  INFO(40)
+        INTEGER(4) :: INFOG(40)
         DOUBLE PRECISION ::  COST_SUBTREES
         DOUBLE PRECISION ::  CNTL(15)
         DOUBLE PRECISION ::  RINFO(40)
         DOUBLE PRECISION ::  RINFOG(40)
 !    ---------------------------------------------------------
 !    Permutations computed during analysis:
-!       SYM_PERM: Symmetric permutation 
+!       SYM_PERM: Symmetric permutation
 !       UNS_PERM: Column permutation (optional)
 !    ---------------------------------------------------------
-        INTEGER, DIMENSION(:), POINTER :: SYM_PERM, UNS_PERM
-! 
+        INTEGER(4), DIMENSION(:), POINTER :: SYM_PERM, UNS_PERM
+!
 !    -----
 !    Schur
 !    -----
-        INTEGER ::  NPROW, NPCOL, MBLOCK, NBLOCK
-        INTEGER ::  SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
-        INTEGER ::  SIZE_SCHUR
+        INTEGER(4) ::  NPROW, NPCOL, MBLOCK, NBLOCK
+        INTEGER(4) ::  SCHUR_MLOC, SCHUR_NLOC, SCHUR_LLD
+        INTEGER(4) ::  SIZE_SCHUR
         COMPLEX(kind=8), DIMENSION(:), POINTER :: SCHUR
         COMPLEX(kind=8), DIMENSION(:), POINTER :: SCHUR_CINTERFACE
-        INTEGER, DIMENSION(:), POINTER :: LISTVAR_SCHUR
+        INTEGER(4), DIMENSION(:), POINTER :: LISTVAR_SCHUR
 !    -------------------------------------
 !    Case of distributed matrix on entry:
 !    ZMUMPS potentially provides mapping
 !    -------------------------------------
-        INTEGER, DIMENSION(:), POINTER :: MAPPING
+        INTEGER(4), DIMENSION(:), POINTER :: MAPPING
 !    --------------
 !    Version number
 !    --------------
@@ -145,133 +145,133 @@
 ! INTERNAL Working data
 ! *********************
         INTEGER(8) :: KEEP8(150), MAX_SURF_MASTER
-        INTEGER ::  INST_Number
+        INTEGER(4) ::  INST_Number
 !       For MPI
-        INTEGER ::  COMM_NODES, MYID_NODES, COMM_LOAD
-        INTEGER ::   MYID, NPROCS, NSLAVES
-        INTEGER ::  ASS_IRECV
-        INTEGER ::  LBUFR
-        INTEGER ::  LBUFR_BYTES
-        INTEGER, DIMENSION(:), POINTER ::  BUFR
+        INTEGER(4) ::  COMM_NODES, MYID_NODES, COMM_LOAD
+        INTEGER(4) ::   MYID, NPROCS, NSLAVES
+        INTEGER(4) ::  ASS_IRECV
+        INTEGER(4) ::  LBUFR
+        INTEGER(4) ::  LBUFR_BYTES
+        INTEGER(4), DIMENSION(:), POINTER ::  BUFR
 !       IS is used for the factors + workspace for contrib. blocks
-        INTEGER, DIMENSION(:), POINTER :: IS
-!       IS1 (maxis1) contains working arrays computed 
+        INTEGER(4), DIMENSION(:), POINTER :: IS
+!       IS1 (maxis1) contains working arrays computed
 !       and used only during analysis
-        INTEGER, DIMENSION(:), POINTER :: IS1
+        INTEGER(4), DIMENSION(:), POINTER :: IS1
 !       For analysis/facto/solve phases
-        INTEGER ::  MAXIS1, Deficiency
-        INTEGER ::  KEEP(500)
+        INTEGER(4) ::  MAXIS1, Deficiency
+        INTEGER(4) ::  KEEP(500)
 !       The following data/arrays are computed during the analysis
 !       phase and used during the factorization and solve phases.
-        INTEGER ::  LNA
-        INTEGER ::  NBSA
-        INTEGER,POINTER,DIMENSION(:) :: STEP, NE_STEPS, ND_STEPS
-!  Info for pruning tree 
-        INTEGER,POINTER,DIMENSION(:) :: Step2node
+        INTEGER(4) ::  LNA
+        INTEGER(4) ::  NBSA
+        INTEGER(4),POINTER,DIMENSION(:) :: STEP, NE_STEPS, ND_STEPS
+!  Info for pruning tree
+        INTEGER(4),POINTER,DIMENSION(:) :: Step2node
 !  ---------------------
-        INTEGER,POINTER,DIMENSION(:) :: FRERE_STEPS, DAD_STEPS
-        INTEGER,POINTER,DIMENSION(:) :: FILS, FRTPTR, FRTELT
+        INTEGER(4),POINTER,DIMENSION(:) :: FRERE_STEPS, DAD_STEPS
+        INTEGER(4),POINTER,DIMENSION(:) :: FILS, FRTPTR, FRTELT
         INTEGER(8),POINTER,DIMENSION(:) :: PTRAR
-        INTEGER,POINTER,DIMENSION(:) :: NA, PROCNODE_STEPS
+        INTEGER(4),POINTER,DIMENSION(:) :: NA, PROCNODE_STEPS
 !       The two pointer arrays computed in facto and used by the solve
-!          (except the factors) are PTLUST_S and PTRFAC. 
-        INTEGER, DIMENSION(:), POINTER :: PTLUST_S
+!          (except the factors) are PTLUST_S and PTRFAC.
+        INTEGER(4), DIMENSION(:), POINTER :: PTLUST_S
         INTEGER(8), DIMENSION(:), POINTER :: PTRFAC
 !       main real working arrays for factorization/solve phases
         COMPLEX(kind=8), DIMENSION(:), POINTER :: S
 !       Information on mapping
-        INTEGER, DIMENSION(:), POINTER :: PROCNODE
-!       Input matrix ready for numerical assembly 
+        INTEGER(4), DIMENSION(:), POINTER :: PROCNODE
+!       Input matrix ready for numerical assembly
 !           -arrowhead format in case of assembled matrix
 !           -element format otherwise
-        INTEGER, DIMENSION(:), POINTER :: INTARR
+        INTEGER(4), DIMENSION(:), POINTER :: INTARR
         COMPLEX(kind=8), DIMENSION(:), POINTER :: DBLARR
 !       Element entry: internal data
-        INTEGER :: NELT_loc, LELTVAR
-        INTEGER, DIMENSION(:), POINTER :: ELTPROC
+        INTEGER(4) :: NELT_loc, LELTVAR
+        INTEGER(4), DIMENSION(:), POINTER :: ELTPROC
 !       Candidates and node partitionning
-        INTEGER, DIMENSION(:,:), POINTER :: CANDIDATES
-        INTEGER, DIMENSION(:),   POINTER :: ISTEP_TO_INIV2
-        INTEGER, DIMENSION(:),   POINTER :: FUTURE_NIV2
-        INTEGER, DIMENSION(:,:), POINTER :: TAB_POS_IN_PERE 
-        LOGICAL, DIMENSION(:),   POINTER :: I_AM_CAND
+        INTEGER(4), DIMENSION(:,:), POINTER :: CANDIDATES
+        INTEGER(4), DIMENSION(:),   POINTER :: ISTEP_TO_INIV2
+        INTEGER(4), DIMENSION(:),   POINTER :: FUTURE_NIV2
+        INTEGER(4), DIMENSION(:,:), POINTER :: TAB_POS_IN_PERE
+        LOGICAL(4), DIMENSION(:),   POINTER :: I_AM_CAND
 !       For heterogeneous architecture
-        INTEGER, DIMENSION(:), POINTER :: MEM_DIST
+        INTEGER(4), DIMENSION(:), POINTER :: MEM_DIST
 !       Compressed RHS
-        INTEGER, DIMENSION(:),   POINTER :: POSINRHSCOMP_ROW
-        LOGICAL  :: POSINRHSCOMP_COL_ALLOC, pad11
-        INTEGER, DIMENSION(:),   POINTER :: POSINRHSCOMP_COL
+        INTEGER(4), DIMENSION(:),   POINTER :: POSINRHSCOMP_ROW
+        LOGICAL(4)  :: POSINRHSCOMP_COL_ALLOC, pad11
+        INTEGER(4), DIMENSION(:),   POINTER :: POSINRHSCOMP_COL
         COMPLEX(kind=8), DIMENSION(:),   POINTER :: RHSCOMP
 !       Info on the subtrees to be used during factorization
         DOUBLE PRECISION, DIMENSION(:), POINTER :: MEM_SUBTREE
         DOUBLE PRECISION, DIMENSION(:), POINTER :: COST_TRAV
-        INTEGER, DIMENSION(:),   POINTER :: MY_ROOT_SBTR
-        INTEGER, DIMENSION(:),   POINTER :: MY_FIRST_LEAF
-        INTEGER, DIMENSION(:),   POINTER :: MY_NB_LEAF
-        INTEGER, DIMENSION(:),   POINTER :: DEPTH_FIRST
-        INTEGER, DIMENSION(:),   POINTER :: DEPTH_FIRST_SEQ
-        INTEGER, DIMENSION(:),   POINTER :: SBTR_ID
-        INTEGER, DIMENSION(:),   POINTER :: SCHED_DEP
-        INTEGER, DIMENSION(:),   POINTER :: SCHED_GRP
-        INTEGER, DIMENSION(:),   POINTER :: SCHED_SBTR
-        INTEGER, DIMENSION(:),   POINTER :: CROIX_MANU
+        INTEGER(4), DIMENSION(:),   POINTER :: MY_ROOT_SBTR
+        INTEGER(4), DIMENSION(:),   POINTER :: MY_FIRST_LEAF
+        INTEGER(4), DIMENSION(:),   POINTER :: MY_NB_LEAF
+        INTEGER(4), DIMENSION(:),   POINTER :: DEPTH_FIRST
+        INTEGER(4), DIMENSION(:),   POINTER :: DEPTH_FIRST_SEQ
+        INTEGER(4), DIMENSION(:),   POINTER :: SBTR_ID
+        INTEGER(4), DIMENSION(:),   POINTER :: SCHED_DEP
+        INTEGER(4), DIMENSION(:),   POINTER :: SCHED_GRP
+        INTEGER(4), DIMENSION(:),   POINTER :: SCHED_SBTR
+        INTEGER(4), DIMENSION(:),   POINTER :: CROIX_MANU
         COMPLEX(kind=8), DIMENSION(:), POINTER :: WK_USER
-        INTEGER :: NBSA_LOCAL
-        INTEGER :: LWK_USER
+        INTEGER(4) :: NBSA_LOCAL
+        INTEGER(4) :: LWK_USER
 !    Internal control array
         DOUBLE PRECISION ::  DKEEP(230)
 !    For simulating parallel out-of-core stack.
         DOUBLE PRECISION, DIMENSION(:),POINTER :: CB_SON_SIZE
 !    Instance number used/managed by the C/F77 interface
-        INTEGER ::  INSTANCE_NUMBER
+        INTEGER(4) ::  INSTANCE_NUMBER
 !    OOC management data that must persist from factorization to solve.
-        INTEGER ::  OOC_MAX_NB_NODES_FOR_ZONE
-        INTEGER, DIMENSION(:,:),   POINTER :: OOC_INODE_SEQUENCE
+        INTEGER(4) ::  OOC_MAX_NB_NODES_FOR_ZONE
+        INTEGER(4), DIMENSION(:,:),   POINTER :: OOC_INODE_SEQUENCE
         INTEGER(8),DIMENSION(:,:), POINTER :: OOC_SIZE_OF_BLOCK
         INTEGER(8), DIMENSION(:,:),   POINTER :: OOC_VADDR
-        INTEGER,DIMENSION(:), POINTER :: OOC_TOTAL_NB_NODES
-        INTEGER,DIMENSION(:), POINTER :: OOC_NB_FILES
-        INTEGER :: OOC_NB_FILE_TYPE,pad12
-        INTEGER,DIMENSION(:), POINTER :: OOC_FILE_NAME_LENGTH
+        INTEGER(4),DIMENSION(:), POINTER :: OOC_TOTAL_NB_NODES
+        INTEGER(4),DIMENSION(:), POINTER :: OOC_NB_FILES
+        INTEGER(4) :: OOC_NB_FILE_TYPE,pad12
+        INTEGER(4),DIMENSION(:), POINTER :: OOC_FILE_NAME_LENGTH
         CHARACTER,DIMENSION(:,:), POINTER :: OOC_FILE_NAMES  
 !    Indices of nul pivots
-        INTEGER,DIMENSION(:), POINTER :: PIVNUL_LIST
-!    Array needed to manage additionnal candidate processor 
-        INTEGER, DIMENSION(:,:), POINTER :: SUP_PROC, pad14
+        INTEGER(4),DIMENSION(:), POINTER :: PIVNUL_LIST
+!    Array needed to manage additionnal candidate processor
+        INTEGER(4), DIMENSION(:,:), POINTER :: SUP_PROC, pad14
 !    Lists of nodes where processors work. Built/used in solve phase.
-        INTEGER, DIMENSION(:), POINTER :: IPTR_WORKING, WORKING
+        INTEGER(4), DIMENSION(:), POINTER :: IPTR_WORKING, WORKING
 !    Root structure(internal)
         TYPE (ZMUMPS_ROOT_STRUC) :: root
 !    Low-rank
-        INTEGER, POINTER, DIMENSION(:) :: LRGROUPS
-        INTEGER :: NBGRP,pad13
+        INTEGER(4), POINTER, DIMENSION(:) :: LRGROUPS
+        INTEGER(4) :: NBGRP,pad13
 !    Pointer encoding for FDM_F data
         CHARACTER(LEN=1), DIMENSION(:), POINTER :: FDM_F_ENCODING
 !    Pointer array encoding BLR factors pointers
         CHARACTER(LEN=1), DIMENSION(:), POINTER :: BLRARRAY_ENCODING
 !    Multicore
-        INTEGER :: LPOOL_AFTER_L0_OMP, LPOOL_BEFORE_L0_OMP
-        INTEGER :: L_PHYS_L0_OMP
-        INTEGER :: L_VIRT_L0_OMP                                    
-        INTEGER :: LL0_OMP_MAPPING,pad15
+        INTEGER(4) :: LPOOL_AFTER_L0_OMP, LPOOL_BEFORE_L0_OMP
+        INTEGER(4) :: L_PHYS_L0_OMP
+        INTEGER(4) :: L_VIRT_L0_OMP                                    
+        INTEGER(4) :: LL0_OMP_MAPPING,pad15
         INTEGER(8) :: THREAD_LA
 ! Pool before L0_OMP
-        INTEGER, DIMENSION(:), POINTER :: IPOOL_BEFORE_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: IPOOL_BEFORE_L0_OMP
 ! Pool after L0_OMP
-        INTEGER, DIMENSION(:), POINTER :: IPOOL_AFTER_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: IPOOL_AFTER_L0_OMP
 ! Subtrees
-        INTEGER, DIMENSION(:), POINTER :: PHYS_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: PHYS_L0_OMP
 ! Amalgamated subtrees
-        INTEGER, DIMENSION(:), POINTER :: VIRT_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: VIRT_L0_OMP
 ! From heaviest to lowest subtree
-        INTEGER, DIMENSION(:), POINTER :: PERM_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: PERM_L0_OMP
 ! To get leafs in global pool
-        INTEGER, DIMENSION(:), POINTER :: PTR_LEAFS_L0_OMP
+        INTEGER(4), DIMENSION(:), POINTER :: PTR_LEAFS_L0_OMP
 ! Mapping of the subtrees
-        INTEGER, DIMENSION(:), POINTER :: L0_OMP_MAPPING
+        INTEGER(4), DIMENSION(:), POINTER :: L0_OMP_MAPPING
 ! for RR on root
         DOUBLE PRECISION, DIMENSION(:), POINTER :: SINGULAR_VALUES
-        INTEGER ::  NB_SINGULAR_VALUES
+        INTEGER(4) ::  NB_SINGULAR_VALUES
 ! To know if OOC files are associated to a saved and so if they should be removed.
-        LOGICAL :: ASSOCIATED_OOC_FILES
+        LOGICAL(4) :: ASSOCIATED_OOC_FILES
       END TYPE ZMUMPS_STRUC
diff -ruN MUMPS_5.1.2/lib/.place_holder mumps-5.1.2-aster7/lib/.place_holder
--- MUMPS_5.1.2/lib/.place_holder	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/lib/.place_holder	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1 @@
+place holder
diff -ruN MUMPS_5.1.2/libseq/mpif.h mumps-5.1.2-aster7/libseq/mpif.h
--- MUMPS_5.1.2/libseq/mpif.h	2017-10-02 09:37:04.000000000 +0200
+++ mumps-5.1.2-aster7/libseq/mpif.h	2020-10-23 11:16:48.000000000 +0200
@@ -13,41 +13,41 @@
 !
 !      Dummy mpif.h file including symbols used by MUMPS.
 !
-      INTEGER MPI_2DOUBLE_PRECISION
-      INTEGER MPI_2INTEGER
-      INTEGER MPI_2REAL
-      INTEGER MPI_ANY_SOURCE
-      INTEGER MPI_ANY_TAG
-      INTEGER MPI_BYTE
-      INTEGER MPI_CHARACTER
-      INTEGER MPI_COMM_NULL
-      INTEGER MPI_COMM_WORLD
-      INTEGER MPI_COMPLEX
-      INTEGER MPI_DOUBLE_COMPLEX
-      INTEGER MPI_DOUBLE_PRECISION
-      INTEGER MPI_INTEGER
-      INTEGER MPI_LOGICAL
-      INTEGER MPI_MAX
-      INTEGER MPI_MAX_PROCESSOR_NAME
-      INTEGER MPI_MAXLOC
-      INTEGER MPI_MIN
-      INTEGER MPI_MINLOC
-      INTEGER MPI_PACKED
-      INTEGER MPI_PROD
-      INTEGER MPI_REAL
-      INTEGER MPI_REPLACE
-      INTEGER MPI_REQUEST_NULL
-      INTEGER MPI_SOURCE
-      INTEGER MPI_STATUS_SIZE
-      INTEGER MPI_SUM
-      INTEGER MPI_TAG
-      INTEGER MPI_UNDEFINED
-      INTEGER MPI_WTIME_IS_GLOBAL
-      INTEGER MPI_LOR
-      INTEGER MPI_LAND
-      INTEGER MPI_INTEGER8
-      INTEGER MPI_REAL8
-      INTEGER MPI_BSEND_OVERHEAD
+      INTEGER(4) MPI_2DOUBLE_PRECISION
+      INTEGER(4) MPI_2INTEGER
+      INTEGER(4) MPI_2REAL
+      INTEGER(4) MPI_ANY_SOURCE
+      INTEGER(4) MPI_ANY_TAG
+      INTEGER(4) MPI_BYTE
+      INTEGER(4) MPI_CHARACTER
+      INTEGER(4) MPI_COMM_NULL
+      INTEGER(4) MPI_COMM_WORLD
+      INTEGER(4) MPI_COMPLEX
+      INTEGER(4) MPI_DOUBLE_COMPLEX
+      INTEGER(4) MPI_DOUBLE_PRECISION
+      INTEGER(4) MPI_INTEGER
+      INTEGER(4) MPI_LOGICAL
+      INTEGER(4) MPI_MAX
+      INTEGER(4) MPI_MAX_PROCESSOR_NAME
+      INTEGER(4) MPI_MAXLOC
+      INTEGER(4) MPI_MIN
+      INTEGER(4) MPI_MINLOC
+      INTEGER(4) MPI_PACKED
+      INTEGER(4) MPI_PROD
+      INTEGER(4) MPI_REAL
+      INTEGER(4) MPI_REPLACE
+      INTEGER(4) MPI_REQUEST_NULL
+      INTEGER(4) MPI_SOURCE
+      INTEGER(4) MPI_STATUS_SIZE
+      INTEGER(4) MPI_SUM
+      INTEGER(4) MPI_TAG
+      INTEGER(4) MPI_UNDEFINED
+      INTEGER(4) MPI_WTIME_IS_GLOBAL
+      INTEGER(4) MPI_LOR
+      INTEGER(4) MPI_LAND
+      INTEGER(4) MPI_INTEGER8
+      INTEGER(4) MPI_REAL8
+      INTEGER(4) MPI_BSEND_OVERHEAD
       PARAMETER (MPI_2DOUBLE_PRECISION=1)
       PARAMETER (MPI_2INTEGER=2)
       PARAMETER (MPI_2REAL=3)
diff -ruN MUMPS_5.1.2/Makefile.inc.in mumps-5.1.2-aster7/Makefile.inc.in
--- MUMPS_5.1.2/Makefile.inc.in	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/Makefile.inc.in	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,95 @@
+#
+# This file is part of MUMPS 5.0.1, changed to be configured by waf scripts
+# provided by the Code_Aster team.
+#
+#Begin orderings
+
+# NOTE that PORD is distributed within MUMPS by default. If you would like to
+# use other orderings, you need to obtain the corresponding package and modify
+# the variables below accordingly.
+# For example, to have Metis available within MUMPS:
+#          1/ download Metis and compile it
+#          2/ uncomment (suppress # in first column) lines
+#             starting with LMETISDIR,  LMETIS
+#          3/ add -Dmetis in line ORDERINGSF
+#             ORDERINGSF  = -Dpord -Dmetis
+#          4/ Compile and install MUMPS
+#             make clean; make   (to clean up previous installation)
+#
+#          Metis/ParMetis and SCOTCH/PT-SCOTCH (ver 5.1 and later) orderings are now available for MUMPS.
+#
+
+ISCOTCH    = ?INCLUDES?
+# You have to choose one among the following two lines depending on
+# the type of analysis you want to perform. If you want to perform only
+# sequential analysis choose the first (remember to add -Dscotch in the ORDERINGSF
+# variable below); for both parallel and sequential analysis choose the second 
+# line (remember to add -Dptscotch in the ORDERINGSF variable below)
+
+LSCOTCH    = ?LIBPATH? ?LIB_SCOTCH? ?STLIB_SCOTCH?
+#LSCOTCH    = -L$(SCOTCHDIR)/lib -lptesmumps -lptscotch -lptscotcherr
+
+
+LPORDDIR = $(topdir)/PORD/lib/
+IPORD    = -I$(topdir)/PORD/include/
+LPORD    = -L$(LPORDDIR) -lpord
+
+#IMETIS    = # Metis doesn't need include files (Fortran interface avail.)
+# You have to choose one among the following two lines depending on
+# the type of analysis you want to perform. If you want to perform only
+# sequential analysis choose the first (remember to add -Dmetis in the ORDERINGSF
+# variable below); for both parallel and sequential analysis choose the second 
+# line (remember to add -Dparmetis in the ORDERINGSF variable below)
+
+LMETIS    = ?LIBPATH? ?LIB_PARMETIS? ?STLIB_PARMETIS? ?LIB_METIS? ?STLIB_METIS? 
+#LMETIS    = -L$(LMETISDIR) -lparmetis -lmetis
+
+# The following variables will be used in the compilation process.
+# Please note that -Dptscotch and -Dparmetis imply -Dscotch and -Dmetis respectively.
+#ORDERINGSF = -Dscotch -Dmetis -Dpord -Dptscotch -Dparmetis
+ORDERINGSF  = ?ORDERINGS?
+ORDERINGSC  = $(ORDERINGSF)
+
+LORDERINGS = $(LMETIS) $(LPORD) $(LSCOTCH)
+IORDERINGSF = $(ISCOTCH)
+IORDERINGSC = $(IMETIS) $(IPORD) $(ISCOTCH)
+
+#End orderings
+########################################################################
+################################################################################
+
+PLAT    =
+LIBEXT  = .a
+OUTC    = -o 
+OUTF    = -o 
+RM      = /bin/rm -f
+CC      = ?CC?
+FC      = ?FC?
+FL      = ?LINK_FC?
+# WARNING: AR must ends with a blank space!
+AR      = ?AR? ?ARFLAGS? 
+#
+RANLIB  = echo
+
+#
+INCPAR = ?INCLUDES?
+LIBPAR = ?LIB_SCALAPACK?
+#
+INCSEQ = -I$(topdir)/libseq
+LIBSEQ = -L$(topdir)/libseq -lmpiseq
+
+#
+LIBBLAS = ?LIBPATH? ?LIB_MATH? ?STLIB_MATH?
+LIBOTHERS =  ?LIBPATH? ?LIB_SYS? ?STLIB_SYS? ?OPTLIB_FLAGS? ?OPTLIB_FLAGS_MATH?
+#Preprocessor defs for calling Fortran from C (-DAdd_ or -DAdd__ or -DUPPER)
+CDEFS   = ?DEFINES?
+
+#Begin Optimized options
+OPTF    = -O ?FCFLAGS? ?FCFLAGS_OPENMP?
+OPTL    = -O ?LINKFLAGS? ?LINKFLAGS_OPENMP? ?LINKFLAGS_CLIB?
+OPTC    = -O ?CFLAGS?
+#End Optimized options
+
+INCS = ?INCS?
+LIBS = ?LIBS?
+LIBSEQNEEDED = ?LIBSEQNEEDED?
diff -ruN MUMPS_5.1.2/README mumps-5.1.2-aster7/README
--- MUMPS_5.1.2/README	2017-10-02 09:37:01.000000000 +0200
+++ mumps-5.1.2-aster7/README	1970-01-01 01:00:00.000000000 +0100
@@ -1,61 +0,0 @@
-===========================================
-MUMPS 5.1.2
-===========================================
-
-MUMPS 5.1.2 solves a sparse system of linear equations A x = b
-using Gaussian elimination. Please read this README file and
-the documentation (in ./doc/) for a complete list of
-functionalities. Documentation and publications related
-to MUMPS can also be found at http://mumps-solver.org/
-
-For installation problems, bug reports, and to report your
-experience/feedback with the package, please subscribe to the
-MUMPS Users's mailing list.
-
-Please refer to INSTALL for installation instructions.
-
-
-  Copyright 1991-2017 CERFACS, CNRS, ENS Lyon, INP Toulouse, Inria,
-  University of Bordeaux.
-
-  This version of MUMPS is provided to you free of charge. It is
-  released under the CeCILL-C license:
-  http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html
-
-
-
-Contents of the distribution:
-----------------------------
-
-ChangeLog  LICENSE    CREDITS    INSTALL    README     VERSION
-Makefile   Make.inc/  doc/       src/       lib/       include/
-ibseq/     examples/  PORD/      MATLAB/    SCILAB/
-
-doc      contains the users' guide in pdf format.
-
-src      contains the source files (for all arithmetics 's','d','c' or 'z')
-         necessary to generate the MUMPS library.
-
-lib      is the place where the MUMPS libraries libxmumps.a
-         (x='s','d','c' or 'z') and the arith-independent
-         library libmumps_common.a are generated.
-
-include  contains xmumps_struc.h, xmumps_root.h and xmumps_c.h (where x is one
-         of 'd','c','s','z' depending on the arithmetic desired),
-         mumps_c_types.h and mumps_compat.h. The first two files must be
-         available at compile time in order to use MUMPS from external FORTRAN
-         programs. The three others for C programs.
-
-libseq   contains a sequential MPI library used by the purely sequential
-         version of MUMPS.
-
-examples contains illustrative test programs showing how MUMPS can be used.
-
-PORD     contains the PORD package (not part of MUMPS) from University
-         of Paderborn. See PORD/README for more info.
-
-MATLAB   contains a MATLAB interface to the sequential version of MUMPS
-
-SCILAB   contains a SCILAB interface to the sequential version of MUMPS
-         (only tested with scilab version 4)
-
diff -ruN MUMPS_5.1.2/README.md mumps-5.1.2-aster7/README.md
--- MUMPS_5.1.2/README.md	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/README.md	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,154 @@
+# MUMPS: a MUltifrontal Massively Parallel sparse direct Solver #
+
+http://mumps.enseeiht.fr/index.php?page=home
+
+This repository publishes a branch **for_aster** that differs from **default** (*upstream*) by:
+
+- adding a build system based on `waf` that gives a automatic `waf configure` step,
+
+- changing the fortran include files to force short integers, reals and logicals. This allows to use `-i8` option when building *code_aster*.
+
+
+Download the source files by cloning the repository (don't forget to change to the **for_aster** branch):
+
+```
+mkdir -p $HOME/dev/aster-prerequisites && cd $HOME/dev/aster-prerequisites
+hg clone http://hg.code.sf.net/p/prereq/mumps
+cd mumps
+hg update for_aster
+```
+
+
+## Building Mumps using the waf scripts ##
+
+The [waf][] scripts have been added by the code_aster team to configure the
+`Makefile.inc` of [Mumps][].
+
+The configuration will check for C and Fortran compilers, eventually MPI wrappers if `--enable-mpi` option is provided, mathematical libraries, Metis and Scotch libraries.
+
+
+Type `waf --help` for a full description.
+
+Main options:
+
+* `--prefix=$PREFIX`:
+
+  This is the installation directory where `lib` will be created and the libraries will be copied to.
+
+* `--enable-mpi`:
+
+  This enables build against MPI libraries.
+  MPI wrappers are automatically selected to `mpicc` and `mpif90`.
+  Use `CC` and `FC` to set different values.
+  Blacs and Scalapack are also added into the mathematical libraries dependencies.
+
+* `--install-tests`:
+
+  The small unittests of Mumps are always built in `src/examples`.
+  Using this option, there will be installed in `$PREFIX/share/examples`.
+
+
+### Configuration and installation ###
+
+Libraries are searched in standard paths. Environment variable `LIBPATH` can be used to search in some other directories (space separated). `INCLUDES` environment variable can be used to search includes in other directories than standard ones.
+
+Compilers can be customized throug `CC` and `FC` (or options `--check-c-compiler=` and `--check-fortran-compiler=`).
+
+Mathematical libraries are automatically searched or defined with `--maths-libs=` (space separated).
+
+Typical usage:
+
+```
+#!bash
+
+    CC=... FC=... \
+    LIBPATH="SCOTCHDIR/lib METISDIR/lib" \
+    INCLUDES="SCOTCHDIR/include METISDIR/include" \
+        ./waf configure install [options]
+```
+
+
+### Examples ###
+
+`[options]` is usually `--prefix=$PREFIX --install-tests`.
+
+
+Sequential builds:
+
+- Using gfortran:
+
+```
+#!bash
+
+     LIBPATH="xxx" INCLUDES="xxx" \
+        ./waf configure install [options]
+```
+
+
+- Using Intel compilers:
+
+```
+#!bash
+
+    CC=icc FC=ifort LIBPATH="xxx" INCLUDES="xxx" \
+        ./waf configure install [options]
+```
+
+Parallel builds:
+
+- Using gfortran with OpenMPI:
+
+```
+#!bash
+
+    LIBPATH="xxx" INCLUDES="xxx" \
+        ./waf configure install --enable-mpi [options]
+```
+
+- Using Intel compilers with MPI support::
+
+```
+#!bash
+
+    CC=mpiicc FC=mpiifort LIBPATH="xxx" INCLUDES="xxx" \
+        ./waf configure install --enable-mpi [options]
+```
+
+
+### Troubleshooting ###
+
+Because `waf` does not know elementary targets in the Makefile (and `Makefile.inc` is not a dependency), sometimes you need force to rebuild by:
+
+```
+#!bash
+
+    ./waf clean install
+```
+
+
+See [code_aster][] and [waf][] websites for more informations.
+
+
+### Changes on include files ###
+
+The changes allow to build code_aster with `-i8` option and keep short integers in the Mumps interface using these changed includes.
+
+Declarations are forced to be of size 4 for integers, reals and logicals:
+
+```
+#!bash
+
+    sed -i 's/INTEGER,/INTEGER(4),/g' include/*_{struc,root}.h libseq/mpif.h
+    sed -i 's/INTEGER /INTEGER(4) /g' include/*_{struc,root}.h libseq/mpif.h
+    sed -i 's/REAL,/REAL(4),/g' include/*_{struc,root}.h libseq/mpif.h
+    sed -i 's/REAL /REAL(4) /g' include/*_{struc,root}.h libseq/mpif.h
+    sed -i 's/LOGICAL,/LOGICAL(4),/g' include/*_{struc,root}.h libseq/mpif.h
+    sed -i 's/LOGICAL /LOGICAL(4) /g' include/*_{struc,root}.h libseq/mpif.h
+```
+
+Do not forget to check long lines (< 72 chars).
+
+
+[code_aster]: http://www.code-aster.org
+[Mumps]: http://mumps.enseeiht.fr/index.php?page=home
+[waf]: https://waf.io
diff -ruN MUMPS_5.1.2/README.mumps mumps-5.1.2-aster7/README.mumps
--- MUMPS_5.1.2/README.mumps	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/README.mumps	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,61 @@
+===========================================
+MUMPS 5.1.2
+===========================================
+
+MUMPS 5.1.2 solves a sparse system of linear equations A x = b
+using Gaussian elimination. Please read this README file and
+the documentation (in ./doc/) for a complete list of
+functionalities. Documentation and publications related
+to MUMPS can also be found at http://mumps-solver.org/
+
+For installation problems, bug reports, and to report your
+experience/feedback with the package, please subscribe to the
+MUMPS Users's mailing list.
+
+Please refer to INSTALL for installation instructions.
+
+
+  Copyright 1991-2017 CERFACS, CNRS, ENS Lyon, INP Toulouse, Inria,
+  University of Bordeaux.
+
+  This version of MUMPS is provided to you free of charge. It is
+  released under the CeCILL-C license:
+  http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html
+
+
+
+Contents of the distribution:
+----------------------------
+
+ChangeLog  LICENSE    CREDITS    INSTALL    README     VERSION
+Makefile   Make.inc/  doc/       src/       lib/       include/
+ibseq/     examples/  PORD/      MATLAB/    SCILAB/
+
+doc      contains the users' guide in pdf format.
+
+src      contains the source files (for all arithmetics 's','d','c' or 'z')
+         necessary to generate the MUMPS library.
+
+lib      is the place where the MUMPS libraries libxmumps.a
+         (x='s','d','c' or 'z') and the arith-independent
+         library libmumps_common.a are generated.
+
+include  contains xmumps_struc.h, xmumps_root.h and xmumps_c.h (where x is one
+         of 'd','c','s','z' depending on the arithmetic desired),
+         mumps_c_types.h and mumps_compat.h. The first two files must be
+         available at compile time in order to use MUMPS from external FORTRAN
+         programs. The three others for C programs.
+
+libseq   contains a sequential MPI library used by the purely sequential
+         version of MUMPS.
+
+examples contains illustrative test programs showing how MUMPS can be used.
+
+PORD     contains the PORD package (not part of MUMPS) from University
+         of Paderborn. See PORD/README for more info.
+
+MATLAB   contains a MATLAB interface to the sequential version of MUMPS
+
+SCILAB   contains a SCILAB interface to the sequential version of MUMPS
+         (only tested with scilab version 4)
+
diff -ruN MUMPS_5.1.2/src/cmumps_restart.F mumps-5.1.2-aster7/src/cmumps_restart.F
--- MUMPS_5.1.2/src/cmumps_restart.F	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/src/cmumps_restart.F	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,2648 @@
+C
+C  This file is part of MUMPS 5.0.2, released
+C  on Fri Jul 15 09:12:54 UTC 2016
+C
+C
+C  Copyright 1991-2016 CERFACS, CNRS, ENS Lyon, INP Toulouse, Inria,
+C  University of Bordeaux.
+C
+C  This version of MUMPS is provided to you free of charge. It is
+C  released under the CeCILL-C license:
+C  http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html
+C
+      SUBROUTINE CMUMPS_STOP(id,OUTFILE)
+      USE CMUMPS_STRUC_DEF
+      IMPLICIT NONE
+      INCLUDE 'mpif.h'
+      CHARACTER(len=*), intent(in) :: OUTFILE
+      INTEGER::i1,i2,NBVARIABLES,NBVARIABLES_ROOT
+      INTEGER::OUT,err,OUTROOT
+      CHARACTER(len=100), allocatable, dimension(:)::VARIABLES
+      CHARACTER(len=100), allocatable, dimension(:)::VARIABLES_ROOT
+      CHARACTER(len=100):: OUTFILEMAIN,OUTFILEROOT
+      CHARACTER(len=3) :: STRING_ID
+      LOGICAL :: error
+      INTEGER MASTER
+      PARAMETER( MASTER = 0 )
+      TYPE (CMUMPS_STRUC) :: id
+      id%IF_RESTARTING=.TRUE.
+      NBVARIABLES=171
+      allocate(VARIABLES(NBVARIABLES))
+      VARIABLES(171)="NB_SINGULAR_VALUES"
+      VARIABLES(170)="SINGULAR_VALUES"
+      VARIABLES(169)="IF_RESTARTING"
+      VARIABLES(168)="L0_OMP_MAPPING"
+      VARIABLES(167)="PTR_LEAFS_L0_OMP"
+      VARIABLES(166)="PERM_L0_OMP"
+      VARIABLES(165)="VIRT_L0_OMP"
+      VARIABLES(164)="PHYS_L0_OMP"
+      VARIABLES(163)="IPOOL_AFTER_L0_OMP"
+      VARIABLES(162)="IPOOL_BEFORE_L0_OMP"
+      VARIABLES(161)="THREAD_LA"
+      VARIABLES(160)="LL0_OMP_MAPPING"
+      VARIABLES(159)="L_VIRT_L0_OMP"
+      VARIABLES(158)="L_PHYS_L0_OMP"
+      VARIABLES(157)="LPOOL_BEFORE_L0_OMP"
+      VARIABLES(156)="LPOOL_AFTER_L0_OMP"
+      VARIABLES(155)="NBGRP"
+      VARIABLES(154)="LRGROUPS"
+      VARIABLES(153)="root"
+      VARIABLES(152)="WORKING"
+      VARIABLES(151)="IPTR_WORKING"
+      VARIABLES(150)="pad14"
+      VARIABLES(149)="SUP_PROC"
+      VARIABLES(148)="PIVNUL_LIST"
+      VARIABLES(147)="OOC_FILE_NAME_LENGTH"
+      VARIABLES(146)="OOC_FILE_NAMES"
+      VARIABLES(145)="OOC_NB_FILE_TYPE"
+      VARIABLES(144)="OOC_NB_FILES"
+      VARIABLES(143)="OOC_TOTAL_NB_NODES"
+      VARIABLES(142)="OOC_VADDR"
+      VARIABLES(141)="OOC_SIZE_OF_BLOCK"
+      VARIABLES(140)="pad13"
+      VARIABLES(139)="OOC_INODE_SEQUENCE"
+      VARIABLES(138)="OOC_MAX_NB_NODES_FOR_ZONE"
+      VARIABLES(137)="INSTANCE_NUMBER"
+      VARIABLES(136)="pad12"
+      VARIABLES(135)="CB_SON_SIZE"
+      VARIABLES(134)="DKEEP"
+      VARIABLES(133)="LWK_USER"
+      VARIABLES(132)="NBSA_LOCAL"
+      VARIABLES(131)="WK_USER"
+      VARIABLES(130)="CROIX_MANU"
+      VARIABLES(129)="SCHED_SBTR"
+      VARIABLES(128)="SCHED_GRP"
+      VARIABLES(127)="SCHED_DEP"
+      VARIABLES(126)="SBTR_ID"
+      VARIABLES(125)="DEPTH_FIRST_SEQ"
+      VARIABLES(124)="DEPTH_FIRST"
+      VARIABLES(123)="MY_NB_LEAF"
+      VARIABLES(122)="MY_FIRST_LEAF"
+      VARIABLES(121)="MY_ROOT_SBTR"
+      VARIABLES(120)="COST_TRAV"
+      VARIABLES(119)="MEM_SUBTREE"
+      VARIABLES(118)="RHSCOMP"
+      VARIABLES(117)="POSINRHSCOMP_COL"
+      VARIABLES(116)="POSINRHSCOMP_ROW"
+      VARIABLES(115)="POSINRHSCOMP_COL_ALLOC"
+      VARIABLES(114)="MEM_DIST"
+      VARIABLES(113)="I_AM_CAND"
+      VARIABLES(112)="TAB_POS_IN_PERE"
+      VARIABLES(111)="FUTURE_NIV2"
+      VARIABLES(110)="ISTEP_TO_INIV2"
+      VARIABLES(109)="CANDIDATES"
+      VARIABLES(108)="ELTPROC"
+      VARIABLES(107)="pad11"
+      VARIABLES(106)="NA_ELT"
+      VARIABLES(105)="LELTVAR"
+      VARIABLES(104)="NELT_loc"
+      VARIABLES(103)="DBLARR"
+      VARIABLES(102)="INTARR"
+      VARIABLES(101)="PROCNODE"
+      VARIABLES(100)="S"
+      VARIABLES(99)="PTRFAC"
+      VARIABLES(98)="PTLUST_S"
+      VARIABLES(97)="PROCNODE_STEPS"
+      VARIABLES(96)="NA"
+      VARIABLES(95)="FRTELT"
+      VARIABLES(94)="FRTPTR"
+      VARIABLES(93)="PTRAR"
+      VARIABLES(92)="FILS"
+      VARIABLES(91)="DAD_STEPS"
+      VARIABLES(90)="FRERE_STEPS"
+      VARIABLES(89)="Step2node"
+      VARIABLES(88)="ND_STEPS"
+      VARIABLES(87)="NE_STEPS"
+      VARIABLES(86)="STEP"
+      VARIABLES(85)="NBSA"
+      VARIABLES(84)="LNA"
+      VARIABLES(83)="KEEP"
+      VARIABLES(82)="Deficiency"
+      VARIABLES(81)="MAXIS1"
+      VARIABLES(80)="IS1"
+      VARIABLES(79)="IS"
+      VARIABLES(78)="BUFR"
+      VARIABLES(77)="POIDS"
+      VARIABLES(76)="LBUFR_BYTES"
+      VARIABLES(75)="LBUFR"
+      VARIABLES(74)="ASS_IRECV"
+      VARIABLES(73)="NSLAVES"
+      VARIABLES(72)="NPROCS"
+      VARIABLES(71)="MYID"
+      VARIABLES(70)="COMM_LOAD"
+      VARIABLES(69)="MYID_NODES"
+      VARIABLES(68)="COMM_NODES"
+      VARIABLES(67)="INST_Number"
+      VARIABLES(66)="MAX_SURF_MASTER"
+      VARIABLES(65)="KEEP8"
+      VARIABLES(64)="pad8"
+      VARIABLES(63)="WRITE_PROBLEM"
+      VARIABLES(62)="OOC_PREFIX"
+      VARIABLES(61)="OOC_TMPDIR"
+      VARIABLES(60)="VERSION_NUMBER"
+      VARIABLES(59)="MAPPING"
+      VARIABLES(58)="LISTVAR_SCHUR"
+      VARIABLES(57)="SCHUR_CINTERFACE"
+      VARIABLES(56)="SCHUR"
+      VARIABLES(55)="SIZE_SCHUR"
+      VARIABLES(54)="SCHUR_LLD"
+      VARIABLES(53)="SCHUR_NLOC"
+      VARIABLES(52)="SCHUR_MLOC"
+      VARIABLES(51)="NBLOCK"
+      VARIABLES(50)="MBLOCK"
+      VARIABLES(49)="NPCOL"
+      VARIABLES(48)="NPROW"
+      VARIABLES(47)="UNS_PERM"
+      VARIABLES(46)="SYM_PERM"
+      VARIABLES(45)="RINFOG"
+      VARIABLES(44)="RINFO"
+      VARIABLES(43)="CNTL"
+      VARIABLES(42)="COST_SUBTREES"
+      VARIABLES(41)="INFOG"
+      VARIABLES(40)="INFO"
+      VARIABLES(39)="ICNTL"
+      VARIABLES(38)="pad5"
+      VARIABLES(37)="LREDRHS"
+      VARIABLES(36)="LSOL_loc"
+      VARIABLES(35)="NZ_RHS"
+      VARIABLES(34)="NRHS"
+      VARIABLES(33)="LRHS"
+      VARIABLES(32)="ISOL_loc"
+      VARIABLES(31)="IRHS_PTR"
+      VARIABLES(30)="IRHS_SPARSE"
+      VARIABLES(29)="SOL_loc"
+      VARIABLES(28)="RHS_SPARSE"
+      VARIABLES(27)="REDRHS"
+      VARIABLES(26)="RHS"
+      VARIABLES(25)="PERM_IN"
+      VARIABLES(24)="pad4"
+      VARIABLES(23)="A_ELT"
+      VARIABLES(22)="ELTVAR"
+      VARIABLES(21)="ELTPTR"
+      VARIABLES(20)="pad3"
+      VARIABLES(19)="NELT"
+      VARIABLES(18)="pad2"
+      VARIABLES(17)="A_loc"
+      VARIABLES(16)="JCN_loc"
+      VARIABLES(15)="IRN_loc"
+      VARIABLES(14)="pad1"
+      VARIABLES(13)="NZ_loc"
+      VARIABLES(12)="pad0"
+      VARIABLES(11)="ROWSCA"
+      VARIABLES(10)="COLSCA"
+      VARIABLES(9)="JCN"
+      VARIABLES(8)="IRN"
+      VARIABLES(7)="A"
+      VARIABLES(6)="NZ"
+      VARIABLES(5)="N"
+      VARIABLES(4)="JOB"
+      VARIABLES(3)="PAR"
+      VARIABLES(2)="SYM"
+      VARIABLES(1)="COMM"
+      NBVARIABLES_ROOT=34
+      allocate(VARIABLES_ROOT(NBVARIABLES_ROOT))
+      VARIABLES_ROOT(34)="NB_SINGULAR_VALUES"
+      VARIABLES_ROOT(33)="SINGULAR_VALUES"
+      VARIABLES_ROOT(32)="SVD_VT"
+      VARIABLES_ROOT(31)="SVD_U"
+      VARIABLES_ROOT(30)="gridinit_done"
+      VARIABLES_ROOT(29)="yes"
+      VARIABLES_ROOT(28)="rootpad3"
+      VARIABLES_ROOT(27)="QR_RCOND"
+      VARIABLES_ROOT(26)="rootpad"
+      VARIABLES_ROOT(25)="RHS_ROOT"
+      VARIABLES_ROOT(24)="rootpad2"
+      VARIABLES_ROOT(23)="QR_TAU"
+      VARIABLES_ROOT(22)="SCHUR_POINTER"
+      VARIABLES_ROOT(21)="RHS_CNTR_MASTER_ROOT"
+      VARIABLES_ROOT(20)="rootpad1"
+      VARIABLES_ROOT(19)="IPIV"
+      VARIABLES_ROOT(18)="RG2L_COL"
+      VARIABLES_ROOT(17)="RG2L_ROW"
+      VARIABLES_ROOT(16)="rootpad0"
+      VARIABLES_ROOT(15)="LPIV"
+      VARIABLES_ROOT(14)="CNTXT_BLACS"
+      VARIABLES_ROOT(13)="DESCRIPTOR"
+      VARIABLES_ROOT(12)="TOT_ROOT_SIZE"
+      VARIABLES_ROOT(11)="ROOT_SIZE"
+      VARIABLES_ROOT(10)="RHS_NLOC"
+      VARIABLES_ROOT(9)="SCHUR_LLD"
+      VARIABLES_ROOT(8)="SCHUR_NLOC"
+      VARIABLES_ROOT(7)="SCHUR_MLOC"
+      VARIABLES_ROOT(6)="MYCOL"
+      VARIABLES_ROOT(5)="MYROW"
+      VARIABLES_ROOT(4)="NPCOL"
+      VARIABLES_ROOT(3)="NPROW"
+      VARIABLES_ROOT(2)="NBLOCK"
+      VARIABLES_ROOT(1)="MBLOCK"
+      if(((id%ICNTL(3).GT.0).AND.(id%MYID .EQ. MASTER))) then
+         write(*,*) "DUMPING MUMPS STRUCTURE IN FILE:",OUTFILE
+      endif
+      error=.false.
+      write (STRING_ID, '(i3)') id%MYID
+      OUT=42+id%MYID
+      OUTFILEMAIN=trim(adjustl(OUTFILE)) // trim(adjustl(STRING_ID))
+      open(UNIT=OUT,FILE=OUTFILEMAIN,STATUS='replace',
+     &     form='unformatted',iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN CMUMPS_STOP CANNOT OPEN FILE: "
+     &        //trim(adjustl(OUTFILEMAIN))
+         error=.true.
+         goto 100
+      endif      
+      DO i1=1,NBVARIABLES 
+         SELECT CASE(trim(adjustl(VARIABLES(i1))))
+         CASE("COMM") 
+         CASE("SYM")
+         CASE("PAR")
+         CASE("JOB")
+            write(OUT) id%JOB
+         CASE("N")
+            write(OUT) id%N
+         CASE("ICNTL")
+            write(OUT) id%ICNTL
+         CASE("INFO")
+            write(OUT) id%INFO
+         CASE("INFOG")
+            write(OUT) id%INFOG
+         CASE("COST_SUBTREES")
+            write(OUT) id%COST_SUBTREES
+         CASE("CNTL")
+            write(OUT) id%CNTL
+         CASE("RINFO")
+            write(OUT) id%RINFO
+         CASE("RINFOG")
+            write(OUT) id%RINFOG
+         CASE("KEEP8")
+            write(OUT) id%KEEP8
+         CASE("KEEP")
+            write(OUT) id%KEEP
+         CASE("DKEEP")
+            write(OUT) id%DKEEP    
+         CASE("NZ")
+            write(OUT) id%NZ
+         CASE("A")
+            IF(associated(id%A)) THEN
+               write(OUT) size(id%A,1)
+               write(OUT) id%A
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IRN")
+            IF(associated(id%IRN)) THEN
+               write(OUT) size(id%IRN,1)
+               write(OUT) id%IRN
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("JCN")
+            IF(associated(id%JCN)) THEN
+               write(OUT) size(id%JCN,1)
+               write(OUT) id%JCN
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("COLSCA")
+            IF(associated(id%COLSCA)) THEN
+               write(OUT) size(id%COLSCA,1)
+               write(OUT) id%COLSCA
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF 
+         CASE("ROWSCA")
+            IF(associated(id%ROWSCA)) THEN
+               write(OUT) size(id%ROWSCA,1)
+               write(OUT) id%ROWSCA
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NZ_loc")
+            write(OUT) id%NZ_loc
+         CASE("IRN_loc")
+            IF(associated(id%IRN_loc)) THEN
+               write(OUT) size(id%IRN_loc,1)
+               write(OUT) id%IRN_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("JCN_loc")
+            IF(associated(id%JCN_loc)) THEN
+               write(OUT) size(id%JCN_loc,1)
+               write(OUT) id%JCN_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("A_loc")
+            IF(associated(id%A_loc)) THEN
+               write(OUT) size(id%A_loc,1)
+               write(OUT) id%A_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NELT")
+            write(OUT) id%NELT
+         CASE("ELTPTR")
+            IF(associated(id%ELTPTR)) THEN
+               write(OUT) size(id%ELTPTR,1)
+               write(OUT) id%ELTPTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("ELTVAR")
+            IF(associated(id%ELTVAR)) THEN
+               write(OUT) size(id%ELTVAR,1)
+               write(OUT) id%ELTVAR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("A_ELT")
+            IF(associated(id%A_ELT)) THEN
+               write(OUT) size(id%A_ELT,1)
+               write(OUT) id%A_ELT
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PERM_IN")
+            IF(associated(id%PERM_IN)) THEN
+               write(OUT) size(id%PERM_IN,1)
+               write(OUT) id%PERM_IN
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("RHS")
+            IF(associated(id%RHS)) THEN
+               write(OUT) size(id%RHS,1)
+               write(OUT) id%RHS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("REDRHS")
+            IF(associated(id%REDRHS)) THEN
+               write(OUT) size(id%REDRHS,1)
+               write(OUT) id%REDRHS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("RHS_SPARSE")
+            IF(associated(id%RHS_SPARSE)) THEN
+               write(OUT) size(id%RHS_SPARSE,1)
+               write(OUT) id%RHS_SPARSE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SOL_loc")
+            IF(associated(id%SOL_loc)) THEN
+               write(OUT) size(id%SOL_loc,1)
+               write(OUT) id%SOL_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IRHS_SPARSE")
+            IF(associated(id%IRHS_SPARSE)) THEN
+               write(OUT) size(id%IRHS_SPARSE,1)
+               write(OUT) id%IRHS_SPARSE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IRHS_PTR")
+            IF(associated(id%IRHS_PTR)) THEN
+               write(OUT) size(id%IRHS_PTR,1)
+               write(OUT) id%IRHS_PTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("ISOL_loc")
+            IF(associated(id%ISOL_loc)) THEN
+               write(OUT) size(id%ISOL_loc,1)
+               write(OUT) id%ISOL_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("LRHS")
+            write(OUT) id%LRHS
+         CASE("NRHS")
+            write(OUT) id%NRHS
+         CASE("NZ_RHS")
+            write(OUT) id%NZ_RHS
+         CASE("LSOL_loc")
+            write(OUT) id%LSOL_loc
+         CASE("LREDRHS")
+            write(OUT) id%LREDRHS
+         CASE("SYM_PERM")
+            IF(associated(id%SYM_PERM)) THEN
+               write(OUT) size(id%SYM_PERM,1)
+               write(OUT) id%SYM_PERM
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("UNS_PERM")
+            IF(associated(id%UNS_PERM)) THEN
+               write(OUT) size(id%UNS_PERM,1)
+               write(OUT) id%UNS_PERM
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NPROW")
+            write(OUT) id%NPROW
+         CASE("NPCOL")
+            write(OUT) id%NPCOL
+         CASE("MBLOCK")
+            write(OUT) id%MBLOCK
+         CASE("NBLOCK")
+            write(OUT) id%NBLOCK
+         CASE("SCHUR_MLOC")
+            write(OUT) id%SCHUR_MLOC
+         CASE("SCHUR_NLOC")
+            write(OUT) id%SCHUR_NLOC
+         CASE("SCHUR_LLD")
+            write(OUT) id%SCHUR_LLD
+         CASE("SIZE_SCHUR")
+            write(OUT) id%SIZE_SCHUR
+         CASE("SCHUR")
+            IF(associated(id%SCHUR)) THEN
+               write(OUT) size(id%SCHUR,1)
+               write(OUT) id%SCHUR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SCHUR_CINTERFACE")
+            IF(associated(id%SCHUR_CINTERFACE)) THEN
+               write(OUT) size(id%SCHUR_CINTERFACE,1)
+               write(OUT) id%SCHUR_CINTERFACE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("LISTVAR_SCHUR")
+            IF(associated(id%LISTVAR_SCHUR)) THEN
+               write(OUT) size(id%LISTVAR_SCHUR,1)
+               write(OUT) id%LISTVAR_SCHUR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MAPPING")
+            IF(associated(id%MAPPING)) THEN
+               write(OUT) size(id%MAPPING,1)
+               write(OUT) id%MAPPING
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("VERSION_NUMBER")
+            write(OUT) id%VERSION_NUMBER
+         CASE("OOC_TMPDIR")
+            write(OUT) id%OOC_TMPDIR
+         CASE("OOC_PREFIX")
+            write(OUT) id%OOC_PREFIX
+         CASE("WRITE_PROBLEM")
+            write(OUT) id%WRITE_PROBLEM
+         CASE("MAX_SURF_MASTER")
+            write(OUT) id%MAX_SURF_MASTER
+         CASE("INST_Number")
+            write(OUT) id%INST_Number
+         CASE("COMM_NODES")
+            write(OUT) id%COMM_NODES
+         CASE("MYID_NODES")
+            write(OUT) id%MYID_NODES
+         CASE("COMM_LOAD")
+            write(OUT) id%COMM_LOAD
+         CASE("MYID")
+            write(OUT) id%MYID
+         CASE("NPROCS")
+            write(OUT) id%NPROCS
+         CASE("NSLAVES")
+            write(OUT) id%NSLAVES
+         CASE("ASS_IRECV")
+            write(OUT) id%ASS_IRECV
+         CASE("LBUFR")
+            write(OUT) id%LBUFR
+         CASE("LBUFR_BYTES")
+            write(OUT) id%LBUFR_BYTES
+         CASE("POIDS")
+            IF(associated(id%POIDS)) THEN 
+               write(OUT) size(id%POIDS,1)
+               write(OUT) id%POIDS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("BUFR")
+            IF(associated(id%BUFR)) THEN 
+               write(OUT) size(id%BUFR,1)
+               write(OUT) id%BUFR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IS")
+            IF(associated(id%IS)) THEN 
+               write(OUT) size(id%IS,1)
+               write(OUT) id%IS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IS1")
+            IF(associated(id%IS1)) THEN 
+               write(OUT) size(id%IS1,1)
+               write(OUT) id%IS1
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MAXIS1")
+            write(OUT) id%MAXIS1
+         CASE("Deficiency")
+            write(OUT) id%Deficiency
+         CASE("LNA")
+            write(OUT) id%LNA
+         CASE("NBSA")
+            write(OUT) id%NBSA
+         CASE("STEP")
+            IF(associated(id%STEP)) THEN
+               write(OUT) size(id%STEP,1)
+               write(OUT) id%STEP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NE_STEPS")
+            IF(associated(id%NE_STEPS)) THEN
+               write(OUT) size(id%NE_STEPS,1)
+               write(OUT) id%NE_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("ND_STEPS")
+            IF(associated(id%ND_STEPS)) THEN
+               write(OUT) size(id%ND_STEPS,1)
+               write(OUT) id%ND_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("Step2node")
+            IF(associated(id%Step2node)) THEN
+               write(OUT) size(id%Step2node,1)
+               write(OUT) id%Step2node
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FRERE_STEPS")
+            IF(associated(id%FRERE_STEPS)) THEN
+               write(OUT) size(id%FRERE_STEPS,1)
+               write(OUT) id%FRERE_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DAD_STEPS")
+            IF(associated(id%DAD_STEPS)) THEN
+               write(OUT) size(id%DAD_STEPS,1)
+               write(OUT) id%DAD_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FILS")
+            IF(associated(id%FILS)) THEN
+               write(OUT) size(id%FILS,1)
+               write(OUT) id%FILS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PTRAR")
+            IF(associated(id%PTRAR)) THEN
+               write(OUT) size(id%PTRAR,1)
+               write(OUT) id%PTRAR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FRTPTR")
+            IF(associated(id%FRTPTR)) THEN
+               write(OUT) size(id%FRTPTR,1)
+               write(OUT) id%FRTPTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FRTELT")
+            IF(associated(id%FRTELT)) THEN
+               write(OUT) size(id%FRTELT,1)
+               write(OUT) id%FRTELT
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NA")
+            IF(associated(id%NA)) THEN
+               write(OUT) size(id%NA,1)
+               write(OUT) id%NA
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PROCNODE_STEPS")
+            IF(associated(id%PROCNODE_STEPS)) THEN
+               write(OUT) size(id%PROCNODE_STEPS,1)
+               write(OUT) id%PROCNODE_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PTLUST_S")
+            IF(associated(id%PTLUST_S)) THEN
+               write(OUT) size(id%PTLUST_S,1)
+               write(OUT) id%PTLUST_S
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PTRFAC")
+            IF(associated(id%PTRFAC)) THEN
+               write(OUT) size(id%PTRFAC,1)
+               write(OUT) id%PTRFAC
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("S")
+            IF(associated(id%S)) THEN
+               write(OUT) id%KEEP8(23)
+               write(OUT) id%S
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PROCNODE")
+            IF(associated(id%PROCNODE)) THEN
+               write(OUT) size(id%PROCNODE,1)
+               write(OUT) id%PROCNODE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("INTARR")
+            IF(associated(id%INTARR)) THEN
+               write(OUT) size(id%INTARR,1)
+               write(OUT) id%INTARR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DBLARR")
+            IF(associated(id%DBLARR)) THEN
+               write(OUT) size(id%DBLARR,1)
+               write(OUT) id%DBLARR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NELT_loc")
+            write(OUT) id%NELT_loc
+         CASE("LELTVAR")
+            write(OUT) id%LELTVAR
+         CASE("NA_ELT")
+            write(OUT) id%NA_ELT
+         CASE("ELTPROC")
+            IF(associated(id%ELTPROC)) THEN
+               write(OUT) size(id%ELTPROC,1)
+               write(OUT) id%ELTPROC
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("CANDIDATES")
+            IF(associated(id%CANDIDATES)) THEN
+               write(OUT) size(id%CANDIDATES,1)
+     &              ,size(id%CANDIDATES,2)
+               write(OUT) id%CANDIDATES
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("ISTEP_TO_INIV2")
+            IF(associated(id%ISTEP_TO_INIV2)) THEN
+               write(OUT) size(id%ISTEP_TO_INIV2,1)
+               write(OUT) id%ISTEP_TO_INIV2
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FUTURE_NIV2")
+            IF(associated(id%FUTURE_NIV2)) THEN
+               write(OUT) size(id%FUTURE_NIV2,1)
+               write(OUT) id%FUTURE_NIV2
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("TAB_POS_IN_PERE")
+            IF(associated(id%TAB_POS_IN_PERE)) THEN
+               write(OUT) size(id%TAB_POS_IN_PERE,1)
+     &              ,size(id%TAB_POS_IN_PERE,2)
+               write(OUT) id%TAB_POS_IN_PERE
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("I_AM_CAND")
+            IF(associated(id%I_AM_CAND)) THEN
+               write(OUT) size(id%I_AM_CAND,1)
+               write(OUT) id%I_AM_CAND
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MEM_DIST")
+            IF(associated(id%MEM_DIST)) THEN
+               write(OUT) size(id%MEM_DIST,1)
+               write(OUT) id%MEM_DIST
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("POSINRHSCOMP_ROW")
+            IF(associated(id%POSINRHSCOMP_ROW)) THEN 
+               write(OUT) size(id%POSINRHSCOMP_ROW,1)
+               write(OUT) id%POSINRHSCOMP_ROW
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("POSINRHSCOMP_COL_ALLOC")
+            write(OUT) id%POSINRHSCOMP_COL_ALLOC
+         CASE("POSINRHSCOMP_COL")
+            IF(associated(id%POSINRHSCOMP_COL)) THEN
+               IF(id%POSINRHSCOMP_COL_ALLOC) THEN
+                  write(OUT) size(id%POSINRHSCOMP_COL,1)
+                  write(OUT) id%POSINRHSCOMP_COL
+               ELSE
+                  write(OUT) size(id%POSINRHSCOMP_COL,1)
+                  write(OUT) -999
+               ENDIF
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("RHSCOMP")
+            IF(associated(id%RHSCOMP)) THEN
+               write(OUT) size(id%RHSCOMP,1)
+               write(OUT) id%RHSCOMP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MEM_SUBTREE")
+            IF(associated(id%MEM_SUBTREE)) THEN
+               write(OUT) size(id%MEM_SUBTREE,1)
+               write(OUT) id%MEM_SUBTREE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("COST_TRAV")
+            IF(associated(id%COST_TRAV)) THEN
+               write(OUT) size(id%COST_TRAV,1)
+               write(OUT) id%COST_TRAV
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MY_ROOT_SBTR")
+            IF(associated(id%MY_ROOT_SBTR)) THEN
+               write(OUT) size(id%MY_ROOT_SBTR,1)
+               write(OUT) id%MY_ROOT_SBTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MY_FIRST_LEAF")
+            IF(associated(id%MY_FIRST_LEAF)) THEN
+               write(OUT) size(id%MY_FIRST_LEAF,1)
+               write(OUT) id%MY_FIRST_LEAF
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MY_NB_LEAF")
+            IF(associated(id%MY_NB_LEAF)) THEN
+               write(OUT) size(id%MY_NB_LEAF,1)
+               write(OUT) id%MY_NB_LEAF
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DEPTH_FIRST")
+            IF(associated(id%DEPTH_FIRST)) THEN
+               write(OUT) size(id%DEPTH_FIRST,1)
+               write(OUT) id%DEPTH_FIRST
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DEPTH_FIRST_SEQ")
+            IF(associated(id%DEPTH_FIRST_SEQ)) THEN
+               write(OUT) size(id%DEPTH_FIRST_SEQ,1)
+               write(OUT) id%DEPTH_FIRST_SEQ
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SBTR_ID")
+            IF(associated(id%SBTR_ID)) THEN
+               write(OUT) size(id%SBTR_ID,1)
+               write(OUT) id%SBTR_ID
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SCHED_DEP")
+            IF(associated(id%SCHED_DEP)) THEN
+               write(OUT) size(id%SCHED_DEP,1)
+               write(OUT) id%SCHED_DEP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SCHED_GRP")
+            IF(associated(id%SCHED_GRP)) THEN
+               write(OUT) size(id%SCHED_GRP,1)
+               write(OUT) id%SCHED_GRP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("CROIX_MANU")
+            IF(associated(id%CROIX_MANU)) THEN
+               write(OUT) size(id%CROIX_MANU,1)
+               write(OUT) id%CROIX_MANU
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("WK_USER")
+            IF(associated(id%WK_USER)) THEN
+               write(OUT) id%KEEP8(24)
+               write(OUT) id%WK_USER
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NBSA_LOCAL")
+            write(OUT) id%NBSA_LOCAL
+         CASE("LWK_USER")
+            write(OUT) id%LWK_USER
+         CASE("CB_SON_SIZE")
+            IF(associated(id%CB_SON_SIZE)) THEN
+               write(OUT) size(id%CB_SON_SIZE,1)
+               write(OUT) id%CB_SON_SIZE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("INSTANCE_NUMBER")
+            write(OUT) id%INSTANCE_NUMBER
+         CASE("OOC_MAX_NB_NODES_FOR_ZONE")
+            write(OUT) id%OOC_MAX_NB_NODES_FOR_ZONE
+         CASE("OOC_INODE_SEQUENCE")
+            IF(associated(id%OOC_INODE_SEQUENCE)) THEN
+               write(OUT) size(id%OOC_INODE_SEQUENCE,1)
+     &              ,size(id%OOC_INODE_SEQUENCE,2)
+               write(OUT) id%OOC_INODE_SEQUENCE
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_SIZE_OF_BLOCK")
+            IF(associated(id%OOC_SIZE_OF_BLOCK)) THEN
+               write(OUT) size(id%OOC_SIZE_OF_BLOCK,1)
+     &              ,size(id%OOC_SIZE_OF_BLOCK,2)  
+               write(OUT) id%OOC_SIZE_OF_BLOCK
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_VADDR")
+            IF(associated(id%OOC_VADDR)) THEN
+               write(OUT) size(id%OOC_VADDR,1),size(id%OOC_VADDR,2)
+               write(OUT) id%OOC_VADDR
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_TOTAL_NB_NODES")
+            IF(associated(id%OOC_TOTAL_NB_NODES)) THEN
+               write(OUT) size(id%OOC_TOTAL_NB_NODES,1)
+               write(OUT) id%OOC_TOTAL_NB_NODES
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_NB_FILES")
+            IF(associated(id%OOC_NB_FILES)) THEN
+               write(OUT) size(id%OOC_NB_FILES,1)
+               write(OUT) id%OOC_NB_FILES
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_NB_FILE_TYPE")
+            write(OUT) id%OOC_NB_FILE_TYPE
+         CASE("OOC_FILE_NAMES")
+            IF(associated(id%OOC_FILE_NAMES)) THEN
+               write(OUT) size(id%OOC_FILE_NAMES,1)
+     &              ,size(id%OOC_FILE_NAMES,2)
+               write(OUT) id%OOC_FILE_NAMES
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_FILE_NAME_LENGTH")
+            IF(associated(id%OOC_FILE_NAME_LENGTH)) THEN
+               write(OUT) size(id%OOC_FILE_NAME_LENGTH,1)
+               write(OUT) id%OOC_FILE_NAME_LENGTH
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PIVNUL_LIST")
+            IF(associated(id%PIVNUL_LIST)) THEN
+               write(OUT) size(id%PIVNUL_LIST,1)
+               write(OUT) id%PIVNUL_LIST
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SUP_PROC")
+            IF(associated(id%SUP_PROC)) THEN
+               write(OUT) size(id%SUP_PROC,1),size(id%SUP_PROC,2)
+               write(OUT) id%SUP_PROC
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("IPTR_WORKING")
+            IF(associated(id%IPTR_WORKING)) THEN
+               write(OUT) size(id%IPTR_WORKING,1)
+               write(OUT) id%IPTR_WORKING
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("WORKING")
+            IF(associated(id%WORKING)) THEN
+               write(OUT) size(id%WORKING,1)
+               write(OUT) id%WORKING
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("root")
+         CASE("NBGRP")
+           write(OUT) id%NBGRP
+        CASE("LRGROUPS")
+           IF(associated(id%LRGROUPS)) THEN
+              write(OUT) size(id%LRGROUPS,1)
+              write(OUT) id%LRGROUPS
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("SCHED_SBTR")
+           IF(associated(id%SCHED_SBTR)) THEN
+              write(OUT) size(id%SCHED_SBTR,1)
+              write(OUT) id%SCHED_SBTR
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("LPOOL_AFTER_L0_OMP")
+           write(OUT) id%LPOOL_AFTER_L0_OMP
+        CASE("LPOOL_BEFORE_L0_OMP")
+           write(OUT) id%LPOOL_BEFORE_L0_OMP
+        CASE("L_PHYS_L0_OMP")
+           write(OUT) id%L_PHYS_L0_OMP
+        CASE("L_VIRT_L0_OMP")        
+           write(OUT) id%L_VIRT_L0_OMP
+        CASE("LL0_OMP_MAPPING")
+           write(OUT) id%LL0_OMP_MAPPING
+        CASE("THREAD_LA")
+           write(OUT) id%THREAD_LA
+        CASE("IPOOL_AFTER_L0_OMP")
+           IF(associated(id%IPOOL_AFTER_L0_OMP)) THEN
+              write(OUT) size(id%IPOOL_AFTER_L0_OMP,1)
+              write(OUT) id%IPOOL_AFTER_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("IPOOL_BEFORE_L0_OMP")
+           IF(associated(id%IPOOL_BEFORE_L0_OMP)) THEN
+              write(OUT) size(id%IPOOL_BEFORE_L0_OMP,1)
+              write(OUT) id%IPOOL_BEFORE_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("PHYS_L0_OMP")
+           IF(associated(id%PHYS_L0_OMP)) THEN
+              write(OUT) size(id%PHYS_L0_OMP,1)
+              write(OUT) id%PHYS_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("VIRT_L0_OMP")
+           IF(associated(id%VIRT_L0_OMP)) THEN
+              write(OUT) size(id%VIRT_L0_OMP,1)
+              write(OUT) id%VIRT_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("PERM_L0_OMP")
+           IF(associated(id%PERM_L0_OMP)) THEN
+              write(OUT) size(id%PERM_L0_OMP,1)
+              write(OUT) id%PERM_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("PTR_LEAFS_L0_OMP")
+           IF(associated(id%PTR_LEAFS_L0_OMP)) THEN
+              write(OUT) size(id%PTR_LEAFS_L0_OMP,1)
+              write(OUT) id%PTR_LEAFS_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("L0_OMP_MAPPING")
+          IF(associated(id%L0_OMP_MAPPING)) THEN
+              write(OUT) size(id%L0_OMP_MAPPING,1)
+              write(OUT) id%L0_OMP_MAPPING
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("IF_RESTARTING")
+           write(OUT) id%IF_RESTARTING
+      CASE("SINGULAR_VALUES")
+         IF(associated(id%SINGULAR_VALUES)) THEN
+            write(OUT) size(id%SINGULAR_VALUES,1)
+            write(OUT) id%SINGULAR_VALUES
+         ELSE
+            write(OUT) -999,-998
+            write(OUT) -999
+         ENDIF 
+      CASE("NB_SINGULAR_VALUES")
+        write(OUT) id%NB_SINGULAR_VALUES
+        CASE("pad0","pad1","pad2","pad3","pad4","pad5","pad8","pad11",
+     &          "pad111", "pad12","pad13","pad14")
+        CASE DEFAULT
+           id%INFOG(1)=-92
+           write(*,*) "IN CMUMPS_STOP UNKNOWN VARIABLE IN STRUCTURE: "
+     &          // trim(adjustl(VARIABLES(i1)))
+           error=.true.
+           goto 100
+        END SELECT
+      ENDDO
+ 100  continue
+      CLOSE(OUT)
+      if(error) goto 101
+      OUTROOT=OUT+1000
+      OUTFILEROOT=trim(adjustl(OUTFILE)) // trim(adjustl("ROOT")) 
+     &     // trim(adjustl(STRING_ID))
+      open(UNIT=OUTROOT,FILE=OUTFILEROOT,STATUS='replace',
+     &     form='unformatted',iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN CMUMPS_STOP CANNOT OPEN FILE: "
+     &        //trim(adjustl(OUTFILEROOT))
+         goto 100
+      endif
+      DO i2=1,NBVARIABLES_ROOT
+         SELECT CASE(VARIABLES_ROOT(i2))
+      CASE("MBLOCK")
+         write(OUTROOT) id%root%MBLOCK
+      CASE("NBLOCK")
+         write(OUTROOT) id%root%NBLOCK
+      CASE("NPROW")
+         write(OUTROOT) id%root%NPROW
+      CASE("NPCOL")
+         write(OUTROOT) id%root%NPCOL
+      CASE("MYROW")
+         write(OUTROOT) id%root%MYROW
+      CASE("MYCOL")
+         write(OUTROOT) id%root%MYCOL
+      CASE("SCHUR_MLOC")
+         write(OUTROOT) id%root%SCHUR_MLOC
+      CASE("SCHUR_NLOC")
+         write(OUTROOT) id%root%SCHUR_NLOC
+      CASE("SCHUR_LLD")
+         write(OUTROOT) id%root%SCHUR_LLD
+      CASE("RHS_NLOC")
+         write(OUTROOT) id%root%RHS_NLOC
+      CASE("ROOT_SIZE")
+         write(OUTROOT) id%root%ROOT_SIZE
+      CASE("TOT_ROOT_SIZE")
+         write(OUTROOT) id%root%TOT_ROOT_SIZE
+      CASE("DESCRIPTOR")
+         write(OUTROOT) id%root%DESCRIPTOR
+      CASE("CNTXT_BLACS")
+         write(OUTROOT) id%root%CNTXT_BLACS
+      CASE("LPIV")
+         write(OUTROOT) id%root%LPIV
+      CASE("RG2L_ROW")
+         IF(associated(id%root%RG2L_ROW)) THEN
+            write(OUTROOT) size(id%root%RG2L_ROW,1)
+            write(OUTROOT) id%root%RG2L_ROW
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("RG2L_COL")
+         IF(associated(id%root%RG2L_COL)) THEN
+            write(OUTROOT) size(id%root%RG2L_COL,1)
+            write(OUTROOT) id%root%RG2L_COL
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("IPIV")
+         IF(associated(id%root%IPIV)) THEN
+            write(OUTROOT) size(id%root%IPIV,1)
+            write(OUTROOT) id%root%IPIV
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("RHS_CNTR_MASTER_ROOT")
+         IF(associated(id%root%RHS_CNTR_MASTER_ROOT)) THEN
+            write(OUTROOT) size(id%root%RHS_CNTR_MASTER_ROOT,1)
+            write(OUTROOT) id%root%RHS_CNTR_MASTER_ROOT
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("SCHUR_POINTER")
+         IF(associated(id%root%SCHUR_POINTER)) THEN
+            write(OUTROOT) size(id%root%SCHUR_POINTER,1)
+            write(OUTROOT) id%root%SCHUR_POINTER
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("QR_TAU")
+         IF(associated(id%root%QR_TAU)) THEN
+            write(OUTROOT) size(id%root%QR_TAU,1)
+            write(OUTROOT) id%root%QR_TAU
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("RHS_ROOT")
+         IF(associated(id%root%RHS_ROOT)) THEN
+            write(OUTROOT) size(id%root%RHS_ROOT,1)
+     &           ,size(id%root%RHS_ROOT,2)
+            write(OUTROOT) id%root%RHS_ROOT
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF
+      CASE("QR_RCOND")
+         write(OUTROOT) id%root%QR_RCOND
+      CASE("yes")
+         write(OUTROOT) id%root%yes
+      CASE("gridinit_done")
+         write(OUTROOT) id%root%gridinit_done
+      CASE("SVD_U")
+         IF(associated(id%root%SVD_U)) THEN
+            write(OUTROOT) size(id%root%SVD_U,1)
+     &           ,size(id%root%SVD_U,2)
+            write(OUTROOT) id%root%SVD_U
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF   
+      CASE("SVD_VT")
+         IF(associated(id%root%SVD_VT)) THEN
+            write(OUTROOT) size(id%root%SVD_VT,1)
+     &           ,size(id%root%SVD_VT,2)
+            write(OUTROOT) id%root%SVD_VT
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF  
+      CASE("SINGULAR_VALUES")
+         IF(associated(id%root%SINGULAR_VALUES)) THEN
+            write(OUTROOT) size(id%root%SINGULAR_VALUES,1)
+            write(OUTROOT) id%root%SINGULAR_VALUES
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF 
+      CASE("NB_SINGULAR_VALUES")
+         write(OUTROOT) id%root%NB_SINGULAR_VALUES
+      CASE("rootpad0","rootpad1","rootpad2","rootpad",
+     &        "rootpad3")
+      CASE DEFAULT
+         id%INFOG(1)=-92
+         write(*,*) "IN CMUMPS_STOP UNKNOWN VARIABLE"
+     &        // "IN ROOT: " // trim(adjustl(VARIABLES_ROOT(i2)))
+         goto 101
+      END SELECT  
+      ENDDO
+ 101  continue
+      CLOSE(OUTROOT)
+      END SUBROUTINE CMUMPS_STOP
+      SUBROUTINE CMUMPS_RESTART(id,INFILE)
+      USE CMUMPS_STRUC_DEF
+      IMPLICIT NONE
+      INCLUDE 'mpif.h'
+      INTEGER::IN,err,NBVARIABLES,i1,NBVARIABLES_ROOT,dummy
+      INTEGER:: i2,size_array1,size_array2,INROOT
+      CHARACTER(len=100),allocatable,DIMENSION(:)::VARIABLES
+      CHARACTER(len=100),allocatable,DIMENSION(:)::VARIABLES_ROOT
+      CHARACTER(len=*), intent(in):: INFILE
+      CHARACTER(len=100):: INFILEMAIN,INFILEROOT
+      CHARACTER(len=3) :: STRING_ID
+      LOGICAL :: error
+      INTEGER MASTER
+      PARAMETER( MASTER = 0 )
+      TYPE (CMUMPS_STRUC) :: id
+      error=.false.
+      write (STRING_ID, '(i3)') id%MYID
+      NBVARIABLES=171
+      allocate(VARIABLES(NBVARIABLES))
+      VARIABLES(171)="NB_SINGULAR_VALUES"
+      VARIABLES(170)="SINGULAR_VALUES"
+      VARIABLES(169)="IF_RESTARTING"
+      VARIABLES(168)="L0_OMP_MAPPING"
+      VARIABLES(167)="PTR_LEAFS_L0_OMP"
+      VARIABLES(166)="PERM_L0_OMP"
+      VARIABLES(165)="VIRT_L0_OMP"
+      VARIABLES(164)="PHYS_L0_OMP"
+      VARIABLES(163)="IPOOL_AFTER_L0_OMP"
+      VARIABLES(162)="IPOOL_BEFORE_L0_OMP"
+      VARIABLES(161)="THREAD_LA"
+      VARIABLES(160)="LL0_OMP_MAPPING"
+      VARIABLES(159)="L_VIRT_L0_OMP"
+      VARIABLES(158)="L_PHYS_L0_OMP"
+      VARIABLES(157)="LPOOL_BEFORE_L0_OMP"
+      VARIABLES(156)="LPOOL_AFTER_L0_OMP"
+      VARIABLES(155)="NBGRP"
+      VARIABLES(154)="LRGROUPS"
+      VARIABLES(153)="root"
+      VARIABLES(152)="WORKING"
+      VARIABLES(151)="IPTR_WORKING"
+      VARIABLES(150)="pad14"
+      VARIABLES(149)="SUP_PROC"
+      VARIABLES(148)="PIVNUL_LIST"
+      VARIABLES(147)="OOC_FILE_NAME_LENGTH"
+      VARIABLES(146)="OOC_FILE_NAMES"
+      VARIABLES(145)="OOC_NB_FILE_TYPE"
+      VARIABLES(144)="OOC_NB_FILES"
+      VARIABLES(143)="OOC_TOTAL_NB_NODES"
+      VARIABLES(142)="OOC_VADDR"
+      VARIABLES(141)="OOC_SIZE_OF_BLOCK"
+      VARIABLES(140)="pad13"
+      VARIABLES(139)="OOC_INODE_SEQUENCE"
+      VARIABLES(138)="OOC_MAX_NB_NODES_FOR_ZONE"
+      VARIABLES(137)="INSTANCE_NUMBER"
+      VARIABLES(136)="pad12"
+      VARIABLES(135)="CB_SON_SIZE"
+      VARIABLES(134)="DKEEP"
+      VARIABLES(133)="LWK_USER"
+      VARIABLES(132)="NBSA_LOCAL"
+      VARIABLES(131)="WK_USER"
+      VARIABLES(130)="CROIX_MANU"
+      VARIABLES(129)="SCHED_SBTR"
+      VARIABLES(128)="SCHED_GRP"
+      VARIABLES(127)="SCHED_DEP"
+      VARIABLES(126)="SBTR_ID"
+      VARIABLES(125)="DEPTH_FIRST_SEQ"
+      VARIABLES(124)="DEPTH_FIRST"
+      VARIABLES(123)="MY_NB_LEAF"
+      VARIABLES(122)="MY_FIRST_LEAF"
+      VARIABLES(121)="MY_ROOT_SBTR"
+      VARIABLES(120)="COST_TRAV"
+      VARIABLES(119)="MEM_SUBTREE"
+      VARIABLES(118)="RHSCOMP"
+      VARIABLES(117)="POSINRHSCOMP_COL"
+      VARIABLES(116)="POSINRHSCOMP_ROW"
+      VARIABLES(115)="POSINRHSCOMP_COL_ALLOC"
+      VARIABLES(114)="MEM_DIST"
+      VARIABLES(113)="I_AM_CAND"
+      VARIABLES(112)="TAB_POS_IN_PERE"
+      VARIABLES(111)="FUTURE_NIV2"
+      VARIABLES(110)="ISTEP_TO_INIV2"
+      VARIABLES(109)="CANDIDATES"
+      VARIABLES(108)="ELTPROC"
+      VARIABLES(107)="pad11"
+      VARIABLES(106)="NA_ELT"
+      VARIABLES(105)="LELTVAR"
+      VARIABLES(104)="NELT_loc"
+      VARIABLES(103)="DBLARR"
+      VARIABLES(102)="INTARR"
+      VARIABLES(101)="PROCNODE"
+      VARIABLES(100)="S"
+      VARIABLES(99)="PTRFAC"
+      VARIABLES(98)="PTLUST_S"
+      VARIABLES(97)="PROCNODE_STEPS"
+      VARIABLES(96)="NA"
+      VARIABLES(95)="FRTELT"
+      VARIABLES(94)="FRTPTR"
+      VARIABLES(93)="PTRAR"
+      VARIABLES(92)="FILS"
+      VARIABLES(91)="DAD_STEPS"
+      VARIABLES(90)="FRERE_STEPS"
+      VARIABLES(89)="Step2node"
+      VARIABLES(88)="ND_STEPS"
+      VARIABLES(87)="NE_STEPS"
+      VARIABLES(86)="STEP"
+      VARIABLES(85)="NBSA"
+      VARIABLES(84)="LNA"
+      VARIABLES(83)="KEEP"
+      VARIABLES(82)="Deficiency"
+      VARIABLES(81)="MAXIS1"
+      VARIABLES(80)="IS1"
+      VARIABLES(79)="IS"
+      VARIABLES(78)="BUFR"
+      VARIABLES(77)="POIDS"
+      VARIABLES(76)="LBUFR_BYTES"
+      VARIABLES(75)="LBUFR"
+      VARIABLES(74)="ASS_IRECV"
+      VARIABLES(73)="NSLAVES"
+      VARIABLES(72)="NPROCS"
+      VARIABLES(71)="MYID"
+      VARIABLES(70)="COMM_LOAD"
+      VARIABLES(69)="MYID_NODES"
+      VARIABLES(68)="COMM_NODES"
+      VARIABLES(67)="INST_Number"
+      VARIABLES(66)="MAX_SURF_MASTER"
+      VARIABLES(65)="KEEP8"
+      VARIABLES(64)="pad8"
+      VARIABLES(63)="WRITE_PROBLEM"
+      VARIABLES(62)="OOC_PREFIX"
+      VARIABLES(61)="OOC_TMPDIR"
+      VARIABLES(60)="VERSION_NUMBER"
+      VARIABLES(59)="MAPPING"
+      VARIABLES(58)="LISTVAR_SCHUR"
+      VARIABLES(57)="SCHUR_CINTERFACE"
+      VARIABLES(56)="SCHUR"
+      VARIABLES(55)="SIZE_SCHUR"
+      VARIABLES(54)="SCHUR_LLD"
+      VARIABLES(53)="SCHUR_NLOC"
+      VARIABLES(52)="SCHUR_MLOC"
+      VARIABLES(51)="NBLOCK"
+      VARIABLES(50)="MBLOCK"
+      VARIABLES(49)="NPCOL"
+      VARIABLES(48)="NPROW"
+      VARIABLES(47)="UNS_PERM"
+      VARIABLES(46)="SYM_PERM"
+      VARIABLES(45)="RINFOG"
+      VARIABLES(44)="RINFO"
+      VARIABLES(43)="CNTL"
+      VARIABLES(42)="COST_SUBTREES"
+      VARIABLES(41)="INFOG"
+      VARIABLES(40)="INFO"
+      VARIABLES(39)="ICNTL"
+      VARIABLES(38)="pad5"
+      VARIABLES(37)="LREDRHS"
+      VARIABLES(36)="LSOL_loc"
+      VARIABLES(35)="NZ_RHS"
+      VARIABLES(34)="NRHS"
+      VARIABLES(33)="LRHS"
+      VARIABLES(32)="ISOL_loc"
+      VARIABLES(31)="IRHS_PTR"
+      VARIABLES(30)="IRHS_SPARSE"
+      VARIABLES(29)="SOL_loc"
+      VARIABLES(28)="RHS_SPARSE"
+      VARIABLES(27)="REDRHS"
+      VARIABLES(26)="RHS"
+      VARIABLES(25)="PERM_IN"
+      VARIABLES(24)="pad4"
+      VARIABLES(23)="A_ELT"
+      VARIABLES(22)="ELTVAR"
+      VARIABLES(21)="ELTPTR"
+      VARIABLES(20)="pad3"
+      VARIABLES(19)="NELT"
+      VARIABLES(18)="pad2"
+      VARIABLES(17)="A_loc"
+      VARIABLES(16)="JCN_loc"
+      VARIABLES(15)="IRN_loc"
+      VARIABLES(14)="pad1"
+      VARIABLES(13)="NZ_loc"
+      VARIABLES(12)="pad0"
+      VARIABLES(11)="ROWSCA"
+      VARIABLES(10)="COLSCA"
+      VARIABLES(9)="JCN"
+      VARIABLES(8)="IRN"
+      VARIABLES(7)="A"
+      VARIABLES(6)="NZ"
+      VARIABLES(5)="N"
+      VARIABLES(4)="JOB"
+      VARIABLES(3)="PAR"
+      VARIABLES(2)="SYM"
+      VARIABLES(1)="COMM"
+      NBVARIABLES_ROOT=34
+      allocate(VARIABLES_ROOT(NBVARIABLES_ROOT))
+      VARIABLES_ROOT(34)="NB_SINGULAR_VALUES"
+      VARIABLES_ROOT(33)="SINGULAR_VALUES"
+      VARIABLES_ROOT(32)="SVD_VT"
+      VARIABLES_ROOT(31)="SVD_U"
+      VARIABLES_ROOT(30)="gridinit_done"
+      VARIABLES_ROOT(29)="yes"
+      VARIABLES_ROOT(28)="rootpad3"
+      VARIABLES_ROOT(27)="QR_RCOND"
+      VARIABLES_ROOT(26)="rootpad"
+      VARIABLES_ROOT(25)="RHS_ROOT"
+      VARIABLES_ROOT(24)="rootpad2"
+      VARIABLES_ROOT(23)="QR_TAU"
+      VARIABLES_ROOT(22)="SCHUR_POINTER"
+      VARIABLES_ROOT(21)="RHS_CNTR_MASTER_ROOT"
+      VARIABLES_ROOT(20)="rootpad1"
+      VARIABLES_ROOT(19)="IPIV"
+      VARIABLES_ROOT(18)="RG2L_COL"
+      VARIABLES_ROOT(17)="RG2L_ROW"
+      VARIABLES_ROOT(16)="rootpad0"
+      VARIABLES_ROOT(15)="LPIV"
+      VARIABLES_ROOT(14)="CNTXT_BLACS"
+      VARIABLES_ROOT(13)="DESCRIPTOR"
+      VARIABLES_ROOT(12)="TOT_ROOT_SIZE"
+      VARIABLES_ROOT(11)="ROOT_SIZE"
+      VARIABLES_ROOT(10)="RHS_NLOC"
+      VARIABLES_ROOT(9)="SCHUR_LLD"
+      VARIABLES_ROOT(8)="SCHUR_NLOC"
+      VARIABLES_ROOT(7)="SCHUR_MLOC"
+      VARIABLES_ROOT(6)="MYCOL"
+      VARIABLES_ROOT(5)="MYROW"
+      VARIABLES_ROOT(4)="NPCOL"
+      VARIABLES_ROOT(3)="NPROW"
+      VARIABLES_ROOT(2)="NBLOCK"
+      VARIABLES_ROOT(1)="MBLOCK"
+      IN=52+id%MYID
+      INFILEMAIN=trim(adjustl(INFILE)) // trim(adjustl(STRING_ID))
+      open(UNIT=IN,FILE=INFILEMAIN, STATUS='old',FORM='unformatted'
+     &     ,iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN CMUMPS_RESTART CANNOT OPEN FILE: "
+     &        //trim(adjustl(INFILEMAIN))
+         error=.true.
+         goto 101
+      endif
+      DO i1=4,NBVARIABLES
+         size_array1=0
+         size_array2=0
+         SELECT CASE(VARIABLES(i1))
+         CASE("JOB")
+            read(IN) id%JOB
+         CASE("N")
+            read(IN) id%N
+         CASE("ICNTL")
+            read(IN) id%ICNTL
+         CASE("INFO")
+            read(IN) id%INFO
+         CASE("INFOG")
+            read(IN) id%INFOG
+         CASE("COST_SUBTREES")
+            read(IN) id%COST_SUBTREES
+         CASE("CNTL")
+            read(IN) id%CNTL
+         CASE("RINFO")
+            read(IN) id%RINFO
+         CASE("RINFOG")
+            read(IN) id%RINFOG
+         CASE("KEEP8")
+            read(IN) id%KEEP8
+         CASE("KEEP")
+            read(IN) id%KEEP
+         CASE("DKEEP")
+            read(IN) id%DKEEP    
+         CASE("NZ")
+            read(IN) id%NZ
+         CASE("A")
+            nullify(id%A)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%A(size_array1))
+               read(IN) id%A
+            endif
+         CASE("IRN")
+            nullify(id%IRN)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRN(size_array1))
+               read(IN) id%IRN
+            endif
+         CASE("JCN")
+            nullify(id%JCN)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%JCN(size_array1))
+               read(IN) id%JCN
+            endif
+         CASE("COLSCA")
+            nullify(id%COLSCA)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%COLSCA(size_array1))
+               read(IN) id%COLSCA
+            endif
+         CASE("ROWSCA")
+            nullify(id%ROWSCA)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ROWSCA(size_array1))
+               read(IN) id%ROWSCA
+            endif
+         CASE("NZ_loc")
+            read(IN) id%NZ_loc
+         CASE("IRN_loc")
+            nullify(id%IRN_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRN_loc(size_array1))
+               read(IN) id%IRN_loc
+            endif
+         CASE("JCN_loc")
+            nullify(id%JCN_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%JCN_loc(size_array1))
+               read(IN) id%JCN_loc
+            endif
+         CASE("A_loc")
+            nullify(id%A_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%A_loc(size_array1))
+               read(IN) id%A_loc
+            endif
+         CASE("NELT")
+            read(IN) id%NELT
+         CASE("ELTPTR")
+            nullify(id%ELTPTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ELTPTR(size_array1))
+               read(IN) id%ELTPTR
+            endif
+         CASE("ELTVAR")
+            nullify(id%ELTVAR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ELTVAR(size_array1))
+               read(IN) id%ELTVAR
+            endif
+         CASE("A_ELT")
+            nullify(id%A_ELT)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%A_ELT(size_array1))
+               read(IN) id%A_ELT
+            endif
+         CASE("PERM_IN")
+            nullify(id%PERM_IN)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PERM_IN(size_array1))
+               read(IN) id%PERM_IN
+            endif
+         CASE("RHS")
+            nullify(id%RHS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%RHS(size_array1))
+               read(IN) id%RHS
+            endif
+         CASE("REDRHS")
+            nullify(id%REDRHS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%REDRHS(size_array1))
+               read(IN) id%REDRHS
+            endif
+         CASE("RHS_SPARSE")
+            nullify(id%RHS_SPARSE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%RHS_SPARSE(size_array1))
+               read(IN) id%RHS_SPARSE
+            endif
+         CASE("SOL_loc")
+            nullify(id%SOL_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SOL_loc(size_array1))
+               read(IN) id%SOL_loc
+            endif
+         CASE("IRHS_SPARSE")
+            nullify(id%IRHS_SPARSE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRHS_SPARSE(size_array1))
+               read(IN) id%IRHS_SPARSE
+            endif
+         CASE("IRHS_PTR")
+            nullify(id%IRHS_PTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRHS_PTR(size_array1))
+               read(IN) id%IRHS_PTR
+            endif
+         CASE("ISOL_loc")
+            nullify(id%ISOL_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ISOL_loc(size_array1))
+               read(IN) id%ISOL_loc
+            endif
+         CASE("LRHS")
+            read(IN) id%LRHS
+         CASE("NRHS")
+            read(IN) id%NRHS
+         CASE("NZ_RHS")
+            read(IN) id%NZ_RHS
+         CASE("LSOL_loc")
+            read(IN) id%LSOL_loc
+         CASE("LREDRHS")
+            read(IN) id%LREDRHS
+         CASE("SYM_PERM")
+            nullify(id%SYM_PERM)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SYM_PERM(size_array1))
+               read(IN) id%SYM_PERM
+            endif
+         CASE("UNS_PERM")
+            nullify(id%UNS_PERM)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%UNS_PERM(size_array1))
+               read(IN) id%UNS_PERM
+            endif
+         CASE("NPROW")
+            read(IN) id%NPROW
+         CASE("NPCOL")
+            read(IN) id%NPCOL
+         CASE("MBLOCK")
+            read(IN) id%MBLOCK
+         CASE("NBLOCK")
+            read(IN) id%NBLOCK
+         CASE("SCHUR_MLOC")
+            read(IN) id%SCHUR_MLOC
+         CASE("SCHUR_NLOC")
+            read(IN) id%SCHUR_NLOC
+         CASE("SCHUR_LLD")
+            read(IN) id%SCHUR_LLD
+         CASE("SIZE_SCHUR")
+            read(IN) id%SIZE_SCHUR
+         CASE("SCHUR")
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHUR(size_array1))
+               read(IN) id%SCHUR
+            endif
+         CASE("SCHUR_CINTERFACE")
+            nullify(id%SCHUR_CINTERFACE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHUR_CINTERFACE(size_array1))
+               read(IN) id%SCHUR_CINTERFACE
+            endif
+         CASE("LISTVAR_SCHUR")
+            nullify(id%LISTVAR_SCHUR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%LISTVAR_SCHUR(size_array1))
+               read(IN) id%LISTVAR_SCHUR
+            endif
+         CASE("MAPPING")
+            nullify(id%MAPPING)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MAPPING(size_array1))
+               read(IN) id%MAPPING
+            endif
+         CASE("VERSION_NUMBER")
+            read(IN) id%VERSION_NUMBER
+         CASE("OOC_TMPDIR")
+            read(IN) id%OOC_TMPDIR
+         CASE("OOC_PREFIX")
+            read(IN) id%OOC_PREFIX
+         CASE("WRITE_PROBLEM")
+            read(IN) id%WRITE_PROBLEM
+         CASE("MAX_SURF_MASTER")
+            read(IN) id%MAX_SURF_MASTER
+         CASE("INST_Number")
+            read(IN) id%INST_Number
+         CASE("COMM_NODES")
+            read(IN) id%COMM_NODES
+         CASE("MYID_NODES")
+            read(IN) id%MYID_NODES
+         CASE("COMM_LOAD")
+            read(IN) id%COMM_LOAD
+         CASE("MYID")
+            read(IN) id%MYID
+         CASE("NPROCS")
+            read(IN) id%NPROCS
+         CASE("NSLAVES")
+            read(IN) id%NSLAVES
+         CASE("ASS_IRECV")
+            read(IN) id%ASS_IRECV
+         CASE("LBUFR")
+            read(IN) id%LBUFR
+         CASE("LBUFR_BYTES")
+            read(IN) id%LBUFR_BYTES
+         CASE("POIDS")
+            nullify(id%POIDS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%POIDS(size_array1))
+               read(IN) id%POIDS
+            endif
+         CASE("BUFR")
+            nullify(id%BUFR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%BUFR(size_array1))
+               read(IN) id%BUFR
+            endif
+         CASE("IS")
+            nullify(id%IS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IS(size_array1))
+               read(IN) id%IS
+            endif
+         CASE("IS1")
+            nullify(id%IS1)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IS1(size_array1))
+               read(IN) id%IS1
+            endif
+         CASE("MAXIS1")
+            read(IN) id%MAXIS1
+         CASE("Deficiency")
+            read(IN) id%Deficiency
+         CASE("LNA")
+            read(IN) id%LNA
+         CASE("NBSA")
+            read(IN) id%NBSA
+         CASE("STEP")
+            nullify(id%STEP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%STEP(size_array1))
+               read(IN) id%STEP
+            endif
+         CASE("NE_STEPS")
+            nullify(id%NE_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%NE_STEPS(size_array1))
+               read(IN) id%NE_STEPS
+            endif
+         CASE("ND_STEPS")
+            nullify(id%ND_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ND_STEPS(size_array1))
+               read(IN) id%ND_STEPS
+            endif
+         CASE("Step2node")
+            nullify(id%Step2node)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%Step2node(size_array1))
+               read(IN) id%Step2node
+            endif
+         CASE("FRERE_STEPS")
+            nullify(id%FRERE_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FRERE_STEPS(size_array1))
+               read(IN) id%FRERE_STEPS
+            endif
+         CASE("DAD_STEPS")
+            nullify(id%DAD_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DAD_STEPS(size_array1))
+               read(IN) id%DAD_STEPS
+            endif
+         CASE("FILS")
+            nullify(id%FILS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FILS(size_array1))
+               read(IN) id%FILS
+            endif
+         CASE("PTRAR")
+            nullify(id%PTRAR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PTRAR(size_array1))
+               read(IN) id%PTRAR
+            endif
+         CASE("FRTPTR")
+            nullify(id%FRTPTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FRTPTR(size_array1))
+               read(IN) id%FRTPTR
+            endif
+         CASE("FRTELT")
+            nullify(id%FRTELT)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FRTELT(size_array1))
+               read(IN) id%FRTELT
+            endif
+         CASE("NA")
+            nullify(id%NA)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%NA(size_array1))
+               read(IN) id%NA
+            endif
+         CASE("PROCNODE_STEPS")
+            nullify(id%PROCNODE_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PROCNODE_STEPS(size_array1))
+               read(IN) id%PROCNODE_STEPS
+            endif
+         CASE("PTLUST_S")
+            nullify(id%PTLUST_S)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PTLUST_S(size_array1))
+               read(IN) id%PTLUST_S
+            endif
+         CASE("PTRFAC")
+            nullify(id%PTRFAC)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PTRFAC(size_array1))
+               read(IN) id%PTRFAC
+            endif
+         CASE("S")
+            nullify(id%S)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%S(size_array1))
+               read(IN) id%S
+            endif
+         CASE("PROCNODE")
+            nullify(id%PROCNODE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PROCNODE(size_array1))
+               read(IN) id%PROCNODE
+            endif
+         CASE("INTARR")
+            nullify(id%INTARR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%INTARR(size_array1))
+               read(IN) id%INTARR
+            endif
+         CASE("DBLARR")
+            nullify(id%DBLARR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DBLARR(size_array1))
+               read(IN) id%DBLARR
+            endif
+         CASE("NELT_loc")
+            read(IN) id%NELT_loc
+         CASE("LELTVAR")
+            read(IN) id%LELTVAR
+         CASE("NA_ELT")
+            read(IN) id%NA_ELT
+         CASE("ELTPROC")
+            nullify(id%ELTPROC)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ELTPROC(size_array1))
+               read(IN) id%ELTPROC
+            endif
+         CASE("CANDIDATES")
+            nullify(id%CANDIDATES)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%CANDIDATES(size_array1,size_array2))
+               read(IN) id%CANDIDATES
+            endif
+         CASE("ISTEP_TO_INIV2")
+            nullify(id%ISTEP_TO_INIV2)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ISTEP_TO_INIV2(size_array1))
+               read(IN) id%ISTEP_TO_INIV2
+            endif
+         CASE("FUTURE_NIV2")
+            nullify(id%FUTURE_NIV2)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FUTURE_NIV2(size_array1))
+               read(IN) id%FUTURE_NIV2
+            endif
+         CASE("TAB_POS_IN_PERE")
+            nullify(id%TAB_POS_IN_PERE)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%TAB_POS_IN_PERE(size_array1,size_array2))
+               read(IN) id%TAB_POS_IN_PERE
+            endif
+         CASE("I_AM_CAND")
+            nullify(id%I_AM_CAND)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%I_AM_CAND(size_array1))
+               read(IN) id%I_AM_CAND
+            endif
+         CASE("MEM_DIST")
+            nullify(id%MEM_DIST)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MEM_DIST(0:size_array1-1))
+               read(IN) id%MEM_DIST
+            endif
+         CASE("POSINRHSCOMP_ROW")
+            nullify(id%POSINRHSCOMP_ROW)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%POSINRHSCOMP_ROW(size_array1))
+               read(IN) id%POSINRHSCOMP_ROW
+            endif
+         CASE("POSINRHSCOMP_COL_ALLOC")
+            read(IN) id%POSINRHSCOMP_COL_ALLOC
+         CASE("POSINRHSCOMP_COL")
+            nullify(id%POSINRHSCOMP_COL)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               if(id%POSINRHSCOMP_COL_ALLOC) then
+                  allocate(id%POSINRHSCOMP_COL(size_array1))
+                  read(IN) id%POSINRHSCOMP_COL
+               else
+                  read(IN) dummy
+                  id%POSINRHSCOMP_COL=>id%POSINRHSCOMP_ROW
+               endif
+            endif
+         CASE("RHSCOMP")
+            nullify(id%RHSCOMP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%RHSCOMP(size_array1))
+               read(IN) id%RHSCOMP
+            endif
+         CASE("MEM_SUBTREE")
+            nullify(id%MEM_SUBTREE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MEM_SUBTREE(size_array1))
+               read(IN) id%MEM_SUBTREE
+            endif
+         CASE("COST_TRAV")
+            nullify(id%COST_TRAV)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%COST_TRAV(size_array1))
+               read(IN) id%COST_TRAV
+            endif
+         CASE("MY_ROOT_SBTR")
+            nullify(id%MY_ROOT_SBTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MY_ROOT_SBTR(size_array1))
+               read(IN) id%MY_ROOT_SBTR
+            endif
+         CASE("MY_FIRST_LEAF")
+            nullify(id%MY_FIRST_LEAF)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MY_FIRST_LEAF(size_array1))
+               read(IN) id%MY_FIRST_LEAF
+            endif
+         CASE("MY_NB_LEAF")
+            nullify(id%MY_NB_LEAF)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MY_NB_LEAF(size_array1))
+               read(IN) id%MY_NB_LEAF
+            endif
+         CASE("DEPTH_FIRST")
+            nullify(id%DEPTH_FIRST)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DEPTH_FIRST(size_array1))
+               read(IN) id%DEPTH_FIRST
+            endif
+         CASE("DEPTH_FIRST_SEQ")
+            nullify(id%DEPTH_FIRST_SEQ)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DEPTH_FIRST_SEQ(size_array1))
+               read(IN) id%DEPTH_FIRST_SEQ
+            endif
+         CASE("SBTR_ID")
+            nullify(id%SBTR_ID)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SBTR_ID(size_array1))
+               read(IN) id%SBTR_ID
+            endif
+         CASE("SCHED_DEP")
+            nullify(id%SCHED_DEP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHED_DEP(size_array1))
+               read(IN) id%SCHED_DEP
+            endif
+         CASE("SCHED_GRP")
+            nullify(id%SCHED_GRP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHED_GRP(size_array1))
+               read(IN) id%SCHED_GRP
+            endif
+         CASE("CROIX_MANU")
+            nullify(id%CROIX_MANU)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%CROIX_MANU(size_array1))
+               read(IN) id%CROIX_MANU
+            endif
+         CASE("WK_USER")
+            nullify(id%WK_USER)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%WK_USER(size_array1))
+               read(IN) id%WK_USER
+            endif
+         CASE("NBSA_LOCAL")
+            read(IN) id%NBSA_LOCAL
+         CASE("LWK_USER")
+            read(IN) id%LWK_USER
+         CASE("CB_SON_SIZE")
+            nullify(id%CB_SON_SIZE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%CB_SON_SIZE(size_array1))
+               read(IN) id%CB_SON_SIZE
+            endif
+         CASE("INSTANCE_NUMBER")
+            read(IN) id%INSTANCE_NUMBER
+         CASE("OOC_MAX_NB_NODES_FOR_ZONE")
+            read(IN) id%OOC_MAX_NB_NODES_FOR_ZONE
+         CASE("OOC_INODE_SEQUENCE")
+            nullify(id%OOC_INODE_SEQUENCE)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_INODE_SEQUENCE(size_array1,size_array2))
+               read(IN) id%OOC_INODE_SEQUENCE
+            endif
+         CASE("OOC_SIZE_OF_BLOCK")
+            nullify(id%OOC_SIZE_OF_BLOCK)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_SIZE_OF_BLOCK(size_array1,size_array2))
+               read(IN) id%OOC_SIZE_OF_BLOCK
+            endif
+         CASE("OOC_VADDR")
+            nullify(id%OOC_VADDR)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_VADDR(size_array1,size_array2))
+               read(IN) id%OOC_VADDR
+            endif
+         CASE("OOC_TOTAL_NB_NODES")
+            nullify(id%OOC_TOTAL_NB_NODES)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_TOTAL_NB_NODES(size_array1))
+               read(IN) id%OOC_TOTAL_NB_NODES
+            endif
+         CASE("OOC_NB_FILES")
+            nullify(id%OOC_NB_FILES)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_NB_FILES(size_array1))
+               read(IN) id%OOC_NB_FILES
+            endif
+         CASE("OOC_NB_FILE_TYPE")
+            read(IN) id%OOC_NB_FILE_TYPE
+         CASE("OOC_FILE_NAMES")
+            nullify(id%OOC_FILE_NAMES)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_FILE_NAMES(size_array1,size_array2))
+               read(IN) id%OOC_FILE_NAMES
+            endif
+         CASE("OOC_FILE_NAME_LENGTH")
+            nullify(id%OOC_FILE_NAME_LENGTH)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_FILE_NAME_LENGTH(size_array1))
+               read(IN) id%OOC_FILE_NAME_LENGTH
+            endif
+         CASE("PIVNUL_LIST")
+            nullify(id%PIVNUL_LIST)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PIVNUL_LIST(size_array1))
+               read(IN) id%PIVNUL_LIST
+            endif
+         CASE("SUP_PROC")
+            nullify(id%SUP_PROC)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SUP_PROC(size_array1,size_array2))
+               read(IN) id%SUP_PROC
+            endif
+         CASE("IPTR_WORKING")
+            nullify(id%IPTR_WORKING)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IPTR_WORKING(size_array1))
+               read(IN) id%IPTR_WORKING
+            endif
+         CASE("WORKING")
+            nullify(id%WORKING)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%WORKING(size_array1))
+               read(IN) id%WORKING
+            endif
+         CASE("root")
+        CASE("NBGRP")
+           read(IN) id%NBGRP
+        CASE("LRGROUPS")
+           nullify(id%LRGROUPS)
+           read(IN) size_array1
+           if(size_array1.EQ.-999) then
+              read(IN) dummy
+           else
+              allocate(id%LRGROUPS(size_array1))
+              read(IN) id%LRGROUPS
+           endif
+         CASE("SCHED_SBTR")
+            nullify(id%SCHED_SBTR)
+            read(IN) size_array1
+            IF(size_array1.EQ.-999) THEN
+               read(IN) dummy
+            ELSE
+               allocate(id%SCHED_SBTR(size_array1))
+               read(IN) id%SCHED_SBTR
+            ENDIF 
+        CASE("LPOOL_AFTER_L0_OMP")
+           read(IN) id%LPOOL_AFTER_L0_OMP
+        CASE("LPOOL_BEFORE_L0_OMP")
+           read(IN) id%LPOOL_BEFORE_L0_OMP
+        CASE("L_PHYS_L0_OMP")
+           read(IN) id%L_PHYS_L0_OMP
+        CASE("L_VIRT_L0_OMP")  
+           read(IN) id%L_VIRT_L0_OMP
+        CASE("LL0_OMP_MAPPING")
+           read(IN) id%LL0_OMP_MAPPING
+        CASE("THREAD_LA")
+           read(IN) id%THREAD_LA
+        CASE("IPOOL_AFTER_L0_OMP")
+           nullify(id%IPOOL_AFTER_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%IPOOL_AFTER_L0_OMP(size_array1))
+              read(IN) id%IPOOL_AFTER_L0_OMP
+           ENDIF 
+        CASE("IPOOL_BEFORE_L0_OMP")
+           nullify(id%IPOOL_BEFORE_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%IPOOL_BEFORE_L0_OMP(size_array1))
+              read(IN) id%IPOOL_BEFORE_L0_OMP
+           ENDIF 
+        CASE("PHYS_L0_OMP")
+           nullify(id%PHYS_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%PHYS_L0_OMP(size_array1))
+              read(IN) id%PHYS_L0_OMP
+           ENDIF 
+        CASE("VIRT_L0_OMP")
+           nullify(id%VIRT_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%VIRT_L0_OMP(size_array1))
+              read(IN) id%VIRT_L0_OMP
+           ENDIF
+        CASE("PERM_L0_OMP")
+           nullify(id%PERM_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%PERM_L0_OMP(size_array1))
+              read(IN) id%PERM_L0_OMP
+           ENDIF
+        CASE("PTR_LEAFS_L0_OMP")
+           nullify(id%PTR_LEAFS_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%PTR_LEAFS_L0_OMP(size_array1))
+              read(IN) id%PTR_LEAFS_L0_OMP
+           ENDIF
+        CASE("L0_OMP_MAPPING")
+           nullify(id%L0_OMP_MAPPING)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%L0_OMP_MAPPING(size_array1))
+              read(IN) id%L0_OMP_MAPPING
+           ENDIF 
+        CASE("IF_RESTARTING")
+           read(IN) id%IF_RESTARTING 
+        CASE("SINGULAR_VALUES")
+         read(IN) size_array1
+         if(size_array1.EQ.-999) then
+            read(IN) dummy
+         else
+            allocate(id%SINGULAR_VALUES(size_array1))
+            read(IN) id%SINGULAR_VALUES
+         endif  
+      CASE("NB_SINGULAR_VALUES")
+        write(IN) id%NB_SINGULAR_VALUES
+        CASE("pad0","pad1","pad2","pad3","pad4","pad5","pad8","pad11",
+     &          "pad111", "pad12","pad13","pad14")
+        CASE DEFAULT
+           id%INFOG(1)=-92
+           write(*,*) "IN CMUMPS_RESTART UNKNOWN VARIABLE IN "
+     &       // "STRUCTURE: "//  trim(adjustl(VARIABLES(i1)))
+           goto 101
+        END SELECT
+      ENDDO
+ 101  continue
+      close(IN)
+      if(error) goto 102
+      INROOT=1000+IN
+      INFILEROOT=trim(adjustl(INFILE)) // trim(adjustl("ROOT")) 
+     &     // trim(adjustl(STRING_ID)) 
+      open(UNIT=INROOT,FILE=INFILEROOT, STATUS='old',FORM='unformatted'
+     &     ,iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN CMUMPS_RESTART CANNOT OPEN FILE: "
+     &        //trim(adjustl(INFILEROOT))
+         goto 102
+      endif
+      DO i2=1,NBVARIABLES_ROOT
+         SELECT CASE(VARIABLES_ROOT(i2))
+      CASE("MBLOCK")
+         read(INROOT) id%root%MBLOCK
+      CASE("NBLOCK")
+         read(INROOT) id%root%NBLOCK
+      CASE("NPROW")
+         read(INROOT) id%root%NPROW
+      CASE("NPCOL")
+         read(INROOT) id%root%NPCOL
+      CASE("MYROW")
+         read(INROOT) id%root%MYROW
+      CASE("MYCOL")
+         read(INROOT) id%root%MYCOL
+      CASE("SCHUR_MLOC")
+         read(INROOT) id%root%SCHUR_MLOC
+      CASE("SCHUR_NLOC")
+         read(INROOT) id%root%SCHUR_NLOC
+      CASE("SCHUR_LLD")
+         read(INROOT) id%root%SCHUR_LLD
+      CASE("RHS_NLOC")
+         read(INROOT) id%root%RHS_NLOC
+      CASE("ROOT_SIZE")
+         read(INROOT) id%root%ROOT_SIZE
+      CASE("TOT_ROOT_SIZE")
+         read(INROOT) id%root%TOT_ROOT_SIZE
+      CASE("DESCRIPTOR")
+         read(INROOT) id%root%DESCRIPTOR
+      CASE("CNTXT_BLACS")
+         read(INROOT) id%root%CNTXT_BLACS
+      CASE("LPIV")
+         read(INROOT) id%root%LPIV
+      CASE("RG2L_ROW")
+         nullify(id%root%RG2L_ROW)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RG2L_ROW(size_array1))
+            read(INROOT) id%root%RG2L_ROW
+         endif
+      CASE("RG2L_COL")
+         nullify(id%root%RG2L_COL)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RG2L_COL(size_array1))
+            read(INROOT) id%root%RG2L_COL
+         endif
+      CASE("IPIV")
+         nullify(id%root%IPIV)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%IPIV(size_array1))
+            read(INROOT) id%root%IPIV
+         endif
+      CASE("RHS_CNTR_MASTER_ROOT")
+         nullify(id%root%RHS_CNTR_MASTER_ROOT)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RHS_CNTR_MASTER_ROOT(size_array1))
+            read(INROOT) id%root%RHS_CNTR_MASTER_ROOT
+         endif
+      CASE("SCHUR_POINTER")
+         nullify(id%root%SCHUR_POINTER)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SCHUR_POINTER(size_array1))
+            read(INROOT) id%root%SCHUR_POINTER
+         endif
+      CASE("QR_TAU")
+         nullify(id%root%QR_TAU)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%QR_TAU(size_array1))
+            read(INROOT) id%root%QR_TAU
+         endif
+      CASE("RHS_ROOT")
+         nullify(id%root%RHS_ROOT)
+         read(INROOT) size_array1,size_array2
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RHS_ROOT(size_array1,size_array2))
+            read(INROOT) id%root%RHS_ROOT
+         endif
+      CASE("QR_RCOND")
+         read(INROOT) id%root%QR_RCOND
+      CASE("yes")
+         read(INROOT) id%root%yes
+      CASE("gridinit_done")
+         read(INROOT) id%root%gridinit_done
+      CASE("SVD_U")
+         read(INROOT) size_array1,size_array2
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SVD_U(size_array1,size_array2))
+            read(INROOT) id%root%SVD_U
+         endif
+      CASE("SVD_VT")
+         read(INROOT) size_array1,size_array2
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SVD_VT(size_array1,size_array2))
+            read(INROOT) id%root%SVD_VT
+         endif
+      CASE("SINGULAR_VALUES")
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SINGULAR_VALUES(size_array1))
+            read(INROOT) id%root%SINGULAR_VALUES
+         endif  
+      CASE("NB_SINGULAR_VALUES")
+        write(INROOT) id%root%NB_SINGULAR_VALUES
+         CASE("rootpad0","rootpad1","rootpad2","rootpad",
+     &        "rootpad3")
+      CASE DEFAULT
+         id%INFOG(1)=-92
+         write(*,*) "IN CMUMPS_RESTART UNKNOWN VARIABLE "
+     &        // "IN ROOT: "// trim(adjustl(VARIABLES_ROOT(i2)))
+         goto 102
+      END SELECT  
+      ENDDO
+      if(id%root%gridinit_done) then
+         id%root%CNTXT_BLACS = id%COMM_NODES
+         CALL blacs_gridinit( id%root%CNTXT_BLACS, 'R',
+     &        id%root%NPROW, id%root%NPCOL )
+         id%root%gridinit_done = .TRUE.
+      endif
+ 102  continue
+      close(INROOT)
+      END SUBROUTINE CMUMPS_RESTART
diff -ruN MUMPS_5.1.2/src/dmumps_restart.F mumps-5.1.2-aster7/src/dmumps_restart.F
--- MUMPS_5.1.2/src/dmumps_restart.F	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/src/dmumps_restart.F	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,2648 @@
+C
+C  This file is part of MUMPS 5.0.2, released
+C  on Fri Jul 15 09:12:54 UTC 2016
+C
+C
+C  Copyright 1991-2016 CERFACS, CNRS, ENS Lyon, INP Toulouse, Inria,
+C  University of Bordeaux.
+C
+C  This version of MUMPS is provided to you free of charge. It is
+C  released under the CeCILL-C license:
+C  http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html
+C
+      SUBROUTINE DMUMPS_STOP(id,OUTFILE)
+      USE DMUMPS_STRUC_DEF
+      IMPLICIT NONE
+      INCLUDE 'mpif.h'
+      CHARACTER(len=*), intent(in) :: OUTFILE
+      INTEGER::i1,i2,NBVARIABLES,NBVARIABLES_ROOT
+      INTEGER::OUT,err,OUTROOT
+      CHARACTER(len=100), allocatable, dimension(:)::VARIABLES
+      CHARACTER(len=100), allocatable, dimension(:)::VARIABLES_ROOT
+      CHARACTER(len=100):: OUTFILEMAIN,OUTFILEROOT
+      CHARACTER(len=3) :: STRING_ID
+      LOGICAL :: error
+      INTEGER MASTER
+      PARAMETER( MASTER = 0 )
+      TYPE (DMUMPS_STRUC) :: id
+      id%IF_RESTARTING=.TRUE.
+      NBVARIABLES=171
+      allocate(VARIABLES(NBVARIABLES))
+      VARIABLES(171)="NB_SINGULAR_VALUES"
+      VARIABLES(170)="SINGULAR_VALUES"
+      VARIABLES(169)="IF_RESTARTING"
+      VARIABLES(168)="L0_OMP_MAPPING"
+      VARIABLES(167)="PTR_LEAFS_L0_OMP"
+      VARIABLES(166)="PERM_L0_OMP"
+      VARIABLES(165)="VIRT_L0_OMP"
+      VARIABLES(164)="PHYS_L0_OMP"
+      VARIABLES(163)="IPOOL_AFTER_L0_OMP"
+      VARIABLES(162)="IPOOL_BEFORE_L0_OMP"
+      VARIABLES(161)="THREAD_LA"
+      VARIABLES(160)="LL0_OMP_MAPPING"
+      VARIABLES(159)="L_VIRT_L0_OMP"
+      VARIABLES(158)="L_PHYS_L0_OMP"
+      VARIABLES(157)="LPOOL_BEFORE_L0_OMP"
+      VARIABLES(156)="LPOOL_AFTER_L0_OMP"
+      VARIABLES(155)="NBGRP"
+      VARIABLES(154)="LRGROUPS"
+      VARIABLES(153)="root"
+      VARIABLES(152)="WORKING"
+      VARIABLES(151)="IPTR_WORKING"
+      VARIABLES(150)="pad14"
+      VARIABLES(149)="SUP_PROC"
+      VARIABLES(148)="PIVNUL_LIST"
+      VARIABLES(147)="OOC_FILE_NAME_LENGTH"
+      VARIABLES(146)="OOC_FILE_NAMES"
+      VARIABLES(145)="OOC_NB_FILE_TYPE"
+      VARIABLES(144)="OOC_NB_FILES"
+      VARIABLES(143)="OOC_TOTAL_NB_NODES"
+      VARIABLES(142)="OOC_VADDR"
+      VARIABLES(141)="OOC_SIZE_OF_BLOCK"
+      VARIABLES(140)="pad13"
+      VARIABLES(139)="OOC_INODE_SEQUENCE"
+      VARIABLES(138)="OOC_MAX_NB_NODES_FOR_ZONE"
+      VARIABLES(137)="INSTANCE_NUMBER"
+      VARIABLES(136)="pad12"
+      VARIABLES(135)="CB_SON_SIZE"
+      VARIABLES(134)="DKEEP"
+      VARIABLES(133)="LWK_USER"
+      VARIABLES(132)="NBSA_LOCAL"
+      VARIABLES(131)="WK_USER"
+      VARIABLES(130)="CROIX_MANU"
+      VARIABLES(129)="SCHED_SBTR"
+      VARIABLES(128)="SCHED_GRP"
+      VARIABLES(127)="SCHED_DEP"
+      VARIABLES(126)="SBTR_ID"
+      VARIABLES(125)="DEPTH_FIRST_SEQ"
+      VARIABLES(124)="DEPTH_FIRST"
+      VARIABLES(123)="MY_NB_LEAF"
+      VARIABLES(122)="MY_FIRST_LEAF"
+      VARIABLES(121)="MY_ROOT_SBTR"
+      VARIABLES(120)="COST_TRAV"
+      VARIABLES(119)="MEM_SUBTREE"
+      VARIABLES(118)="RHSCOMP"
+      VARIABLES(117)="POSINRHSCOMP_COL"
+      VARIABLES(116)="POSINRHSCOMP_ROW"
+      VARIABLES(115)="POSINRHSCOMP_COL_ALLOC"
+      VARIABLES(114)="MEM_DIST"
+      VARIABLES(113)="I_AM_CAND"
+      VARIABLES(112)="TAB_POS_IN_PERE"
+      VARIABLES(111)="FUTURE_NIV2"
+      VARIABLES(110)="ISTEP_TO_INIV2"
+      VARIABLES(109)="CANDIDATES"
+      VARIABLES(108)="ELTPROC"
+      VARIABLES(107)="pad11"
+      VARIABLES(106)="NA_ELT"
+      VARIABLES(105)="LELTVAR"
+      VARIABLES(104)="NELT_loc"
+      VARIABLES(103)="DBLARR"
+      VARIABLES(102)="INTARR"
+      VARIABLES(101)="PROCNODE"
+      VARIABLES(100)="S"
+      VARIABLES(99)="PTRFAC"
+      VARIABLES(98)="PTLUST_S"
+      VARIABLES(97)="PROCNODE_STEPS"
+      VARIABLES(96)="NA"
+      VARIABLES(95)="FRTELT"
+      VARIABLES(94)="FRTPTR"
+      VARIABLES(93)="PTRAR"
+      VARIABLES(92)="FILS"
+      VARIABLES(91)="DAD_STEPS"
+      VARIABLES(90)="FRERE_STEPS"
+      VARIABLES(89)="Step2node"
+      VARIABLES(88)="ND_STEPS"
+      VARIABLES(87)="NE_STEPS"
+      VARIABLES(86)="STEP"
+      VARIABLES(85)="NBSA"
+      VARIABLES(84)="LNA"
+      VARIABLES(83)="KEEP"
+      VARIABLES(82)="Deficiency"
+      VARIABLES(81)="MAXIS1"
+      VARIABLES(80)="IS1"
+      VARIABLES(79)="IS"
+      VARIABLES(78)="BUFR"
+      VARIABLES(77)="POIDS"
+      VARIABLES(76)="LBUFR_BYTES"
+      VARIABLES(75)="LBUFR"
+      VARIABLES(74)="ASS_IRECV"
+      VARIABLES(73)="NSLAVES"
+      VARIABLES(72)="NPROCS"
+      VARIABLES(71)="MYID"
+      VARIABLES(70)="COMM_LOAD"
+      VARIABLES(69)="MYID_NODES"
+      VARIABLES(68)="COMM_NODES"
+      VARIABLES(67)="INST_Number"
+      VARIABLES(66)="MAX_SURF_MASTER"
+      VARIABLES(65)="KEEP8"
+      VARIABLES(64)="pad8"
+      VARIABLES(63)="WRITE_PROBLEM"
+      VARIABLES(62)="OOC_PREFIX"
+      VARIABLES(61)="OOC_TMPDIR"
+      VARIABLES(60)="VERSION_NUMBER"
+      VARIABLES(59)="MAPPING"
+      VARIABLES(58)="LISTVAR_SCHUR"
+      VARIABLES(57)="SCHUR_CINTERFACE"
+      VARIABLES(56)="SCHUR"
+      VARIABLES(55)="SIZE_SCHUR"
+      VARIABLES(54)="SCHUR_LLD"
+      VARIABLES(53)="SCHUR_NLOC"
+      VARIABLES(52)="SCHUR_MLOC"
+      VARIABLES(51)="NBLOCK"
+      VARIABLES(50)="MBLOCK"
+      VARIABLES(49)="NPCOL"
+      VARIABLES(48)="NPROW"
+      VARIABLES(47)="UNS_PERM"
+      VARIABLES(46)="SYM_PERM"
+      VARIABLES(45)="RINFOG"
+      VARIABLES(44)="RINFO"
+      VARIABLES(43)="CNTL"
+      VARIABLES(42)="COST_SUBTREES"
+      VARIABLES(41)="INFOG"
+      VARIABLES(40)="INFO"
+      VARIABLES(39)="ICNTL"
+      VARIABLES(38)="pad5"
+      VARIABLES(37)="LREDRHS"
+      VARIABLES(36)="LSOL_loc"
+      VARIABLES(35)="NZ_RHS"
+      VARIABLES(34)="NRHS"
+      VARIABLES(33)="LRHS"
+      VARIABLES(32)="ISOL_loc"
+      VARIABLES(31)="IRHS_PTR"
+      VARIABLES(30)="IRHS_SPARSE"
+      VARIABLES(29)="SOL_loc"
+      VARIABLES(28)="RHS_SPARSE"
+      VARIABLES(27)="REDRHS"
+      VARIABLES(26)="RHS"
+      VARIABLES(25)="PERM_IN"
+      VARIABLES(24)="pad4"
+      VARIABLES(23)="A_ELT"
+      VARIABLES(22)="ELTVAR"
+      VARIABLES(21)="ELTPTR"
+      VARIABLES(20)="pad3"
+      VARIABLES(19)="NELT"
+      VARIABLES(18)="pad2"
+      VARIABLES(17)="A_loc"
+      VARIABLES(16)="JCN_loc"
+      VARIABLES(15)="IRN_loc"
+      VARIABLES(14)="pad1"
+      VARIABLES(13)="NZ_loc"
+      VARIABLES(12)="pad0"
+      VARIABLES(11)="ROWSCA"
+      VARIABLES(10)="COLSCA"
+      VARIABLES(9)="JCN"
+      VARIABLES(8)="IRN"
+      VARIABLES(7)="A"
+      VARIABLES(6)="NZ"
+      VARIABLES(5)="N"
+      VARIABLES(4)="JOB"
+      VARIABLES(3)="PAR"
+      VARIABLES(2)="SYM"
+      VARIABLES(1)="COMM"
+      NBVARIABLES_ROOT=34
+      allocate(VARIABLES_ROOT(NBVARIABLES_ROOT))
+      VARIABLES_ROOT(34)="NB_SINGULAR_VALUES"
+      VARIABLES_ROOT(33)="SINGULAR_VALUES"
+      VARIABLES_ROOT(32)="SVD_VT"
+      VARIABLES_ROOT(31)="SVD_U"
+      VARIABLES_ROOT(30)="gridinit_done"
+      VARIABLES_ROOT(29)="yes"
+      VARIABLES_ROOT(28)="rootpad3"
+      VARIABLES_ROOT(27)="QR_RCOND"
+      VARIABLES_ROOT(26)="rootpad"
+      VARIABLES_ROOT(25)="RHS_ROOT"
+      VARIABLES_ROOT(24)="rootpad2"
+      VARIABLES_ROOT(23)="QR_TAU"
+      VARIABLES_ROOT(22)="SCHUR_POINTER"
+      VARIABLES_ROOT(21)="RHS_CNTR_MASTER_ROOT"
+      VARIABLES_ROOT(20)="rootpad1"
+      VARIABLES_ROOT(19)="IPIV"
+      VARIABLES_ROOT(18)="RG2L_COL"
+      VARIABLES_ROOT(17)="RG2L_ROW"
+      VARIABLES_ROOT(16)="rootpad0"
+      VARIABLES_ROOT(15)="LPIV"
+      VARIABLES_ROOT(14)="CNTXT_BLACS"
+      VARIABLES_ROOT(13)="DESCRIPTOR"
+      VARIABLES_ROOT(12)="TOT_ROOT_SIZE"
+      VARIABLES_ROOT(11)="ROOT_SIZE"
+      VARIABLES_ROOT(10)="RHS_NLOC"
+      VARIABLES_ROOT(9)="SCHUR_LLD"
+      VARIABLES_ROOT(8)="SCHUR_NLOC"
+      VARIABLES_ROOT(7)="SCHUR_MLOC"
+      VARIABLES_ROOT(6)="MYCOL"
+      VARIABLES_ROOT(5)="MYROW"
+      VARIABLES_ROOT(4)="NPCOL"
+      VARIABLES_ROOT(3)="NPROW"
+      VARIABLES_ROOT(2)="NBLOCK"
+      VARIABLES_ROOT(1)="MBLOCK"
+      if(((id%ICNTL(3).GT.0).AND.(id%MYID .EQ. MASTER))) then
+         write(*,*) "DUMPING MUMPS STRUCTURE IN FILE:",OUTFILE
+      endif
+      error=.false.
+      write (STRING_ID, '(i3)') id%MYID
+      OUT=42+id%MYID
+      OUTFILEMAIN=trim(adjustl(OUTFILE)) // trim(adjustl(STRING_ID))
+      open(UNIT=OUT,FILE=OUTFILEMAIN,STATUS='replace',
+     &     form='unformatted',iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN DMUMPS_STOP CANNOT OPEN FILE: "
+     &        //trim(adjustl(OUTFILEMAIN))
+         error=.true.
+         goto 100
+      endif      
+      DO i1=1,NBVARIABLES 
+         SELECT CASE(trim(adjustl(VARIABLES(i1))))
+         CASE("COMM") 
+         CASE("SYM")
+         CASE("PAR")
+         CASE("JOB")
+            write(OUT) id%JOB
+         CASE("N")
+            write(OUT) id%N
+         CASE("ICNTL")
+            write(OUT) id%ICNTL
+         CASE("INFO")
+            write(OUT) id%INFO
+         CASE("INFOG")
+            write(OUT) id%INFOG
+         CASE("COST_SUBTREES")
+            write(OUT) id%COST_SUBTREES
+         CASE("CNTL")
+            write(OUT) id%CNTL
+         CASE("RINFO")
+            write(OUT) id%RINFO
+         CASE("RINFOG")
+            write(OUT) id%RINFOG
+         CASE("KEEP8")
+            write(OUT) id%KEEP8
+         CASE("KEEP")
+            write(OUT) id%KEEP
+         CASE("DKEEP")
+            write(OUT) id%DKEEP    
+         CASE("NZ")
+            write(OUT) id%NZ
+         CASE("A")
+            IF(associated(id%A)) THEN
+               write(OUT) size(id%A,1)
+               write(OUT) id%A
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IRN")
+            IF(associated(id%IRN)) THEN
+               write(OUT) size(id%IRN,1)
+               write(OUT) id%IRN
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("JCN")
+            IF(associated(id%JCN)) THEN
+               write(OUT) size(id%JCN,1)
+               write(OUT) id%JCN
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("COLSCA")
+            IF(associated(id%COLSCA)) THEN
+               write(OUT) size(id%COLSCA,1)
+               write(OUT) id%COLSCA
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF 
+         CASE("ROWSCA")
+            IF(associated(id%ROWSCA)) THEN
+               write(OUT) size(id%ROWSCA,1)
+               write(OUT) id%ROWSCA
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NZ_loc")
+            write(OUT) id%NZ_loc
+         CASE("IRN_loc")
+            IF(associated(id%IRN_loc)) THEN
+               write(OUT) size(id%IRN_loc,1)
+               write(OUT) id%IRN_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("JCN_loc")
+            IF(associated(id%JCN_loc)) THEN
+               write(OUT) size(id%JCN_loc,1)
+               write(OUT) id%JCN_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("A_loc")
+            IF(associated(id%A_loc)) THEN
+               write(OUT) size(id%A_loc,1)
+               write(OUT) id%A_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NELT")
+            write(OUT) id%NELT
+         CASE("ELTPTR")
+            IF(associated(id%ELTPTR)) THEN
+               write(OUT) size(id%ELTPTR,1)
+               write(OUT) id%ELTPTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("ELTVAR")
+            IF(associated(id%ELTVAR)) THEN
+               write(OUT) size(id%ELTVAR,1)
+               write(OUT) id%ELTVAR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("A_ELT")
+            IF(associated(id%A_ELT)) THEN
+               write(OUT) size(id%A_ELT,1)
+               write(OUT) id%A_ELT
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PERM_IN")
+            IF(associated(id%PERM_IN)) THEN
+               write(OUT) size(id%PERM_IN,1)
+               write(OUT) id%PERM_IN
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("RHS")
+            IF(associated(id%RHS)) THEN
+               write(OUT) size(id%RHS,1)
+               write(OUT) id%RHS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("REDRHS")
+            IF(associated(id%REDRHS)) THEN
+               write(OUT) size(id%REDRHS,1)
+               write(OUT) id%REDRHS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("RHS_SPARSE")
+            IF(associated(id%RHS_SPARSE)) THEN
+               write(OUT) size(id%RHS_SPARSE,1)
+               write(OUT) id%RHS_SPARSE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SOL_loc")
+            IF(associated(id%SOL_loc)) THEN
+               write(OUT) size(id%SOL_loc,1)
+               write(OUT) id%SOL_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IRHS_SPARSE")
+            IF(associated(id%IRHS_SPARSE)) THEN
+               write(OUT) size(id%IRHS_SPARSE,1)
+               write(OUT) id%IRHS_SPARSE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IRHS_PTR")
+            IF(associated(id%IRHS_PTR)) THEN
+               write(OUT) size(id%IRHS_PTR,1)
+               write(OUT) id%IRHS_PTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("ISOL_loc")
+            IF(associated(id%ISOL_loc)) THEN
+               write(OUT) size(id%ISOL_loc,1)
+               write(OUT) id%ISOL_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("LRHS")
+            write(OUT) id%LRHS
+         CASE("NRHS")
+            write(OUT) id%NRHS
+         CASE("NZ_RHS")
+            write(OUT) id%NZ_RHS
+         CASE("LSOL_loc")
+            write(OUT) id%LSOL_loc
+         CASE("LREDRHS")
+            write(OUT) id%LREDRHS
+         CASE("SYM_PERM")
+            IF(associated(id%SYM_PERM)) THEN
+               write(OUT) size(id%SYM_PERM,1)
+               write(OUT) id%SYM_PERM
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("UNS_PERM")
+            IF(associated(id%UNS_PERM)) THEN
+               write(OUT) size(id%UNS_PERM,1)
+               write(OUT) id%UNS_PERM
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NPROW")
+            write(OUT) id%NPROW
+         CASE("NPCOL")
+            write(OUT) id%NPCOL
+         CASE("MBLOCK")
+            write(OUT) id%MBLOCK
+         CASE("NBLOCK")
+            write(OUT) id%NBLOCK
+         CASE("SCHUR_MLOC")
+            write(OUT) id%SCHUR_MLOC
+         CASE("SCHUR_NLOC")
+            write(OUT) id%SCHUR_NLOC
+         CASE("SCHUR_LLD")
+            write(OUT) id%SCHUR_LLD
+         CASE("SIZE_SCHUR")
+            write(OUT) id%SIZE_SCHUR
+         CASE("SCHUR")
+            IF(associated(id%SCHUR)) THEN
+               write(OUT) size(id%SCHUR,1)
+               write(OUT) id%SCHUR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SCHUR_CINTERFACE")
+            IF(associated(id%SCHUR_CINTERFACE)) THEN
+               write(OUT) size(id%SCHUR_CINTERFACE,1)
+               write(OUT) id%SCHUR_CINTERFACE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("LISTVAR_SCHUR")
+            IF(associated(id%LISTVAR_SCHUR)) THEN
+               write(OUT) size(id%LISTVAR_SCHUR,1)
+               write(OUT) id%LISTVAR_SCHUR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MAPPING")
+            IF(associated(id%MAPPING)) THEN
+               write(OUT) size(id%MAPPING,1)
+               write(OUT) id%MAPPING
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("VERSION_NUMBER")
+            write(OUT) id%VERSION_NUMBER
+         CASE("OOC_TMPDIR")
+            write(OUT) id%OOC_TMPDIR
+         CASE("OOC_PREFIX")
+            write(OUT) id%OOC_PREFIX
+         CASE("WRITE_PROBLEM")
+            write(OUT) id%WRITE_PROBLEM
+         CASE("MAX_SURF_MASTER")
+            write(OUT) id%MAX_SURF_MASTER
+         CASE("INST_Number")
+            write(OUT) id%INST_Number
+         CASE("COMM_NODES")
+            write(OUT) id%COMM_NODES
+         CASE("MYID_NODES")
+            write(OUT) id%MYID_NODES
+         CASE("COMM_LOAD")
+            write(OUT) id%COMM_LOAD
+         CASE("MYID")
+            write(OUT) id%MYID
+         CASE("NPROCS")
+            write(OUT) id%NPROCS
+         CASE("NSLAVES")
+            write(OUT) id%NSLAVES
+         CASE("ASS_IRECV")
+            write(OUT) id%ASS_IRECV
+         CASE("LBUFR")
+            write(OUT) id%LBUFR
+         CASE("LBUFR_BYTES")
+            write(OUT) id%LBUFR_BYTES
+         CASE("POIDS")
+            IF(associated(id%POIDS)) THEN 
+               write(OUT) size(id%POIDS,1)
+               write(OUT) id%POIDS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("BUFR")
+            IF(associated(id%BUFR)) THEN 
+               write(OUT) size(id%BUFR,1)
+               write(OUT) id%BUFR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IS")
+            IF(associated(id%IS)) THEN 
+               write(OUT) size(id%IS,1)
+               write(OUT) id%IS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IS1")
+            IF(associated(id%IS1)) THEN 
+               write(OUT) size(id%IS1,1)
+               write(OUT) id%IS1
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MAXIS1")
+            write(OUT) id%MAXIS1
+         CASE("Deficiency")
+            write(OUT) id%Deficiency
+         CASE("LNA")
+            write(OUT) id%LNA
+         CASE("NBSA")
+            write(OUT) id%NBSA
+         CASE("STEP")
+            IF(associated(id%STEP)) THEN
+               write(OUT) size(id%STEP,1)
+               write(OUT) id%STEP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NE_STEPS")
+            IF(associated(id%NE_STEPS)) THEN
+               write(OUT) size(id%NE_STEPS,1)
+               write(OUT) id%NE_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("ND_STEPS")
+            IF(associated(id%ND_STEPS)) THEN
+               write(OUT) size(id%ND_STEPS,1)
+               write(OUT) id%ND_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("Step2node")
+            IF(associated(id%Step2node)) THEN
+               write(OUT) size(id%Step2node,1)
+               write(OUT) id%Step2node
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FRERE_STEPS")
+            IF(associated(id%FRERE_STEPS)) THEN
+               write(OUT) size(id%FRERE_STEPS,1)
+               write(OUT) id%FRERE_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DAD_STEPS")
+            IF(associated(id%DAD_STEPS)) THEN
+               write(OUT) size(id%DAD_STEPS,1)
+               write(OUT) id%DAD_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FILS")
+            IF(associated(id%FILS)) THEN
+               write(OUT) size(id%FILS,1)
+               write(OUT) id%FILS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PTRAR")
+            IF(associated(id%PTRAR)) THEN
+               write(OUT) size(id%PTRAR,1)
+               write(OUT) id%PTRAR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FRTPTR")
+            IF(associated(id%FRTPTR)) THEN
+               write(OUT) size(id%FRTPTR,1)
+               write(OUT) id%FRTPTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FRTELT")
+            IF(associated(id%FRTELT)) THEN
+               write(OUT) size(id%FRTELT,1)
+               write(OUT) id%FRTELT
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NA")
+            IF(associated(id%NA)) THEN
+               write(OUT) size(id%NA,1)
+               write(OUT) id%NA
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PROCNODE_STEPS")
+            IF(associated(id%PROCNODE_STEPS)) THEN
+               write(OUT) size(id%PROCNODE_STEPS,1)
+               write(OUT) id%PROCNODE_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PTLUST_S")
+            IF(associated(id%PTLUST_S)) THEN
+               write(OUT) size(id%PTLUST_S,1)
+               write(OUT) id%PTLUST_S
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PTRFAC")
+            IF(associated(id%PTRFAC)) THEN
+               write(OUT) size(id%PTRFAC,1)
+               write(OUT) id%PTRFAC
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("S")
+            IF(associated(id%S)) THEN
+               write(OUT) id%KEEP8(23)
+               write(OUT) id%S
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PROCNODE")
+            IF(associated(id%PROCNODE)) THEN
+               write(OUT) size(id%PROCNODE,1)
+               write(OUT) id%PROCNODE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("INTARR")
+            IF(associated(id%INTARR)) THEN
+               write(OUT) size(id%INTARR,1)
+               write(OUT) id%INTARR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DBLARR")
+            IF(associated(id%DBLARR)) THEN
+               write(OUT) size(id%DBLARR,1)
+               write(OUT) id%DBLARR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NELT_loc")
+            write(OUT) id%NELT_loc
+         CASE("LELTVAR")
+            write(OUT) id%LELTVAR
+         CASE("NA_ELT")
+            write(OUT) id%NA_ELT
+         CASE("ELTPROC")
+            IF(associated(id%ELTPROC)) THEN
+               write(OUT) size(id%ELTPROC,1)
+               write(OUT) id%ELTPROC
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("CANDIDATES")
+            IF(associated(id%CANDIDATES)) THEN
+               write(OUT) size(id%CANDIDATES,1)
+     &              ,size(id%CANDIDATES,2)
+               write(OUT) id%CANDIDATES
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("ISTEP_TO_INIV2")
+            IF(associated(id%ISTEP_TO_INIV2)) THEN
+               write(OUT) size(id%ISTEP_TO_INIV2,1)
+               write(OUT) id%ISTEP_TO_INIV2
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FUTURE_NIV2")
+            IF(associated(id%FUTURE_NIV2)) THEN
+               write(OUT) size(id%FUTURE_NIV2,1)
+               write(OUT) id%FUTURE_NIV2
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("TAB_POS_IN_PERE")
+            IF(associated(id%TAB_POS_IN_PERE)) THEN
+               write(OUT) size(id%TAB_POS_IN_PERE,1)
+     &              ,size(id%TAB_POS_IN_PERE,2)
+               write(OUT) id%TAB_POS_IN_PERE
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("I_AM_CAND")
+            IF(associated(id%I_AM_CAND)) THEN
+               write(OUT) size(id%I_AM_CAND,1)
+               write(OUT) id%I_AM_CAND
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MEM_DIST")
+            IF(associated(id%MEM_DIST)) THEN
+               write(OUT) size(id%MEM_DIST,1)
+               write(OUT) id%MEM_DIST
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("POSINRHSCOMP_ROW")
+            IF(associated(id%POSINRHSCOMP_ROW)) THEN 
+               write(OUT) size(id%POSINRHSCOMP_ROW,1)
+               write(OUT) id%POSINRHSCOMP_ROW
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("POSINRHSCOMP_COL_ALLOC")
+            write(OUT) id%POSINRHSCOMP_COL_ALLOC
+         CASE("POSINRHSCOMP_COL")
+            IF(associated(id%POSINRHSCOMP_COL)) THEN
+               IF(id%POSINRHSCOMP_COL_ALLOC) THEN
+                  write(OUT) size(id%POSINRHSCOMP_COL,1)
+                  write(OUT) id%POSINRHSCOMP_COL
+               ELSE
+                  write(OUT) size(id%POSINRHSCOMP_COL,1)
+                  write(OUT) -999
+               ENDIF
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("RHSCOMP")
+            IF(associated(id%RHSCOMP)) THEN
+               write(OUT) size(id%RHSCOMP,1)
+               write(OUT) id%RHSCOMP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MEM_SUBTREE")
+            IF(associated(id%MEM_SUBTREE)) THEN
+               write(OUT) size(id%MEM_SUBTREE,1)
+               write(OUT) id%MEM_SUBTREE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("COST_TRAV")
+            IF(associated(id%COST_TRAV)) THEN
+               write(OUT) size(id%COST_TRAV,1)
+               write(OUT) id%COST_TRAV
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MY_ROOT_SBTR")
+            IF(associated(id%MY_ROOT_SBTR)) THEN
+               write(OUT) size(id%MY_ROOT_SBTR,1)
+               write(OUT) id%MY_ROOT_SBTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MY_FIRST_LEAF")
+            IF(associated(id%MY_FIRST_LEAF)) THEN
+               write(OUT) size(id%MY_FIRST_LEAF,1)
+               write(OUT) id%MY_FIRST_LEAF
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MY_NB_LEAF")
+            IF(associated(id%MY_NB_LEAF)) THEN
+               write(OUT) size(id%MY_NB_LEAF,1)
+               write(OUT) id%MY_NB_LEAF
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DEPTH_FIRST")
+            IF(associated(id%DEPTH_FIRST)) THEN
+               write(OUT) size(id%DEPTH_FIRST,1)
+               write(OUT) id%DEPTH_FIRST
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DEPTH_FIRST_SEQ")
+            IF(associated(id%DEPTH_FIRST_SEQ)) THEN
+               write(OUT) size(id%DEPTH_FIRST_SEQ,1)
+               write(OUT) id%DEPTH_FIRST_SEQ
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SBTR_ID")
+            IF(associated(id%SBTR_ID)) THEN
+               write(OUT) size(id%SBTR_ID,1)
+               write(OUT) id%SBTR_ID
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SCHED_DEP")
+            IF(associated(id%SCHED_DEP)) THEN
+               write(OUT) size(id%SCHED_DEP,1)
+               write(OUT) id%SCHED_DEP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SCHED_GRP")
+            IF(associated(id%SCHED_GRP)) THEN
+               write(OUT) size(id%SCHED_GRP,1)
+               write(OUT) id%SCHED_GRP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("CROIX_MANU")
+            IF(associated(id%CROIX_MANU)) THEN
+               write(OUT) size(id%CROIX_MANU,1)
+               write(OUT) id%CROIX_MANU
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("WK_USER")
+            IF(associated(id%WK_USER)) THEN
+               write(OUT) id%KEEP8(24)
+               write(OUT) id%WK_USER
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NBSA_LOCAL")
+            write(OUT) id%NBSA_LOCAL
+         CASE("LWK_USER")
+            write(OUT) id%LWK_USER
+         CASE("CB_SON_SIZE")
+            IF(associated(id%CB_SON_SIZE)) THEN
+               write(OUT) size(id%CB_SON_SIZE,1)
+               write(OUT) id%CB_SON_SIZE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("INSTANCE_NUMBER")
+            write(OUT) id%INSTANCE_NUMBER
+         CASE("OOC_MAX_NB_NODES_FOR_ZONE")
+            write(OUT) id%OOC_MAX_NB_NODES_FOR_ZONE
+         CASE("OOC_INODE_SEQUENCE")
+            IF(associated(id%OOC_INODE_SEQUENCE)) THEN
+               write(OUT) size(id%OOC_INODE_SEQUENCE,1)
+     &              ,size(id%OOC_INODE_SEQUENCE,2)
+               write(OUT) id%OOC_INODE_SEQUENCE
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_SIZE_OF_BLOCK")
+            IF(associated(id%OOC_SIZE_OF_BLOCK)) THEN
+               write(OUT) size(id%OOC_SIZE_OF_BLOCK,1)
+     &              ,size(id%OOC_SIZE_OF_BLOCK,2)  
+               write(OUT) id%OOC_SIZE_OF_BLOCK
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_VADDR")
+            IF(associated(id%OOC_VADDR)) THEN
+               write(OUT) size(id%OOC_VADDR,1),size(id%OOC_VADDR,2)
+               write(OUT) id%OOC_VADDR
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_TOTAL_NB_NODES")
+            IF(associated(id%OOC_TOTAL_NB_NODES)) THEN
+               write(OUT) size(id%OOC_TOTAL_NB_NODES,1)
+               write(OUT) id%OOC_TOTAL_NB_NODES
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_NB_FILES")
+            IF(associated(id%OOC_NB_FILES)) THEN
+               write(OUT) size(id%OOC_NB_FILES,1)
+               write(OUT) id%OOC_NB_FILES
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_NB_FILE_TYPE")
+            write(OUT) id%OOC_NB_FILE_TYPE
+         CASE("OOC_FILE_NAMES")
+            IF(associated(id%OOC_FILE_NAMES)) THEN
+               write(OUT) size(id%OOC_FILE_NAMES,1)
+     &              ,size(id%OOC_FILE_NAMES,2)
+               write(OUT) id%OOC_FILE_NAMES
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_FILE_NAME_LENGTH")
+            IF(associated(id%OOC_FILE_NAME_LENGTH)) THEN
+               write(OUT) size(id%OOC_FILE_NAME_LENGTH,1)
+               write(OUT) id%OOC_FILE_NAME_LENGTH
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PIVNUL_LIST")
+            IF(associated(id%PIVNUL_LIST)) THEN
+               write(OUT) size(id%PIVNUL_LIST,1)
+               write(OUT) id%PIVNUL_LIST
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SUP_PROC")
+            IF(associated(id%SUP_PROC)) THEN
+               write(OUT) size(id%SUP_PROC,1),size(id%SUP_PROC,2)
+               write(OUT) id%SUP_PROC
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("IPTR_WORKING")
+            IF(associated(id%IPTR_WORKING)) THEN
+               write(OUT) size(id%IPTR_WORKING,1)
+               write(OUT) id%IPTR_WORKING
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("WORKING")
+            IF(associated(id%WORKING)) THEN
+               write(OUT) size(id%WORKING,1)
+               write(OUT) id%WORKING
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("root")
+         CASE("NBGRP")
+           write(OUT) id%NBGRP
+        CASE("LRGROUPS")
+           IF(associated(id%LRGROUPS)) THEN
+              write(OUT) size(id%LRGROUPS,1)
+              write(OUT) id%LRGROUPS
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("SCHED_SBTR")
+           IF(associated(id%SCHED_SBTR)) THEN
+              write(OUT) size(id%SCHED_SBTR,1)
+              write(OUT) id%SCHED_SBTR
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("LPOOL_AFTER_L0_OMP")
+           write(OUT) id%LPOOL_AFTER_L0_OMP
+        CASE("LPOOL_BEFORE_L0_OMP")
+           write(OUT) id%LPOOL_BEFORE_L0_OMP
+        CASE("L_PHYS_L0_OMP")
+           write(OUT) id%L_PHYS_L0_OMP
+        CASE("L_VIRT_L0_OMP")        
+           write(OUT) id%L_VIRT_L0_OMP
+        CASE("LL0_OMP_MAPPING")
+           write(OUT) id%LL0_OMP_MAPPING
+        CASE("THREAD_LA")
+           write(OUT) id%THREAD_LA
+        CASE("IPOOL_AFTER_L0_OMP")
+           IF(associated(id%IPOOL_AFTER_L0_OMP)) THEN
+              write(OUT) size(id%IPOOL_AFTER_L0_OMP,1)
+              write(OUT) id%IPOOL_AFTER_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("IPOOL_BEFORE_L0_OMP")
+           IF(associated(id%IPOOL_BEFORE_L0_OMP)) THEN
+              write(OUT) size(id%IPOOL_BEFORE_L0_OMP,1)
+              write(OUT) id%IPOOL_BEFORE_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("PHYS_L0_OMP")
+           IF(associated(id%PHYS_L0_OMP)) THEN
+              write(OUT) size(id%PHYS_L0_OMP,1)
+              write(OUT) id%PHYS_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("VIRT_L0_OMP")
+           IF(associated(id%VIRT_L0_OMP)) THEN
+              write(OUT) size(id%VIRT_L0_OMP,1)
+              write(OUT) id%VIRT_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("PERM_L0_OMP")
+           IF(associated(id%PERM_L0_OMP)) THEN
+              write(OUT) size(id%PERM_L0_OMP,1)
+              write(OUT) id%PERM_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("PTR_LEAFS_L0_OMP")
+           IF(associated(id%PTR_LEAFS_L0_OMP)) THEN
+              write(OUT) size(id%PTR_LEAFS_L0_OMP,1)
+              write(OUT) id%PTR_LEAFS_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("L0_OMP_MAPPING")
+          IF(associated(id%L0_OMP_MAPPING)) THEN
+              write(OUT) size(id%L0_OMP_MAPPING,1)
+              write(OUT) id%L0_OMP_MAPPING
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("IF_RESTARTING")
+           write(OUT) id%IF_RESTARTING
+      CASE("SINGULAR_VALUES")
+         IF(associated(id%SINGULAR_VALUES)) THEN
+            write(OUT) size(id%SINGULAR_VALUES,1)
+            write(OUT) id%SINGULAR_VALUES
+         ELSE
+            write(OUT) -999,-998
+            write(OUT) -999
+         ENDIF 
+      CASE("NB_SINGULAR_VALUES")
+        write(OUT) id%NB_SINGULAR_VALUES
+        CASE("pad0","pad1","pad2","pad3","pad4","pad5","pad8","pad11",
+     &          "pad111", "pad12","pad13","pad14")
+        CASE DEFAULT
+           id%INFOG(1)=-92
+           write(*,*) "IN DMUMPS_STOP UNKNOWN VARIABLE IN STRUCTURE: "
+     &          // trim(adjustl(VARIABLES(i1)))
+           error=.true.
+           goto 100
+        END SELECT
+      ENDDO
+ 100  continue
+      CLOSE(OUT)
+      if(error) goto 101
+      OUTROOT=OUT+1000
+      OUTFILEROOT=trim(adjustl(OUTFILE)) // trim(adjustl("ROOT")) 
+     &     // trim(adjustl(STRING_ID))
+      open(UNIT=OUTROOT,FILE=OUTFILEROOT,STATUS='replace',
+     &     form='unformatted',iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN DMUMPS_STOP CANNOT OPEN FILE: "
+     &        //trim(adjustl(OUTFILEROOT))
+         goto 100
+      endif
+      DO i2=1,NBVARIABLES_ROOT
+         SELECT CASE(VARIABLES_ROOT(i2))
+      CASE("MBLOCK")
+         write(OUTROOT) id%root%MBLOCK
+      CASE("NBLOCK")
+         write(OUTROOT) id%root%NBLOCK
+      CASE("NPROW")
+         write(OUTROOT) id%root%NPROW
+      CASE("NPCOL")
+         write(OUTROOT) id%root%NPCOL
+      CASE("MYROW")
+         write(OUTROOT) id%root%MYROW
+      CASE("MYCOL")
+         write(OUTROOT) id%root%MYCOL
+      CASE("SCHUR_MLOC")
+         write(OUTROOT) id%root%SCHUR_MLOC
+      CASE("SCHUR_NLOC")
+         write(OUTROOT) id%root%SCHUR_NLOC
+      CASE("SCHUR_LLD")
+         write(OUTROOT) id%root%SCHUR_LLD
+      CASE("RHS_NLOC")
+         write(OUTROOT) id%root%RHS_NLOC
+      CASE("ROOT_SIZE")
+         write(OUTROOT) id%root%ROOT_SIZE
+      CASE("TOT_ROOT_SIZE")
+         write(OUTROOT) id%root%TOT_ROOT_SIZE
+      CASE("DESCRIPTOR")
+         write(OUTROOT) id%root%DESCRIPTOR
+      CASE("CNTXT_BLACS")
+         write(OUTROOT) id%root%CNTXT_BLACS
+      CASE("LPIV")
+         write(OUTROOT) id%root%LPIV
+      CASE("RG2L_ROW")
+         IF(associated(id%root%RG2L_ROW)) THEN
+            write(OUTROOT) size(id%root%RG2L_ROW,1)
+            write(OUTROOT) id%root%RG2L_ROW
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("RG2L_COL")
+         IF(associated(id%root%RG2L_COL)) THEN
+            write(OUTROOT) size(id%root%RG2L_COL,1)
+            write(OUTROOT) id%root%RG2L_COL
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("IPIV")
+         IF(associated(id%root%IPIV)) THEN
+            write(OUTROOT) size(id%root%IPIV,1)
+            write(OUTROOT) id%root%IPIV
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("RHS_CNTR_MASTER_ROOT")
+         IF(associated(id%root%RHS_CNTR_MASTER_ROOT)) THEN
+            write(OUTROOT) size(id%root%RHS_CNTR_MASTER_ROOT,1)
+            write(OUTROOT) id%root%RHS_CNTR_MASTER_ROOT
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("SCHUR_POINTER")
+         IF(associated(id%root%SCHUR_POINTER)) THEN
+            write(OUTROOT) size(id%root%SCHUR_POINTER,1)
+            write(OUTROOT) id%root%SCHUR_POINTER
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("QR_TAU")
+         IF(associated(id%root%QR_TAU)) THEN
+            write(OUTROOT) size(id%root%QR_TAU,1)
+            write(OUTROOT) id%root%QR_TAU
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("RHS_ROOT")
+         IF(associated(id%root%RHS_ROOT)) THEN
+            write(OUTROOT) size(id%root%RHS_ROOT,1)
+     &           ,size(id%root%RHS_ROOT,2)
+            write(OUTROOT) id%root%RHS_ROOT
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF
+      CASE("QR_RCOND")
+         write(OUTROOT) id%root%QR_RCOND
+      CASE("yes")
+         write(OUTROOT) id%root%yes
+      CASE("gridinit_done")
+         write(OUTROOT) id%root%gridinit_done
+      CASE("SVD_U")
+         IF(associated(id%root%SVD_U)) THEN
+            write(OUTROOT) size(id%root%SVD_U,1)
+     &           ,size(id%root%SVD_U,2)
+            write(OUTROOT) id%root%SVD_U
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF   
+      CASE("SVD_VT")
+         IF(associated(id%root%SVD_VT)) THEN
+            write(OUTROOT) size(id%root%SVD_VT,1)
+     &           ,size(id%root%SVD_VT,2)
+            write(OUTROOT) id%root%SVD_VT
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF  
+      CASE("SINGULAR_VALUES")
+         IF(associated(id%root%SINGULAR_VALUES)) THEN
+            write(OUTROOT) size(id%root%SINGULAR_VALUES,1)
+            write(OUTROOT) id%root%SINGULAR_VALUES
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF 
+      CASE("NB_SINGULAR_VALUES")
+         write(OUTROOT) id%root%NB_SINGULAR_VALUES
+      CASE("rootpad0","rootpad1","rootpad2","rootpad",
+     &        "rootpad3")
+      CASE DEFAULT
+         id%INFOG(1)=-92
+         write(*,*) "IN DMUMPS_STOP UNKNOWN VARIABLE"
+     &        // "IN ROOT: " // trim(adjustl(VARIABLES_ROOT(i2)))
+         goto 101
+      END SELECT  
+      ENDDO
+ 101  continue
+      CLOSE(OUTROOT)
+      END SUBROUTINE DMUMPS_STOP
+      SUBROUTINE DMUMPS_RESTART(id,INFILE)
+      USE DMUMPS_STRUC_DEF
+      IMPLICIT NONE
+      INCLUDE 'mpif.h'
+      INTEGER::IN,err,NBVARIABLES,i1,NBVARIABLES_ROOT,dummy
+      INTEGER:: i2,size_array1,size_array2,INROOT
+      CHARACTER(len=100),allocatable,DIMENSION(:)::VARIABLES
+      CHARACTER(len=100),allocatable,DIMENSION(:)::VARIABLES_ROOT
+      CHARACTER(len=*), intent(in):: INFILE
+      CHARACTER(len=100):: INFILEMAIN,INFILEROOT
+      CHARACTER(len=3) :: STRING_ID
+      LOGICAL :: error
+      INTEGER MASTER
+      PARAMETER( MASTER = 0 )
+      TYPE (DMUMPS_STRUC) :: id
+      error=.false.
+      write (STRING_ID, '(i3)') id%MYID
+      NBVARIABLES=171
+      allocate(VARIABLES(NBVARIABLES))
+      VARIABLES(171)="NB_SINGULAR_VALUES"
+      VARIABLES(170)="SINGULAR_VALUES"
+      VARIABLES(169)="IF_RESTARTING"
+      VARIABLES(168)="L0_OMP_MAPPING"
+      VARIABLES(167)="PTR_LEAFS_L0_OMP"
+      VARIABLES(166)="PERM_L0_OMP"
+      VARIABLES(165)="VIRT_L0_OMP"
+      VARIABLES(164)="PHYS_L0_OMP"
+      VARIABLES(163)="IPOOL_AFTER_L0_OMP"
+      VARIABLES(162)="IPOOL_BEFORE_L0_OMP"
+      VARIABLES(161)="THREAD_LA"
+      VARIABLES(160)="LL0_OMP_MAPPING"
+      VARIABLES(159)="L_VIRT_L0_OMP"
+      VARIABLES(158)="L_PHYS_L0_OMP"
+      VARIABLES(157)="LPOOL_BEFORE_L0_OMP"
+      VARIABLES(156)="LPOOL_AFTER_L0_OMP"
+      VARIABLES(155)="NBGRP"
+      VARIABLES(154)="LRGROUPS"
+      VARIABLES(153)="root"
+      VARIABLES(152)="WORKING"
+      VARIABLES(151)="IPTR_WORKING"
+      VARIABLES(150)="pad14"
+      VARIABLES(149)="SUP_PROC"
+      VARIABLES(148)="PIVNUL_LIST"
+      VARIABLES(147)="OOC_FILE_NAME_LENGTH"
+      VARIABLES(146)="OOC_FILE_NAMES"
+      VARIABLES(145)="OOC_NB_FILE_TYPE"
+      VARIABLES(144)="OOC_NB_FILES"
+      VARIABLES(143)="OOC_TOTAL_NB_NODES"
+      VARIABLES(142)="OOC_VADDR"
+      VARIABLES(141)="OOC_SIZE_OF_BLOCK"
+      VARIABLES(140)="pad13"
+      VARIABLES(139)="OOC_INODE_SEQUENCE"
+      VARIABLES(138)="OOC_MAX_NB_NODES_FOR_ZONE"
+      VARIABLES(137)="INSTANCE_NUMBER"
+      VARIABLES(136)="pad12"
+      VARIABLES(135)="CB_SON_SIZE"
+      VARIABLES(134)="DKEEP"
+      VARIABLES(133)="LWK_USER"
+      VARIABLES(132)="NBSA_LOCAL"
+      VARIABLES(131)="WK_USER"
+      VARIABLES(130)="CROIX_MANU"
+      VARIABLES(129)="SCHED_SBTR"
+      VARIABLES(128)="SCHED_GRP"
+      VARIABLES(127)="SCHED_DEP"
+      VARIABLES(126)="SBTR_ID"
+      VARIABLES(125)="DEPTH_FIRST_SEQ"
+      VARIABLES(124)="DEPTH_FIRST"
+      VARIABLES(123)="MY_NB_LEAF"
+      VARIABLES(122)="MY_FIRST_LEAF"
+      VARIABLES(121)="MY_ROOT_SBTR"
+      VARIABLES(120)="COST_TRAV"
+      VARIABLES(119)="MEM_SUBTREE"
+      VARIABLES(118)="RHSCOMP"
+      VARIABLES(117)="POSINRHSCOMP_COL"
+      VARIABLES(116)="POSINRHSCOMP_ROW"
+      VARIABLES(115)="POSINRHSCOMP_COL_ALLOC"
+      VARIABLES(114)="MEM_DIST"
+      VARIABLES(113)="I_AM_CAND"
+      VARIABLES(112)="TAB_POS_IN_PERE"
+      VARIABLES(111)="FUTURE_NIV2"
+      VARIABLES(110)="ISTEP_TO_INIV2"
+      VARIABLES(109)="CANDIDATES"
+      VARIABLES(108)="ELTPROC"
+      VARIABLES(107)="pad11"
+      VARIABLES(106)="NA_ELT"
+      VARIABLES(105)="LELTVAR"
+      VARIABLES(104)="NELT_loc"
+      VARIABLES(103)="DBLARR"
+      VARIABLES(102)="INTARR"
+      VARIABLES(101)="PROCNODE"
+      VARIABLES(100)="S"
+      VARIABLES(99)="PTRFAC"
+      VARIABLES(98)="PTLUST_S"
+      VARIABLES(97)="PROCNODE_STEPS"
+      VARIABLES(96)="NA"
+      VARIABLES(95)="FRTELT"
+      VARIABLES(94)="FRTPTR"
+      VARIABLES(93)="PTRAR"
+      VARIABLES(92)="FILS"
+      VARIABLES(91)="DAD_STEPS"
+      VARIABLES(90)="FRERE_STEPS"
+      VARIABLES(89)="Step2node"
+      VARIABLES(88)="ND_STEPS"
+      VARIABLES(87)="NE_STEPS"
+      VARIABLES(86)="STEP"
+      VARIABLES(85)="NBSA"
+      VARIABLES(84)="LNA"
+      VARIABLES(83)="KEEP"
+      VARIABLES(82)="Deficiency"
+      VARIABLES(81)="MAXIS1"
+      VARIABLES(80)="IS1"
+      VARIABLES(79)="IS"
+      VARIABLES(78)="BUFR"
+      VARIABLES(77)="POIDS"
+      VARIABLES(76)="LBUFR_BYTES"
+      VARIABLES(75)="LBUFR"
+      VARIABLES(74)="ASS_IRECV"
+      VARIABLES(73)="NSLAVES"
+      VARIABLES(72)="NPROCS"
+      VARIABLES(71)="MYID"
+      VARIABLES(70)="COMM_LOAD"
+      VARIABLES(69)="MYID_NODES"
+      VARIABLES(68)="COMM_NODES"
+      VARIABLES(67)="INST_Number"
+      VARIABLES(66)="MAX_SURF_MASTER"
+      VARIABLES(65)="KEEP8"
+      VARIABLES(64)="pad8"
+      VARIABLES(63)="WRITE_PROBLEM"
+      VARIABLES(62)="OOC_PREFIX"
+      VARIABLES(61)="OOC_TMPDIR"
+      VARIABLES(60)="VERSION_NUMBER"
+      VARIABLES(59)="MAPPING"
+      VARIABLES(58)="LISTVAR_SCHUR"
+      VARIABLES(57)="SCHUR_CINTERFACE"
+      VARIABLES(56)="SCHUR"
+      VARIABLES(55)="SIZE_SCHUR"
+      VARIABLES(54)="SCHUR_LLD"
+      VARIABLES(53)="SCHUR_NLOC"
+      VARIABLES(52)="SCHUR_MLOC"
+      VARIABLES(51)="NBLOCK"
+      VARIABLES(50)="MBLOCK"
+      VARIABLES(49)="NPCOL"
+      VARIABLES(48)="NPROW"
+      VARIABLES(47)="UNS_PERM"
+      VARIABLES(46)="SYM_PERM"
+      VARIABLES(45)="RINFOG"
+      VARIABLES(44)="RINFO"
+      VARIABLES(43)="CNTL"
+      VARIABLES(42)="COST_SUBTREES"
+      VARIABLES(41)="INFOG"
+      VARIABLES(40)="INFO"
+      VARIABLES(39)="ICNTL"
+      VARIABLES(38)="pad5"
+      VARIABLES(37)="LREDRHS"
+      VARIABLES(36)="LSOL_loc"
+      VARIABLES(35)="NZ_RHS"
+      VARIABLES(34)="NRHS"
+      VARIABLES(33)="LRHS"
+      VARIABLES(32)="ISOL_loc"
+      VARIABLES(31)="IRHS_PTR"
+      VARIABLES(30)="IRHS_SPARSE"
+      VARIABLES(29)="SOL_loc"
+      VARIABLES(28)="RHS_SPARSE"
+      VARIABLES(27)="REDRHS"
+      VARIABLES(26)="RHS"
+      VARIABLES(25)="PERM_IN"
+      VARIABLES(24)="pad4"
+      VARIABLES(23)="A_ELT"
+      VARIABLES(22)="ELTVAR"
+      VARIABLES(21)="ELTPTR"
+      VARIABLES(20)="pad3"
+      VARIABLES(19)="NELT"
+      VARIABLES(18)="pad2"
+      VARIABLES(17)="A_loc"
+      VARIABLES(16)="JCN_loc"
+      VARIABLES(15)="IRN_loc"
+      VARIABLES(14)="pad1"
+      VARIABLES(13)="NZ_loc"
+      VARIABLES(12)="pad0"
+      VARIABLES(11)="ROWSCA"
+      VARIABLES(10)="COLSCA"
+      VARIABLES(9)="JCN"
+      VARIABLES(8)="IRN"
+      VARIABLES(7)="A"
+      VARIABLES(6)="NZ"
+      VARIABLES(5)="N"
+      VARIABLES(4)="JOB"
+      VARIABLES(3)="PAR"
+      VARIABLES(2)="SYM"
+      VARIABLES(1)="COMM"
+      NBVARIABLES_ROOT=34
+      allocate(VARIABLES_ROOT(NBVARIABLES_ROOT))
+      VARIABLES_ROOT(34)="NB_SINGULAR_VALUES"
+      VARIABLES_ROOT(33)="SINGULAR_VALUES"
+      VARIABLES_ROOT(32)="SVD_VT"
+      VARIABLES_ROOT(31)="SVD_U"
+      VARIABLES_ROOT(30)="gridinit_done"
+      VARIABLES_ROOT(29)="yes"
+      VARIABLES_ROOT(28)="rootpad3"
+      VARIABLES_ROOT(27)="QR_RCOND"
+      VARIABLES_ROOT(26)="rootpad"
+      VARIABLES_ROOT(25)="RHS_ROOT"
+      VARIABLES_ROOT(24)="rootpad2"
+      VARIABLES_ROOT(23)="QR_TAU"
+      VARIABLES_ROOT(22)="SCHUR_POINTER"
+      VARIABLES_ROOT(21)="RHS_CNTR_MASTER_ROOT"
+      VARIABLES_ROOT(20)="rootpad1"
+      VARIABLES_ROOT(19)="IPIV"
+      VARIABLES_ROOT(18)="RG2L_COL"
+      VARIABLES_ROOT(17)="RG2L_ROW"
+      VARIABLES_ROOT(16)="rootpad0"
+      VARIABLES_ROOT(15)="LPIV"
+      VARIABLES_ROOT(14)="CNTXT_BLACS"
+      VARIABLES_ROOT(13)="DESCRIPTOR"
+      VARIABLES_ROOT(12)="TOT_ROOT_SIZE"
+      VARIABLES_ROOT(11)="ROOT_SIZE"
+      VARIABLES_ROOT(10)="RHS_NLOC"
+      VARIABLES_ROOT(9)="SCHUR_LLD"
+      VARIABLES_ROOT(8)="SCHUR_NLOC"
+      VARIABLES_ROOT(7)="SCHUR_MLOC"
+      VARIABLES_ROOT(6)="MYCOL"
+      VARIABLES_ROOT(5)="MYROW"
+      VARIABLES_ROOT(4)="NPCOL"
+      VARIABLES_ROOT(3)="NPROW"
+      VARIABLES_ROOT(2)="NBLOCK"
+      VARIABLES_ROOT(1)="MBLOCK"
+      IN=52+id%MYID
+      INFILEMAIN=trim(adjustl(INFILE)) // trim(adjustl(STRING_ID))
+      open(UNIT=IN,FILE=INFILEMAIN, STATUS='old',FORM='unformatted'
+     &     ,iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN DMUMPS_RESTART CANNOT OPEN FILE: "
+     &        //trim(adjustl(INFILEMAIN))
+         error=.true.
+         goto 101
+      endif
+      DO i1=4,NBVARIABLES
+         size_array1=0
+         size_array2=0
+         SELECT CASE(VARIABLES(i1))
+         CASE("JOB")
+            read(IN) id%JOB
+         CASE("N")
+            read(IN) id%N
+         CASE("ICNTL")
+            read(IN) id%ICNTL
+         CASE("INFO")
+            read(IN) id%INFO
+         CASE("INFOG")
+            read(IN) id%INFOG
+         CASE("COST_SUBTREES")
+            read(IN) id%COST_SUBTREES
+         CASE("CNTL")
+            read(IN) id%CNTL
+         CASE("RINFO")
+            read(IN) id%RINFO
+         CASE("RINFOG")
+            read(IN) id%RINFOG
+         CASE("KEEP8")
+            read(IN) id%KEEP8
+         CASE("KEEP")
+            read(IN) id%KEEP
+         CASE("DKEEP")
+            read(IN) id%DKEEP    
+         CASE("NZ")
+            read(IN) id%NZ
+         CASE("A")
+            nullify(id%A)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%A(size_array1))
+               read(IN) id%A
+            endif
+         CASE("IRN")
+            nullify(id%IRN)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRN(size_array1))
+               read(IN) id%IRN
+            endif
+         CASE("JCN")
+            nullify(id%JCN)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%JCN(size_array1))
+               read(IN) id%JCN
+            endif
+         CASE("COLSCA")
+            nullify(id%COLSCA)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%COLSCA(size_array1))
+               read(IN) id%COLSCA
+            endif
+         CASE("ROWSCA")
+            nullify(id%ROWSCA)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ROWSCA(size_array1))
+               read(IN) id%ROWSCA
+            endif
+         CASE("NZ_loc")
+            read(IN) id%NZ_loc
+         CASE("IRN_loc")
+            nullify(id%IRN_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRN_loc(size_array1))
+               read(IN) id%IRN_loc
+            endif
+         CASE("JCN_loc")
+            nullify(id%JCN_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%JCN_loc(size_array1))
+               read(IN) id%JCN_loc
+            endif
+         CASE("A_loc")
+            nullify(id%A_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%A_loc(size_array1))
+               read(IN) id%A_loc
+            endif
+         CASE("NELT")
+            read(IN) id%NELT
+         CASE("ELTPTR")
+            nullify(id%ELTPTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ELTPTR(size_array1))
+               read(IN) id%ELTPTR
+            endif
+         CASE("ELTVAR")
+            nullify(id%ELTVAR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ELTVAR(size_array1))
+               read(IN) id%ELTVAR
+            endif
+         CASE("A_ELT")
+            nullify(id%A_ELT)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%A_ELT(size_array1))
+               read(IN) id%A_ELT
+            endif
+         CASE("PERM_IN")
+            nullify(id%PERM_IN)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PERM_IN(size_array1))
+               read(IN) id%PERM_IN
+            endif
+         CASE("RHS")
+            nullify(id%RHS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%RHS(size_array1))
+               read(IN) id%RHS
+            endif
+         CASE("REDRHS")
+            nullify(id%REDRHS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%REDRHS(size_array1))
+               read(IN) id%REDRHS
+            endif
+         CASE("RHS_SPARSE")
+            nullify(id%RHS_SPARSE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%RHS_SPARSE(size_array1))
+               read(IN) id%RHS_SPARSE
+            endif
+         CASE("SOL_loc")
+            nullify(id%SOL_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SOL_loc(size_array1))
+               read(IN) id%SOL_loc
+            endif
+         CASE("IRHS_SPARSE")
+            nullify(id%IRHS_SPARSE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRHS_SPARSE(size_array1))
+               read(IN) id%IRHS_SPARSE
+            endif
+         CASE("IRHS_PTR")
+            nullify(id%IRHS_PTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRHS_PTR(size_array1))
+               read(IN) id%IRHS_PTR
+            endif
+         CASE("ISOL_loc")
+            nullify(id%ISOL_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ISOL_loc(size_array1))
+               read(IN) id%ISOL_loc
+            endif
+         CASE("LRHS")
+            read(IN) id%LRHS
+         CASE("NRHS")
+            read(IN) id%NRHS
+         CASE("NZ_RHS")
+            read(IN) id%NZ_RHS
+         CASE("LSOL_loc")
+            read(IN) id%LSOL_loc
+         CASE("LREDRHS")
+            read(IN) id%LREDRHS
+         CASE("SYM_PERM")
+            nullify(id%SYM_PERM)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SYM_PERM(size_array1))
+               read(IN) id%SYM_PERM
+            endif
+         CASE("UNS_PERM")
+            nullify(id%UNS_PERM)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%UNS_PERM(size_array1))
+               read(IN) id%UNS_PERM
+            endif
+         CASE("NPROW")
+            read(IN) id%NPROW
+         CASE("NPCOL")
+            read(IN) id%NPCOL
+         CASE("MBLOCK")
+            read(IN) id%MBLOCK
+         CASE("NBLOCK")
+            read(IN) id%NBLOCK
+         CASE("SCHUR_MLOC")
+            read(IN) id%SCHUR_MLOC
+         CASE("SCHUR_NLOC")
+            read(IN) id%SCHUR_NLOC
+         CASE("SCHUR_LLD")
+            read(IN) id%SCHUR_LLD
+         CASE("SIZE_SCHUR")
+            read(IN) id%SIZE_SCHUR
+         CASE("SCHUR")
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHUR(size_array1))
+               read(IN) id%SCHUR
+            endif
+         CASE("SCHUR_CINTERFACE")
+            nullify(id%SCHUR_CINTERFACE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHUR_CINTERFACE(size_array1))
+               read(IN) id%SCHUR_CINTERFACE
+            endif
+         CASE("LISTVAR_SCHUR")
+            nullify(id%LISTVAR_SCHUR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%LISTVAR_SCHUR(size_array1))
+               read(IN) id%LISTVAR_SCHUR
+            endif
+         CASE("MAPPING")
+            nullify(id%MAPPING)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MAPPING(size_array1))
+               read(IN) id%MAPPING
+            endif
+         CASE("VERSION_NUMBER")
+            read(IN) id%VERSION_NUMBER
+         CASE("OOC_TMPDIR")
+            read(IN) id%OOC_TMPDIR
+         CASE("OOC_PREFIX")
+            read(IN) id%OOC_PREFIX
+         CASE("WRITE_PROBLEM")
+            read(IN) id%WRITE_PROBLEM
+         CASE("MAX_SURF_MASTER")
+            read(IN) id%MAX_SURF_MASTER
+         CASE("INST_Number")
+            read(IN) id%INST_Number
+         CASE("COMM_NODES")
+            read(IN) id%COMM_NODES
+         CASE("MYID_NODES")
+            read(IN) id%MYID_NODES
+         CASE("COMM_LOAD")
+            read(IN) id%COMM_LOAD
+         CASE("MYID")
+            read(IN) id%MYID
+         CASE("NPROCS")
+            read(IN) id%NPROCS
+         CASE("NSLAVES")
+            read(IN) id%NSLAVES
+         CASE("ASS_IRECV")
+            read(IN) id%ASS_IRECV
+         CASE("LBUFR")
+            read(IN) id%LBUFR
+         CASE("LBUFR_BYTES")
+            read(IN) id%LBUFR_BYTES
+         CASE("POIDS")
+            nullify(id%POIDS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%POIDS(size_array1))
+               read(IN) id%POIDS
+            endif
+         CASE("BUFR")
+            nullify(id%BUFR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%BUFR(size_array1))
+               read(IN) id%BUFR
+            endif
+         CASE("IS")
+            nullify(id%IS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IS(size_array1))
+               read(IN) id%IS
+            endif
+         CASE("IS1")
+            nullify(id%IS1)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IS1(size_array1))
+               read(IN) id%IS1
+            endif
+         CASE("MAXIS1")
+            read(IN) id%MAXIS1
+         CASE("Deficiency")
+            read(IN) id%Deficiency
+         CASE("LNA")
+            read(IN) id%LNA
+         CASE("NBSA")
+            read(IN) id%NBSA
+         CASE("STEP")
+            nullify(id%STEP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%STEP(size_array1))
+               read(IN) id%STEP
+            endif
+         CASE("NE_STEPS")
+            nullify(id%NE_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%NE_STEPS(size_array1))
+               read(IN) id%NE_STEPS
+            endif
+         CASE("ND_STEPS")
+            nullify(id%ND_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ND_STEPS(size_array1))
+               read(IN) id%ND_STEPS
+            endif
+         CASE("Step2node")
+            nullify(id%Step2node)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%Step2node(size_array1))
+               read(IN) id%Step2node
+            endif
+         CASE("FRERE_STEPS")
+            nullify(id%FRERE_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FRERE_STEPS(size_array1))
+               read(IN) id%FRERE_STEPS
+            endif
+         CASE("DAD_STEPS")
+            nullify(id%DAD_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DAD_STEPS(size_array1))
+               read(IN) id%DAD_STEPS
+            endif
+         CASE("FILS")
+            nullify(id%FILS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FILS(size_array1))
+               read(IN) id%FILS
+            endif
+         CASE("PTRAR")
+            nullify(id%PTRAR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PTRAR(size_array1))
+               read(IN) id%PTRAR
+            endif
+         CASE("FRTPTR")
+            nullify(id%FRTPTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FRTPTR(size_array1))
+               read(IN) id%FRTPTR
+            endif
+         CASE("FRTELT")
+            nullify(id%FRTELT)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FRTELT(size_array1))
+               read(IN) id%FRTELT
+            endif
+         CASE("NA")
+            nullify(id%NA)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%NA(size_array1))
+               read(IN) id%NA
+            endif
+         CASE("PROCNODE_STEPS")
+            nullify(id%PROCNODE_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PROCNODE_STEPS(size_array1))
+               read(IN) id%PROCNODE_STEPS
+            endif
+         CASE("PTLUST_S")
+            nullify(id%PTLUST_S)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PTLUST_S(size_array1))
+               read(IN) id%PTLUST_S
+            endif
+         CASE("PTRFAC")
+            nullify(id%PTRFAC)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PTRFAC(size_array1))
+               read(IN) id%PTRFAC
+            endif
+         CASE("S")
+            nullify(id%S)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%S(size_array1))
+               read(IN) id%S
+            endif
+         CASE("PROCNODE")
+            nullify(id%PROCNODE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PROCNODE(size_array1))
+               read(IN) id%PROCNODE
+            endif
+         CASE("INTARR")
+            nullify(id%INTARR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%INTARR(size_array1))
+               read(IN) id%INTARR
+            endif
+         CASE("DBLARR")
+            nullify(id%DBLARR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DBLARR(size_array1))
+               read(IN) id%DBLARR
+            endif
+         CASE("NELT_loc")
+            read(IN) id%NELT_loc
+         CASE("LELTVAR")
+            read(IN) id%LELTVAR
+         CASE("NA_ELT")
+            read(IN) id%NA_ELT
+         CASE("ELTPROC")
+            nullify(id%ELTPROC)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ELTPROC(size_array1))
+               read(IN) id%ELTPROC
+            endif
+         CASE("CANDIDATES")
+            nullify(id%CANDIDATES)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%CANDIDATES(size_array1,size_array2))
+               read(IN) id%CANDIDATES
+            endif
+         CASE("ISTEP_TO_INIV2")
+            nullify(id%ISTEP_TO_INIV2)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ISTEP_TO_INIV2(size_array1))
+               read(IN) id%ISTEP_TO_INIV2
+            endif
+         CASE("FUTURE_NIV2")
+            nullify(id%FUTURE_NIV2)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FUTURE_NIV2(size_array1))
+               read(IN) id%FUTURE_NIV2
+            endif
+         CASE("TAB_POS_IN_PERE")
+            nullify(id%TAB_POS_IN_PERE)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%TAB_POS_IN_PERE(size_array1,size_array2))
+               read(IN) id%TAB_POS_IN_PERE
+            endif
+         CASE("I_AM_CAND")
+            nullify(id%I_AM_CAND)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%I_AM_CAND(size_array1))
+               read(IN) id%I_AM_CAND
+            endif
+         CASE("MEM_DIST")
+            nullify(id%MEM_DIST)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MEM_DIST(0:size_array1-1))
+               read(IN) id%MEM_DIST
+            endif
+         CASE("POSINRHSCOMP_ROW")
+            nullify(id%POSINRHSCOMP_ROW)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%POSINRHSCOMP_ROW(size_array1))
+               read(IN) id%POSINRHSCOMP_ROW
+            endif
+         CASE("POSINRHSCOMP_COL_ALLOC")
+            read(IN) id%POSINRHSCOMP_COL_ALLOC
+         CASE("POSINRHSCOMP_COL")
+            nullify(id%POSINRHSCOMP_COL)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               if(id%POSINRHSCOMP_COL_ALLOC) then
+                  allocate(id%POSINRHSCOMP_COL(size_array1))
+                  read(IN) id%POSINRHSCOMP_COL
+               else
+                  read(IN) dummy
+                  id%POSINRHSCOMP_COL=>id%POSINRHSCOMP_ROW
+               endif
+            endif
+         CASE("RHSCOMP")
+            nullify(id%RHSCOMP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%RHSCOMP(size_array1))
+               read(IN) id%RHSCOMP
+            endif
+         CASE("MEM_SUBTREE")
+            nullify(id%MEM_SUBTREE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MEM_SUBTREE(size_array1))
+               read(IN) id%MEM_SUBTREE
+            endif
+         CASE("COST_TRAV")
+            nullify(id%COST_TRAV)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%COST_TRAV(size_array1))
+               read(IN) id%COST_TRAV
+            endif
+         CASE("MY_ROOT_SBTR")
+            nullify(id%MY_ROOT_SBTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MY_ROOT_SBTR(size_array1))
+               read(IN) id%MY_ROOT_SBTR
+            endif
+         CASE("MY_FIRST_LEAF")
+            nullify(id%MY_FIRST_LEAF)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MY_FIRST_LEAF(size_array1))
+               read(IN) id%MY_FIRST_LEAF
+            endif
+         CASE("MY_NB_LEAF")
+            nullify(id%MY_NB_LEAF)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MY_NB_LEAF(size_array1))
+               read(IN) id%MY_NB_LEAF
+            endif
+         CASE("DEPTH_FIRST")
+            nullify(id%DEPTH_FIRST)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DEPTH_FIRST(size_array1))
+               read(IN) id%DEPTH_FIRST
+            endif
+         CASE("DEPTH_FIRST_SEQ")
+            nullify(id%DEPTH_FIRST_SEQ)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DEPTH_FIRST_SEQ(size_array1))
+               read(IN) id%DEPTH_FIRST_SEQ
+            endif
+         CASE("SBTR_ID")
+            nullify(id%SBTR_ID)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SBTR_ID(size_array1))
+               read(IN) id%SBTR_ID
+            endif
+         CASE("SCHED_DEP")
+            nullify(id%SCHED_DEP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHED_DEP(size_array1))
+               read(IN) id%SCHED_DEP
+            endif
+         CASE("SCHED_GRP")
+            nullify(id%SCHED_GRP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHED_GRP(size_array1))
+               read(IN) id%SCHED_GRP
+            endif
+         CASE("CROIX_MANU")
+            nullify(id%CROIX_MANU)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%CROIX_MANU(size_array1))
+               read(IN) id%CROIX_MANU
+            endif
+         CASE("WK_USER")
+            nullify(id%WK_USER)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%WK_USER(size_array1))
+               read(IN) id%WK_USER
+            endif
+         CASE("NBSA_LOCAL")
+            read(IN) id%NBSA_LOCAL
+         CASE("LWK_USER")
+            read(IN) id%LWK_USER
+         CASE("CB_SON_SIZE")
+            nullify(id%CB_SON_SIZE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%CB_SON_SIZE(size_array1))
+               read(IN) id%CB_SON_SIZE
+            endif
+         CASE("INSTANCE_NUMBER")
+            read(IN) id%INSTANCE_NUMBER
+         CASE("OOC_MAX_NB_NODES_FOR_ZONE")
+            read(IN) id%OOC_MAX_NB_NODES_FOR_ZONE
+         CASE("OOC_INODE_SEQUENCE")
+            nullify(id%OOC_INODE_SEQUENCE)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_INODE_SEQUENCE(size_array1,size_array2))
+               read(IN) id%OOC_INODE_SEQUENCE
+            endif
+         CASE("OOC_SIZE_OF_BLOCK")
+            nullify(id%OOC_SIZE_OF_BLOCK)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_SIZE_OF_BLOCK(size_array1,size_array2))
+               read(IN) id%OOC_SIZE_OF_BLOCK
+            endif
+         CASE("OOC_VADDR")
+            nullify(id%OOC_VADDR)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_VADDR(size_array1,size_array2))
+               read(IN) id%OOC_VADDR
+            endif
+         CASE("OOC_TOTAL_NB_NODES")
+            nullify(id%OOC_TOTAL_NB_NODES)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_TOTAL_NB_NODES(size_array1))
+               read(IN) id%OOC_TOTAL_NB_NODES
+            endif
+         CASE("OOC_NB_FILES")
+            nullify(id%OOC_NB_FILES)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_NB_FILES(size_array1))
+               read(IN) id%OOC_NB_FILES
+            endif
+         CASE("OOC_NB_FILE_TYPE")
+            read(IN) id%OOC_NB_FILE_TYPE
+         CASE("OOC_FILE_NAMES")
+            nullify(id%OOC_FILE_NAMES)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_FILE_NAMES(size_array1,size_array2))
+               read(IN) id%OOC_FILE_NAMES
+            endif
+         CASE("OOC_FILE_NAME_LENGTH")
+            nullify(id%OOC_FILE_NAME_LENGTH)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_FILE_NAME_LENGTH(size_array1))
+               read(IN) id%OOC_FILE_NAME_LENGTH
+            endif
+         CASE("PIVNUL_LIST")
+            nullify(id%PIVNUL_LIST)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PIVNUL_LIST(size_array1))
+               read(IN) id%PIVNUL_LIST
+            endif
+         CASE("SUP_PROC")
+            nullify(id%SUP_PROC)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SUP_PROC(size_array1,size_array2))
+               read(IN) id%SUP_PROC
+            endif
+         CASE("IPTR_WORKING")
+            nullify(id%IPTR_WORKING)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IPTR_WORKING(size_array1))
+               read(IN) id%IPTR_WORKING
+            endif
+         CASE("WORKING")
+            nullify(id%WORKING)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%WORKING(size_array1))
+               read(IN) id%WORKING
+            endif
+         CASE("root")
+        CASE("NBGRP")
+           read(IN) id%NBGRP
+        CASE("LRGROUPS")
+           nullify(id%LRGROUPS)
+           read(IN) size_array1
+           if(size_array1.EQ.-999) then
+              read(IN) dummy
+           else
+              allocate(id%LRGROUPS(size_array1))
+              read(IN) id%LRGROUPS
+           endif
+         CASE("SCHED_SBTR")
+            nullify(id%SCHED_SBTR)
+            read(IN) size_array1
+            IF(size_array1.EQ.-999) THEN
+               read(IN) dummy
+            ELSE
+               allocate(id%SCHED_SBTR(size_array1))
+               read(IN) id%SCHED_SBTR
+            ENDIF 
+        CASE("LPOOL_AFTER_L0_OMP")
+           read(IN) id%LPOOL_AFTER_L0_OMP
+        CASE("LPOOL_BEFORE_L0_OMP")
+           read(IN) id%LPOOL_BEFORE_L0_OMP
+        CASE("L_PHYS_L0_OMP")
+           read(IN) id%L_PHYS_L0_OMP
+        CASE("L_VIRT_L0_OMP")  
+           read(IN) id%L_VIRT_L0_OMP
+        CASE("LL0_OMP_MAPPING")
+           read(IN) id%LL0_OMP_MAPPING
+        CASE("THREAD_LA")
+           read(IN) id%THREAD_LA
+        CASE("IPOOL_AFTER_L0_OMP")
+           nullify(id%IPOOL_AFTER_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%IPOOL_AFTER_L0_OMP(size_array1))
+              read(IN) id%IPOOL_AFTER_L0_OMP
+           ENDIF 
+        CASE("IPOOL_BEFORE_L0_OMP")
+           nullify(id%IPOOL_BEFORE_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%IPOOL_BEFORE_L0_OMP(size_array1))
+              read(IN) id%IPOOL_BEFORE_L0_OMP
+           ENDIF 
+        CASE("PHYS_L0_OMP")
+           nullify(id%PHYS_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%PHYS_L0_OMP(size_array1))
+              read(IN) id%PHYS_L0_OMP
+           ENDIF 
+        CASE("VIRT_L0_OMP")
+           nullify(id%VIRT_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%VIRT_L0_OMP(size_array1))
+              read(IN) id%VIRT_L0_OMP
+           ENDIF
+        CASE("PERM_L0_OMP")
+           nullify(id%PERM_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%PERM_L0_OMP(size_array1))
+              read(IN) id%PERM_L0_OMP
+           ENDIF
+        CASE("PTR_LEAFS_L0_OMP")
+           nullify(id%PTR_LEAFS_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%PTR_LEAFS_L0_OMP(size_array1))
+              read(IN) id%PTR_LEAFS_L0_OMP
+           ENDIF
+        CASE("L0_OMP_MAPPING")
+           nullify(id%L0_OMP_MAPPING)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%L0_OMP_MAPPING(size_array1))
+              read(IN) id%L0_OMP_MAPPING
+           ENDIF 
+        CASE("IF_RESTARTING")
+           read(IN) id%IF_RESTARTING 
+        CASE("SINGULAR_VALUES")
+         read(IN) size_array1
+         if(size_array1.EQ.-999) then
+            read(IN) dummy
+         else
+            allocate(id%SINGULAR_VALUES(size_array1))
+            read(IN) id%SINGULAR_VALUES
+         endif  
+      CASE("NB_SINGULAR_VALUES")
+        write(IN) id%NB_SINGULAR_VALUES
+        CASE("pad0","pad1","pad2","pad3","pad4","pad5","pad8","pad11",
+     &          "pad111", "pad12","pad13","pad14")
+        CASE DEFAULT
+           id%INFOG(1)=-92
+           write(*,*) "IN DMUMPS_RESTART UNKNOWN VARIABLE IN "
+     &       // "STRUCTURE: "//  trim(adjustl(VARIABLES(i1)))
+           goto 101
+        END SELECT
+      ENDDO
+ 101  continue
+      close(IN)
+      if(error) goto 102
+      INROOT=1000+IN
+      INFILEROOT=trim(adjustl(INFILE)) // trim(adjustl("ROOT")) 
+     &     // trim(adjustl(STRING_ID)) 
+      open(UNIT=INROOT,FILE=INFILEROOT, STATUS='old',FORM='unformatted'
+     &     ,iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN DMUMPS_RESTART CANNOT OPEN FILE: "
+     &        //trim(adjustl(INFILEROOT))
+         goto 102
+      endif
+      DO i2=1,NBVARIABLES_ROOT
+         SELECT CASE(VARIABLES_ROOT(i2))
+      CASE("MBLOCK")
+         read(INROOT) id%root%MBLOCK
+      CASE("NBLOCK")
+         read(INROOT) id%root%NBLOCK
+      CASE("NPROW")
+         read(INROOT) id%root%NPROW
+      CASE("NPCOL")
+         read(INROOT) id%root%NPCOL
+      CASE("MYROW")
+         read(INROOT) id%root%MYROW
+      CASE("MYCOL")
+         read(INROOT) id%root%MYCOL
+      CASE("SCHUR_MLOC")
+         read(INROOT) id%root%SCHUR_MLOC
+      CASE("SCHUR_NLOC")
+         read(INROOT) id%root%SCHUR_NLOC
+      CASE("SCHUR_LLD")
+         read(INROOT) id%root%SCHUR_LLD
+      CASE("RHS_NLOC")
+         read(INROOT) id%root%RHS_NLOC
+      CASE("ROOT_SIZE")
+         read(INROOT) id%root%ROOT_SIZE
+      CASE("TOT_ROOT_SIZE")
+         read(INROOT) id%root%TOT_ROOT_SIZE
+      CASE("DESCRIPTOR")
+         read(INROOT) id%root%DESCRIPTOR
+      CASE("CNTXT_BLACS")
+         read(INROOT) id%root%CNTXT_BLACS
+      CASE("LPIV")
+         read(INROOT) id%root%LPIV
+      CASE("RG2L_ROW")
+         nullify(id%root%RG2L_ROW)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RG2L_ROW(size_array1))
+            read(INROOT) id%root%RG2L_ROW
+         endif
+      CASE("RG2L_COL")
+         nullify(id%root%RG2L_COL)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RG2L_COL(size_array1))
+            read(INROOT) id%root%RG2L_COL
+         endif
+      CASE("IPIV")
+         nullify(id%root%IPIV)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%IPIV(size_array1))
+            read(INROOT) id%root%IPIV
+         endif
+      CASE("RHS_CNTR_MASTER_ROOT")
+         nullify(id%root%RHS_CNTR_MASTER_ROOT)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RHS_CNTR_MASTER_ROOT(size_array1))
+            read(INROOT) id%root%RHS_CNTR_MASTER_ROOT
+         endif
+      CASE("SCHUR_POINTER")
+         nullify(id%root%SCHUR_POINTER)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SCHUR_POINTER(size_array1))
+            read(INROOT) id%root%SCHUR_POINTER
+         endif
+      CASE("QR_TAU")
+         nullify(id%root%QR_TAU)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%QR_TAU(size_array1))
+            read(INROOT) id%root%QR_TAU
+         endif
+      CASE("RHS_ROOT")
+         nullify(id%root%RHS_ROOT)
+         read(INROOT) size_array1,size_array2
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RHS_ROOT(size_array1,size_array2))
+            read(INROOT) id%root%RHS_ROOT
+         endif
+      CASE("QR_RCOND")
+         read(INROOT) id%root%QR_RCOND
+      CASE("yes")
+         read(INROOT) id%root%yes
+      CASE("gridinit_done")
+         read(INROOT) id%root%gridinit_done
+      CASE("SVD_U")
+         read(INROOT) size_array1,size_array2
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SVD_U(size_array1,size_array2))
+            read(INROOT) id%root%SVD_U
+         endif
+      CASE("SVD_VT")
+         read(INROOT) size_array1,size_array2
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SVD_VT(size_array1,size_array2))
+            read(INROOT) id%root%SVD_VT
+         endif
+      CASE("SINGULAR_VALUES")
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SINGULAR_VALUES(size_array1))
+            read(INROOT) id%root%SINGULAR_VALUES
+         endif  
+      CASE("NB_SINGULAR_VALUES")
+        write(INROOT) id%root%NB_SINGULAR_VALUES
+         CASE("rootpad0","rootpad1","rootpad2","rootpad",
+     &        "rootpad3")
+      CASE DEFAULT
+         id%INFOG(1)=-92
+         write(*,*) "IN DMUMPS_RESTART UNKNOWN VARIABLE "
+     &        // "IN ROOT: "// trim(adjustl(VARIABLES_ROOT(i2)))
+         goto 102
+      END SELECT  
+      ENDDO
+      if(id%root%gridinit_done) then
+         id%root%CNTXT_BLACS = id%COMM_NODES
+         CALL blacs_gridinit( id%root%CNTXT_BLACS, 'R',
+     &        id%root%NPROW, id%root%NPCOL )
+         id%root%gridinit_done = .TRUE.
+      endif
+ 102  continue
+      close(INROOT)
+      END SUBROUTINE DMUMPS_RESTART
diff -ruN MUMPS_5.1.2/src/mumps_orderings.c mumps-5.1.2-aster7/src/mumps_orderings.c
--- MUMPS_5.1.2/src/mumps_orderings.c	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/src/mumps_orderings.c	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,354 @@
+/*
+ *
+ *  This file is part of MUMPS 5.0.2, released
+ *  on Fri Jul 15 09:12:54 UTC 2016
+ *
+ *
+ *  Copyright 1991-2016 CERFACS, CNRS, ENS Lyon, INP Toulouse, Inria,
+ *  University of Bordeaux.
+ *
+ *  This version of MUMPS is provided to you free of charge. It is
+ *  released under the CeCILL-C license:
+ *  http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html
+ *
+ */
+/*
+ * This file contains interfaces to external ordering packages.
+ * At the moment, PORD (J. Schulze) and SCOTCH are interfaced.
+ */
+#include "mumps_orderings.h"
+#include "mumps_c_types.h"
+#if defined(pord)
+/* Interface to PORD */
+/*int mumps_pord( int, int, int *, int *, int * );
+#define MUMPS_PORDF   \
+F_SYMBOL(pordf,PORDF)*/
+void MUMPS_CALL
+MUMPS_PORDF( MUMPS_INT *nvtx, MUMPS_INT *nedges,
+             MUMPS_INT *xadj, MUMPS_INT *adjncy,
+             MUMPS_INT *nv, MUMPS_INT *ncmpa )
+{
+    *ncmpa = mumps_pord( *nvtx, *nedges, xadj, adjncy, nv );
+}
+/* Interface to PORD with weighted graph*/
+/*int mumps_pord_wnd( int, int, int *, int *, int *, int * );
+#define MUMPS_PORDF_WND           \
+    F_SYMBOL(pordf_wnd,PORDF_WND)*/
+void MUMPS_CALL
+MUMPS_PORDF_WND( MUMPS_INT *nvtx, MUMPS_INT *nedges,
+                 MUMPS_INT *xadj, MUMPS_INT *adjncy,
+                 MUMPS_INT *nv, MUMPS_INT *ncmpa, MUMPS_INT *totw )
+{
+    *ncmpa = mumps_pord_wnd( *nvtx, *nedges, xadj, adjncy, nv, totw );
+}
+/************************************************************
+ mumps_pord is used in ana_aux.F
+        permutation and inverse permutation not set in output,
+        but may be printed in default file: "perm_pord" and "iperm_pord",
+        if associated part uncommneted.
+        But, if uncommetnted a bug occurs in psl_ma41_analysi.F
+******************************************************************/
+/*********************************************************/
+MUMPS_INT mumps_pord
+(
+   MUMPS_INT nvtx,
+   MUMPS_INT nedges,
+   MUMPS_INT *xadj_pe,
+   MUMPS_INT *adjncy,
+   MUMPS_INT *nv
+)
+{
+/**********************************
+Argument Comments:
+input:
+-----
+- nvtx          : dimension of the Problem (N)
+- nedges        : number of entries (NZ)
+- adjncy        : non-zeros entries (IW input)
+input/output:
+-------------
+- xadj_pe       : pointer through beginning of column non-zeros entries (PTRAR)
+- on exit, "father array" (PE)
+ouput:
+------
+- nv            : "nfront array" (NV)
+*************************************/
+  graph_t    *G;
+  elimtree_t *T;
+  timings_t  cpus[12];
+  options_t  options[] = { SPACE_ORDTYPE, SPACE_NODE_SELECTION1,
+                    SPACE_NODE_SELECTION2, SPACE_NODE_SELECTION3,
+                    SPACE_DOMAIN_SIZE, 0 };
+  MUMPS_INT *ncolfactor, *ncolupdate, *parent, *vtx2front;
+  MUMPS_INT *first, *link, nfronts, J, K, u, vertex, vertex_root, count;
+      /**************************************************
+       declaration to uncomment if printing ordering
+      ***************************************************
+         FILE *fp1, *fp2;
+         int  *perm,  *iperm;
+      */
+/*** decalage des indices couteux dans un premier temps:
+****  A modifier dans une version ulterieure de MA41GD  */
+  for (u = nvtx; u >= 0; u--)
+   {
+     xadj_pe[u] = xadj_pe[u] - 1;
+   }
+   for (K = nedges-1; K >= 0; K--)
+   {
+      adjncy[K] = adjncy[K] - 1;
+   }
+ /* initialization of the graph */
+   mymalloc(G, 1, graph_t);
+   G->xadj   = xadj_pe;
+   G->adjncy = adjncy;
+   mymalloc(G->vwght, nvtx, MUMPS_INT);
+   G->nvtx = nvtx;
+   G->nedges = nedges;
+   G->type = UNWEIGHTED;
+   G->totvwght = nvtx;
+   for (u = 0; u < nvtx; u++)
+     G->vwght[u] = 1;
+  /* main function of the Ordering */
+   T = SPACE_ordering(G, options, cpus);
+   nfronts = T->nfronts;
+   ncolfactor = T->ncolfactor;
+   ncolupdate = T->ncolupdate;
+   parent = T->parent;
+  /*    firstchild = T->firstchild; */
+   vtx2front = T->vtx2front;
+    /* -----------------------------------------------------------
+     store the vertices/columns of a front in a bucket structure
+     ----------------------------------------------------------- */
+   mymalloc(first, nfronts, MUMPS_INT);
+   mymalloc(link, nvtx, MUMPS_INT);
+   for (J = 0; J < nfronts; J++)
+      first[J] = -1;
+   for (u = nvtx-1; u >= 0; u--)
+      {
+        J = vtx2front[u];
+        link[u] = first[J];
+        first[J] = u;
+      }
+  /* -----------------------------------------------------------
+     fill the two arrays corresponding to the MUMPS tree structure
+     ----------------------------------------------------------- */
+   count = 0;
+   for (K = firstPostorder(T); K != -1; K = nextPostorder(T, K))
+     {
+       vertex_root = first[K];
+       if (vertex_root == -1)
+	 {
+            /* JY: I think this cannot happen */
+	   printf(" Internal error in mumps_pord (cf JY), %d\n",K);
+	   exit(-1);
+	 }
+       /* for the principal column of the supervariable */
+       if (parent[K] == -1)
+	 xadj_pe[vertex_root] = 0; /* root of the tree */
+       else
+	 xadj_pe[vertex_root] = - (first[parent[K]]+1);
+       nv[vertex_root] = ncolfactor[K] + ncolupdate[K];
+       count++;
+       for (vertex = link[vertex_root]; vertex != -1; vertex = link[vertex])
+        /* for the secondary columns of the supervariable */
+	 {
+	   xadj_pe[vertex] = - (vertex_root+1);
+	   nv[vertex] = 0;
+	   count++;
+	 }
+     }
+  /* ----------------------
+     free memory and return
+     ---------------------- */
+  free(first); free(link);
+  free(G->vwght);
+  free(G);
+  freeElimTree(T);
+  return (0);
+}
+/*********************************************************/
+MUMPS_INT mumps_pord_wnd
+(
+        MUMPS_INT nvtx,
+        MUMPS_INT nedges,
+        MUMPS_INT *xadj_pe,
+        MUMPS_INT *adjncy,
+        MUMPS_INT *nv,
+        MUMPS_INT *totw
+)
+{
+/**********************************
+Argument Comments:
+input:
+-----
+- nvtx   : dimension of the Problem (N)
+- nedges : number of entries (NZ)
+- adjncy : non-zeros entries (IW input)
+- totw   : sum of the weigth of the vertices
+input/output:
+-------------
+- xadj_pe : pointer through beginning of column non-zeros entries (PTRAR)
+- on exit, "father array" (PE)
+ouput:
+------
+- nv      : weight of the vertices
+- on exit "nfront array" (NV)
+*************************************/
+        graph_t    *G;
+        elimtree_t *T;
+        timings_t  cpus[12];
+        options_t  options[] = { SPACE_ORDTYPE, SPACE_NODE_SELECTION1,
+                    SPACE_NODE_SELECTION2, SPACE_NODE_SELECTION3,
+                    SPACE_DOMAIN_SIZE, 0 };
+        MUMPS_INT *ncolfactor, *ncolupdate, *parent, *vtx2front;
+        MUMPS_INT *first, *link, nfronts, J, K, u, vertex, vertex_root, count;
+      /**************************************************
+       declaration to uncomment if printing ordering
+      ***************************************************
+         FILE *fp1, *fp2;
+         int  *perm,  *iperm;
+      */
+/*** decalage des indices couteux dans un premier temps:
+****  A modifier dans une version ulterieure de MA41GD  */
+        for (u = nvtx; u >= 0; u--)
+        {
+          xadj_pe[u] = xadj_pe[u] - 1;
+        }
+        for (K = nedges-1; K >= 0; K--)
+        {
+          adjncy[K] = adjncy[K] - 1;
+        }
+ /* initialization of the graph */
+        mymalloc(G, 1, graph_t);
+        G->xadj  = xadj_pe;
+        G->adjncy= adjncy;
+        mymalloc(G->vwght, nvtx, MUMPS_INT);
+        G->nvtx = nvtx;
+        G->nedges = nedges;
+        G->type = WEIGHTED;
+        G->totvwght = (*totw);
+        for (u = 0; u < nvtx; u++)
+          G->vwght[u] = nv[u];
+  /* main function of the Ordering */
+        T = SPACE_ordering(G, options, cpus);
+        nfronts = T->nfronts;
+        ncolfactor = T->ncolfactor;
+        ncolupdate = T->ncolupdate;
+        parent = T->parent;
+  /*    firstchild = T->firstchild; */
+        vtx2front = T->vtx2front;
+    /* -----------------------------------------------------------
+     store the vertices/columns of a front in a bucket structure
+     ----------------------------------------------------------- */
+        mymalloc(first, nfronts, MUMPS_INT);
+        mymalloc(link, nvtx, MUMPS_INT);
+        for (J = 0; J < nfronts; J++)
+          first[J] = -1;
+        for (u = nvtx-1; u >= 0; u--)
+        {
+          J = vtx2front[u];
+          link[u] = first[J];
+          first[J] = u;
+        }
+  /* -----------------------------------------------------------
+     fill the two arrays corresponding to the MUMPS tree structure
+     ----------------------------------------------------------- */
+  count = 0;
+  for (K = firstPostorder(T); K != -1; K = nextPostorder(T, K))
+     {
+       vertex_root = first[K];
+       if (vertex_root == -1)
+	 {
+	   /* JY: I think this cannot happen */
+	   printf(" Internal error in mumps_pord (cf JY), %d\n",K);
+	   exit(-1);
+	 }
+         /* for the principal column of the supervariable */
+       if (parent[K] == -1)
+	 xadj_pe[vertex_root] = 0; /* root of the tree */
+       else
+	 xadj_pe[vertex_root] = - (first[parent[K]]+1);
+       nv[vertex_root] = ncolfactor[K] + ncolupdate[K];
+       count++;
+       for (vertex = link[vertex_root]; vertex != -1; vertex = link[vertex])
+	 /* for the secondary columns of the supervariable */
+	 {
+	   xadj_pe[vertex] = - (vertex_root+1);
+	   nv[vertex] = 0;
+	   count++;
+	 }
+     }
+  /* ----------------------
+     free memory and return
+     ---------------------- */
+  free(first); free(link);
+  free(G->vwght);
+  free(G);
+  freeElimTree(T);
+  return (0);
+}
+#endif /* pord */
+/************************************************************/
+#if defined(scotch) || defined(ptscotch)
+/*int esmumps( const int n, const int iwlen, int * const pe, const int pfree,
+             int * const len, int * const iw, int * const nv, int * const elen,
+             int * const last);*/
+/* Fortran interface to SCOTCH */
+/*#define MUMPS_SCOTCH    \
+  F_SYMBOL(scotch,SCOTCH)*/
+void MUMPS_CALL
+MUMPS_SCOTCH( const MUMPS_INT * const  n,
+              const MUMPS_INT * const  iwlen,
+              MUMPS_INT * const        petab,
+              const MUMPS_INT * const  pfree,
+              MUMPS_INT * const        lentab,
+              MUMPS_INT * const        iwtab,
+              MUMPS_INT * const        nvtab,
+              MUMPS_INT * const        elentab,
+              MUMPS_INT * const        lasttab,
+              MUMPS_INT * const        ncmpa )
+{
+     *ncmpa = esmumps( *n, *iwlen, petab, *pfree,
+                       lentab, iwtab, nvtab, elentab, lasttab );
+}
+#endif /* scotch */
+#if defined(ptscotch)
+/*#include "mpi.h"
+#include <stdio.h>
+#include "ptscotch.h"
+int mumps_dgraphinit( SCOTCH_Dgraph *, MPI_Fint *, MPI_Fint *);
+#define MUMPS_DGRAPHINIT        \
+F_SYMBOL(dgraphinit,DGRAPHINIT)*/
+void MUMPS_CALL
+MUMPS_DGRAPHINIT(SCOTCH_Dgraph *graphptr, MPI_Fint *comm, MPI_Fint *ierr)
+{
+  MPI_Comm  int_comm;
+  int_comm = MPI_Comm_f2c(*comm);
+  *ierr = SCOTCH_dgraphInit(graphptr, int_comm);
+  return;
+}
+#endif
+#if defined(parmetis) || defined(parmetis3)
+/*PARMETIS*/
+#include "parmetis.h"
+void MUMPS_CALL
+MUMPS_PARMETIS(MUMPS_INT *first,      MUMPS_INT *vertloctab, 
+               MUMPS_INT *edgeloctab, MUMPS_INT *numflag, 
+               MUMPS_INT *options,    MUMPS_INT *order, 
+               MUMPS_INT *sizes,      MUMPS_INT *comm,
+               MUMPS_INT *ierr)
+{
+  MPI_Comm  int_comm;
+  int iierr;
+  int_comm = MPI_Comm_f2c(*comm);
+#if defined(parmetis)
+  *ierr=0;
+  iierr=ParMETIS_V3_NodeND(first, vertloctab, edgeloctab, numflag, options, order, sizes, &int_comm);
+  if(iierr != METIS_OK)
+    *ierr=1;
+#else
+  ParMETIS_V3_NodeND(first, vertloctab, edgeloctab, numflag, options, order, sizes, &int_comm);
+#endif
+  return;
+}
+#endif
diff -ruN MUMPS_5.1.2/src/mumps_orderings.h mumps-5.1.2-aster7/src/mumps_orderings.h
--- MUMPS_5.1.2/src/mumps_orderings.h	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/src/mumps_orderings.h	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,75 @@
+/*
+ *
+ *  This file is part of MUMPS 5.0.2, released
+ *  on Fri Jul 15 09:12:54 UTC 2016
+ *
+ *
+ *  Copyright 1991-2016 CERFACS, CNRS, ENS Lyon, INP Toulouse, Inria,
+ *  University of Bordeaux.
+ *
+ *  This version of MUMPS is provided to you free of charge. It is
+ *  released under the CeCILL-C license:
+ *  http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html
+ *
+ */
+#ifndef MUMPS_ORDERINGS_H
+#define MUMPS_ORDERINGS_H
+#include "mumps_common.h"
+#include "mumps_c_types.h"
+#if defined(pord)
+#include <space.h>
+MUMPS_INT mumps_pord( MUMPS_INT, MUMPS_INT, MUMPS_INT *, MUMPS_INT *, MUMPS_INT * );
+#define MUMPS_PORDF \
+    F_SYMBOL(pordf,PORDF)
+void MUMPS_CALL
+MUMPS_PORDF( MUMPS_INT *nvtx, MUMPS_INT *nedges,
+             MUMPS_INT *xadj, MUMPS_INT *adjncy,
+             MUMPS_INT *nv, MUMPS_INT *ncmpa );
+MUMPS_INT mumps_pord_wnd( MUMPS_INT, MUMPS_INT, MUMPS_INT *, MUMPS_INT *, MUMPS_INT *, MUMPS_INT * );
+#define MUMPS_PORDF_WND          \
+    F_SYMBOL(pordf_wnd,PORDF_WND)
+void MUMPS_CALL
+MUMPS_PORDF_WND( MUMPS_INT *nvtx, MUMPS_INT *nedges,
+                 MUMPS_INT *xadj, MUMPS_INT *adjncy,
+                 MUMPS_INT *nv, MUMPS_INT *ncmpa, MUMPS_INT *totw );
+#endif /*PORD*/
+#if defined(scotch) || defined(ptscotch)
+MUMPS_INT esmumps( const MUMPS_INT n, const MUMPS_INT iwlen, MUMPS_INT * const pe, const MUMPS_INT pfree,
+             MUMPS_INT * const len, MUMPS_INT * const iw, MUMPS_INT * const nv, MUMPS_INT * const elen,
+             MUMPS_INT * const last);
+#define MUMPS_SCOTCH        \
+    F_SYMBOL(scotch,SCOTCH)
+void MUMPS_CALL
+MUMPS_SCOTCH( const MUMPS_INT * const  n,
+              const MUMPS_INT * const  iwlen,
+              MUMPS_INT * const        petab,
+              const MUMPS_INT * const  pfree,
+              MUMPS_INT * const        lentab,
+              MUMPS_INT * const        iwtab,
+              MUMPS_INT * const        nvtab,
+              MUMPS_INT * const        elentab,
+              MUMPS_INT * const        lasttab,
+              MUMPS_INT * const        ncmpa );
+#endif /*scotch or ptscotch*/
+#if defined(ptscotch)
+#include "mpi.h"
+#include <stdio.h>
+#include "ptscotch.h"
+#define MUMPS_DGRAPHINIT \
+  F_SYMBOL(dgraphinit,DGRAPHINIT)
+void MUMPS_CALL
+MUMPS_DGRAPHINIT(SCOTCH_Dgraph *graphptr, MPI_Fint *comm, MPI_Fint *ierr);
+#endif /*ptscotch*/
+#if defined(parmetis) || defined(parmetis3)
+#include "mpi.h"
+#include "parmetis.h"
+#define MUMPS_PARMETIS \
+  F_SYMBOL(parmetis,PARMETIS)
+void MUMPS_CALL
+MUMPS_PARMETIS(MUMPS_INT *first,      MUMPS_INT *vertloctab, 
+               MUMPS_INT *edgeloctab, MUMPS_INT *numflag, 
+               MUMPS_INT *options,    MUMPS_INT *order, 
+               MUMPS_INT *sizes,      MUMPS_INT *comm,
+               MUMPS_INT *ierr);
+#endif /*PARMETIS*/
+#endif /* MUMPS_ORDERINGS_H */
diff -ruN MUMPS_5.1.2/src/smumps_restart.F mumps-5.1.2-aster7/src/smumps_restart.F
--- MUMPS_5.1.2/src/smumps_restart.F	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/src/smumps_restart.F	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,2648 @@
+C
+C  This file is part of MUMPS 5.0.2, released
+C  on Fri Jul 15 09:12:54 UTC 2016
+C
+C
+C  Copyright 1991-2016 CERFACS, CNRS, ENS Lyon, INP Toulouse, Inria,
+C  University of Bordeaux.
+C
+C  This version of MUMPS is provided to you free of charge. It is
+C  released under the CeCILL-C license:
+C  http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html
+C
+      SUBROUTINE SMUMPS_STOP(id,OUTFILE)
+      USE SMUMPS_STRUC_DEF
+      IMPLICIT NONE
+      INCLUDE 'mpif.h'
+      CHARACTER(len=*), intent(in) :: OUTFILE
+      INTEGER::i1,i2,NBVARIABLES,NBVARIABLES_ROOT
+      INTEGER::OUT,err,OUTROOT
+      CHARACTER(len=100), allocatable, dimension(:)::VARIABLES
+      CHARACTER(len=100), allocatable, dimension(:)::VARIABLES_ROOT
+      CHARACTER(len=100):: OUTFILEMAIN,OUTFILEROOT
+      CHARACTER(len=3) :: STRING_ID
+      LOGICAL :: error
+      INTEGER MASTER
+      PARAMETER( MASTER = 0 )
+      TYPE (SMUMPS_STRUC) :: id
+      id%IF_RESTARTING=.TRUE.
+      NBVARIABLES=171
+      allocate(VARIABLES(NBVARIABLES))
+      VARIABLES(171)="NB_SINGULAR_VALUES"
+      VARIABLES(170)="SINGULAR_VALUES"
+      VARIABLES(169)="IF_RESTARTING"
+      VARIABLES(168)="L0_OMP_MAPPING"
+      VARIABLES(167)="PTR_LEAFS_L0_OMP"
+      VARIABLES(166)="PERM_L0_OMP"
+      VARIABLES(165)="VIRT_L0_OMP"
+      VARIABLES(164)="PHYS_L0_OMP"
+      VARIABLES(163)="IPOOL_AFTER_L0_OMP"
+      VARIABLES(162)="IPOOL_BEFORE_L0_OMP"
+      VARIABLES(161)="THREAD_LA"
+      VARIABLES(160)="LL0_OMP_MAPPING"
+      VARIABLES(159)="L_VIRT_L0_OMP"
+      VARIABLES(158)="L_PHYS_L0_OMP"
+      VARIABLES(157)="LPOOL_BEFORE_L0_OMP"
+      VARIABLES(156)="LPOOL_AFTER_L0_OMP"
+      VARIABLES(155)="NBGRP"
+      VARIABLES(154)="LRGROUPS"
+      VARIABLES(153)="root"
+      VARIABLES(152)="WORKING"
+      VARIABLES(151)="IPTR_WORKING"
+      VARIABLES(150)="pad14"
+      VARIABLES(149)="SUP_PROC"
+      VARIABLES(148)="PIVNUL_LIST"
+      VARIABLES(147)="OOC_FILE_NAME_LENGTH"
+      VARIABLES(146)="OOC_FILE_NAMES"
+      VARIABLES(145)="OOC_NB_FILE_TYPE"
+      VARIABLES(144)="OOC_NB_FILES"
+      VARIABLES(143)="OOC_TOTAL_NB_NODES"
+      VARIABLES(142)="OOC_VADDR"
+      VARIABLES(141)="OOC_SIZE_OF_BLOCK"
+      VARIABLES(140)="pad13"
+      VARIABLES(139)="OOC_INODE_SEQUENCE"
+      VARIABLES(138)="OOC_MAX_NB_NODES_FOR_ZONE"
+      VARIABLES(137)="INSTANCE_NUMBER"
+      VARIABLES(136)="pad12"
+      VARIABLES(135)="CB_SON_SIZE"
+      VARIABLES(134)="DKEEP"
+      VARIABLES(133)="LWK_USER"
+      VARIABLES(132)="NBSA_LOCAL"
+      VARIABLES(131)="WK_USER"
+      VARIABLES(130)="CROIX_MANU"
+      VARIABLES(129)="SCHED_SBTR"
+      VARIABLES(128)="SCHED_GRP"
+      VARIABLES(127)="SCHED_DEP"
+      VARIABLES(126)="SBTR_ID"
+      VARIABLES(125)="DEPTH_FIRST_SEQ"
+      VARIABLES(124)="DEPTH_FIRST"
+      VARIABLES(123)="MY_NB_LEAF"
+      VARIABLES(122)="MY_FIRST_LEAF"
+      VARIABLES(121)="MY_ROOT_SBTR"
+      VARIABLES(120)="COST_TRAV"
+      VARIABLES(119)="MEM_SUBTREE"
+      VARIABLES(118)="RHSCOMP"
+      VARIABLES(117)="POSINRHSCOMP_COL"
+      VARIABLES(116)="POSINRHSCOMP_ROW"
+      VARIABLES(115)="POSINRHSCOMP_COL_ALLOC"
+      VARIABLES(114)="MEM_DIST"
+      VARIABLES(113)="I_AM_CAND"
+      VARIABLES(112)="TAB_POS_IN_PERE"
+      VARIABLES(111)="FUTURE_NIV2"
+      VARIABLES(110)="ISTEP_TO_INIV2"
+      VARIABLES(109)="CANDIDATES"
+      VARIABLES(108)="ELTPROC"
+      VARIABLES(107)="pad11"
+      VARIABLES(106)="NA_ELT"
+      VARIABLES(105)="LELTVAR"
+      VARIABLES(104)="NELT_loc"
+      VARIABLES(103)="DBLARR"
+      VARIABLES(102)="INTARR"
+      VARIABLES(101)="PROCNODE"
+      VARIABLES(100)="S"
+      VARIABLES(99)="PTRFAC"
+      VARIABLES(98)="PTLUST_S"
+      VARIABLES(97)="PROCNODE_STEPS"
+      VARIABLES(96)="NA"
+      VARIABLES(95)="FRTELT"
+      VARIABLES(94)="FRTPTR"
+      VARIABLES(93)="PTRAR"
+      VARIABLES(92)="FILS"
+      VARIABLES(91)="DAD_STEPS"
+      VARIABLES(90)="FRERE_STEPS"
+      VARIABLES(89)="Step2node"
+      VARIABLES(88)="ND_STEPS"
+      VARIABLES(87)="NE_STEPS"
+      VARIABLES(86)="STEP"
+      VARIABLES(85)="NBSA"
+      VARIABLES(84)="LNA"
+      VARIABLES(83)="KEEP"
+      VARIABLES(82)="Deficiency"
+      VARIABLES(81)="MAXIS1"
+      VARIABLES(80)="IS1"
+      VARIABLES(79)="IS"
+      VARIABLES(78)="BUFR"
+      VARIABLES(77)="POIDS"
+      VARIABLES(76)="LBUFR_BYTES"
+      VARIABLES(75)="LBUFR"
+      VARIABLES(74)="ASS_IRECV"
+      VARIABLES(73)="NSLAVES"
+      VARIABLES(72)="NPROCS"
+      VARIABLES(71)="MYID"
+      VARIABLES(70)="COMM_LOAD"
+      VARIABLES(69)="MYID_NODES"
+      VARIABLES(68)="COMM_NODES"
+      VARIABLES(67)="INST_Number"
+      VARIABLES(66)="MAX_SURF_MASTER"
+      VARIABLES(65)="KEEP8"
+      VARIABLES(64)="pad8"
+      VARIABLES(63)="WRITE_PROBLEM"
+      VARIABLES(62)="OOC_PREFIX"
+      VARIABLES(61)="OOC_TMPDIR"
+      VARIABLES(60)="VERSION_NUMBER"
+      VARIABLES(59)="MAPPING"
+      VARIABLES(58)="LISTVAR_SCHUR"
+      VARIABLES(57)="SCHUR_CINTERFACE"
+      VARIABLES(56)="SCHUR"
+      VARIABLES(55)="SIZE_SCHUR"
+      VARIABLES(54)="SCHUR_LLD"
+      VARIABLES(53)="SCHUR_NLOC"
+      VARIABLES(52)="SCHUR_MLOC"
+      VARIABLES(51)="NBLOCK"
+      VARIABLES(50)="MBLOCK"
+      VARIABLES(49)="NPCOL"
+      VARIABLES(48)="NPROW"
+      VARIABLES(47)="UNS_PERM"
+      VARIABLES(46)="SYM_PERM"
+      VARIABLES(45)="RINFOG"
+      VARIABLES(44)="RINFO"
+      VARIABLES(43)="CNTL"
+      VARIABLES(42)="COST_SUBTREES"
+      VARIABLES(41)="INFOG"
+      VARIABLES(40)="INFO"
+      VARIABLES(39)="ICNTL"
+      VARIABLES(38)="pad5"
+      VARIABLES(37)="LREDRHS"
+      VARIABLES(36)="LSOL_loc"
+      VARIABLES(35)="NZ_RHS"
+      VARIABLES(34)="NRHS"
+      VARIABLES(33)="LRHS"
+      VARIABLES(32)="ISOL_loc"
+      VARIABLES(31)="IRHS_PTR"
+      VARIABLES(30)="IRHS_SPARSE"
+      VARIABLES(29)="SOL_loc"
+      VARIABLES(28)="RHS_SPARSE"
+      VARIABLES(27)="REDRHS"
+      VARIABLES(26)="RHS"
+      VARIABLES(25)="PERM_IN"
+      VARIABLES(24)="pad4"
+      VARIABLES(23)="A_ELT"
+      VARIABLES(22)="ELTVAR"
+      VARIABLES(21)="ELTPTR"
+      VARIABLES(20)="pad3"
+      VARIABLES(19)="NELT"
+      VARIABLES(18)="pad2"
+      VARIABLES(17)="A_loc"
+      VARIABLES(16)="JCN_loc"
+      VARIABLES(15)="IRN_loc"
+      VARIABLES(14)="pad1"
+      VARIABLES(13)="NZ_loc"
+      VARIABLES(12)="pad0"
+      VARIABLES(11)="ROWSCA"
+      VARIABLES(10)="COLSCA"
+      VARIABLES(9)="JCN"
+      VARIABLES(8)="IRN"
+      VARIABLES(7)="A"
+      VARIABLES(6)="NZ"
+      VARIABLES(5)="N"
+      VARIABLES(4)="JOB"
+      VARIABLES(3)="PAR"
+      VARIABLES(2)="SYM"
+      VARIABLES(1)="COMM"
+      NBVARIABLES_ROOT=34
+      allocate(VARIABLES_ROOT(NBVARIABLES_ROOT))
+      VARIABLES_ROOT(34)="NB_SINGULAR_VALUES"
+      VARIABLES_ROOT(33)="SINGULAR_VALUES"
+      VARIABLES_ROOT(32)="SVD_VT"
+      VARIABLES_ROOT(31)="SVD_U"
+      VARIABLES_ROOT(30)="gridinit_done"
+      VARIABLES_ROOT(29)="yes"
+      VARIABLES_ROOT(28)="rootpad3"
+      VARIABLES_ROOT(27)="QR_RCOND"
+      VARIABLES_ROOT(26)="rootpad"
+      VARIABLES_ROOT(25)="RHS_ROOT"
+      VARIABLES_ROOT(24)="rootpad2"
+      VARIABLES_ROOT(23)="QR_TAU"
+      VARIABLES_ROOT(22)="SCHUR_POINTER"
+      VARIABLES_ROOT(21)="RHS_CNTR_MASTER_ROOT"
+      VARIABLES_ROOT(20)="rootpad1"
+      VARIABLES_ROOT(19)="IPIV"
+      VARIABLES_ROOT(18)="RG2L_COL"
+      VARIABLES_ROOT(17)="RG2L_ROW"
+      VARIABLES_ROOT(16)="rootpad0"
+      VARIABLES_ROOT(15)="LPIV"
+      VARIABLES_ROOT(14)="CNTXT_BLACS"
+      VARIABLES_ROOT(13)="DESCRIPTOR"
+      VARIABLES_ROOT(12)="TOT_ROOT_SIZE"
+      VARIABLES_ROOT(11)="ROOT_SIZE"
+      VARIABLES_ROOT(10)="RHS_NLOC"
+      VARIABLES_ROOT(9)="SCHUR_LLD"
+      VARIABLES_ROOT(8)="SCHUR_NLOC"
+      VARIABLES_ROOT(7)="SCHUR_MLOC"
+      VARIABLES_ROOT(6)="MYCOL"
+      VARIABLES_ROOT(5)="MYROW"
+      VARIABLES_ROOT(4)="NPCOL"
+      VARIABLES_ROOT(3)="NPROW"
+      VARIABLES_ROOT(2)="NBLOCK"
+      VARIABLES_ROOT(1)="MBLOCK"
+      if(((id%ICNTL(3).GT.0).AND.(id%MYID .EQ. MASTER))) then
+         write(*,*) "DUMPING MUMPS STRUCTURE IN FILE:",OUTFILE
+      endif
+      error=.false.
+      write (STRING_ID, '(i3)') id%MYID
+      OUT=42+id%MYID
+      OUTFILEMAIN=trim(adjustl(OUTFILE)) // trim(adjustl(STRING_ID))
+      open(UNIT=OUT,FILE=OUTFILEMAIN,STATUS='replace',
+     &     form='unformatted',iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN SMUMPS_STOP CANNOT OPEN FILE: "
+     &        //trim(adjustl(OUTFILEMAIN))
+         error=.true.
+         goto 100
+      endif      
+      DO i1=1,NBVARIABLES 
+         SELECT CASE(trim(adjustl(VARIABLES(i1))))
+         CASE("COMM") 
+         CASE("SYM")
+         CASE("PAR")
+         CASE("JOB")
+            write(OUT) id%JOB
+         CASE("N")
+            write(OUT) id%N
+         CASE("ICNTL")
+            write(OUT) id%ICNTL
+         CASE("INFO")
+            write(OUT) id%INFO
+         CASE("INFOG")
+            write(OUT) id%INFOG
+         CASE("COST_SUBTREES")
+            write(OUT) id%COST_SUBTREES
+         CASE("CNTL")
+            write(OUT) id%CNTL
+         CASE("RINFO")
+            write(OUT) id%RINFO
+         CASE("RINFOG")
+            write(OUT) id%RINFOG
+         CASE("KEEP8")
+            write(OUT) id%KEEP8
+         CASE("KEEP")
+            write(OUT) id%KEEP
+         CASE("DKEEP")
+            write(OUT) id%DKEEP    
+         CASE("NZ")
+            write(OUT) id%NZ
+         CASE("A")
+            IF(associated(id%A)) THEN
+               write(OUT) size(id%A,1)
+               write(OUT) id%A
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IRN")
+            IF(associated(id%IRN)) THEN
+               write(OUT) size(id%IRN,1)
+               write(OUT) id%IRN
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("JCN")
+            IF(associated(id%JCN)) THEN
+               write(OUT) size(id%JCN,1)
+               write(OUT) id%JCN
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("COLSCA")
+            IF(associated(id%COLSCA)) THEN
+               write(OUT) size(id%COLSCA,1)
+               write(OUT) id%COLSCA
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF 
+         CASE("ROWSCA")
+            IF(associated(id%ROWSCA)) THEN
+               write(OUT) size(id%ROWSCA,1)
+               write(OUT) id%ROWSCA
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NZ_loc")
+            write(OUT) id%NZ_loc
+         CASE("IRN_loc")
+            IF(associated(id%IRN_loc)) THEN
+               write(OUT) size(id%IRN_loc,1)
+               write(OUT) id%IRN_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("JCN_loc")
+            IF(associated(id%JCN_loc)) THEN
+               write(OUT) size(id%JCN_loc,1)
+               write(OUT) id%JCN_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("A_loc")
+            IF(associated(id%A_loc)) THEN
+               write(OUT) size(id%A_loc,1)
+               write(OUT) id%A_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NELT")
+            write(OUT) id%NELT
+         CASE("ELTPTR")
+            IF(associated(id%ELTPTR)) THEN
+               write(OUT) size(id%ELTPTR,1)
+               write(OUT) id%ELTPTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("ELTVAR")
+            IF(associated(id%ELTVAR)) THEN
+               write(OUT) size(id%ELTVAR,1)
+               write(OUT) id%ELTVAR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("A_ELT")
+            IF(associated(id%A_ELT)) THEN
+               write(OUT) size(id%A_ELT,1)
+               write(OUT) id%A_ELT
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PERM_IN")
+            IF(associated(id%PERM_IN)) THEN
+               write(OUT) size(id%PERM_IN,1)
+               write(OUT) id%PERM_IN
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("RHS")
+            IF(associated(id%RHS)) THEN
+               write(OUT) size(id%RHS,1)
+               write(OUT) id%RHS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("REDRHS")
+            IF(associated(id%REDRHS)) THEN
+               write(OUT) size(id%REDRHS,1)
+               write(OUT) id%REDRHS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("RHS_SPARSE")
+            IF(associated(id%RHS_SPARSE)) THEN
+               write(OUT) size(id%RHS_SPARSE,1)
+               write(OUT) id%RHS_SPARSE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SOL_loc")
+            IF(associated(id%SOL_loc)) THEN
+               write(OUT) size(id%SOL_loc,1)
+               write(OUT) id%SOL_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IRHS_SPARSE")
+            IF(associated(id%IRHS_SPARSE)) THEN
+               write(OUT) size(id%IRHS_SPARSE,1)
+               write(OUT) id%IRHS_SPARSE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IRHS_PTR")
+            IF(associated(id%IRHS_PTR)) THEN
+               write(OUT) size(id%IRHS_PTR,1)
+               write(OUT) id%IRHS_PTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("ISOL_loc")
+            IF(associated(id%ISOL_loc)) THEN
+               write(OUT) size(id%ISOL_loc,1)
+               write(OUT) id%ISOL_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("LRHS")
+            write(OUT) id%LRHS
+         CASE("NRHS")
+            write(OUT) id%NRHS
+         CASE("NZ_RHS")
+            write(OUT) id%NZ_RHS
+         CASE("LSOL_loc")
+            write(OUT) id%LSOL_loc
+         CASE("LREDRHS")
+            write(OUT) id%LREDRHS
+         CASE("SYM_PERM")
+            IF(associated(id%SYM_PERM)) THEN
+               write(OUT) size(id%SYM_PERM,1)
+               write(OUT) id%SYM_PERM
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("UNS_PERM")
+            IF(associated(id%UNS_PERM)) THEN
+               write(OUT) size(id%UNS_PERM,1)
+               write(OUT) id%UNS_PERM
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NPROW")
+            write(OUT) id%NPROW
+         CASE("NPCOL")
+            write(OUT) id%NPCOL
+         CASE("MBLOCK")
+            write(OUT) id%MBLOCK
+         CASE("NBLOCK")
+            write(OUT) id%NBLOCK
+         CASE("SCHUR_MLOC")
+            write(OUT) id%SCHUR_MLOC
+         CASE("SCHUR_NLOC")
+            write(OUT) id%SCHUR_NLOC
+         CASE("SCHUR_LLD")
+            write(OUT) id%SCHUR_LLD
+         CASE("SIZE_SCHUR")
+            write(OUT) id%SIZE_SCHUR
+         CASE("SCHUR")
+            IF(associated(id%SCHUR)) THEN
+               write(OUT) size(id%SCHUR,1)
+               write(OUT) id%SCHUR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SCHUR_CINTERFACE")
+            IF(associated(id%SCHUR_CINTERFACE)) THEN
+               write(OUT) size(id%SCHUR_CINTERFACE,1)
+               write(OUT) id%SCHUR_CINTERFACE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("LISTVAR_SCHUR")
+            IF(associated(id%LISTVAR_SCHUR)) THEN
+               write(OUT) size(id%LISTVAR_SCHUR,1)
+               write(OUT) id%LISTVAR_SCHUR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MAPPING")
+            IF(associated(id%MAPPING)) THEN
+               write(OUT) size(id%MAPPING,1)
+               write(OUT) id%MAPPING
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("VERSION_NUMBER")
+            write(OUT) id%VERSION_NUMBER
+         CASE("OOC_TMPDIR")
+            write(OUT) id%OOC_TMPDIR
+         CASE("OOC_PREFIX")
+            write(OUT) id%OOC_PREFIX
+         CASE("WRITE_PROBLEM")
+            write(OUT) id%WRITE_PROBLEM
+         CASE("MAX_SURF_MASTER")
+            write(OUT) id%MAX_SURF_MASTER
+         CASE("INST_Number")
+            write(OUT) id%INST_Number
+         CASE("COMM_NODES")
+            write(OUT) id%COMM_NODES
+         CASE("MYID_NODES")
+            write(OUT) id%MYID_NODES
+         CASE("COMM_LOAD")
+            write(OUT) id%COMM_LOAD
+         CASE("MYID")
+            write(OUT) id%MYID
+         CASE("NPROCS")
+            write(OUT) id%NPROCS
+         CASE("NSLAVES")
+            write(OUT) id%NSLAVES
+         CASE("ASS_IRECV")
+            write(OUT) id%ASS_IRECV
+         CASE("LBUFR")
+            write(OUT) id%LBUFR
+         CASE("LBUFR_BYTES")
+            write(OUT) id%LBUFR_BYTES
+         CASE("POIDS")
+            IF(associated(id%POIDS)) THEN 
+               write(OUT) size(id%POIDS,1)
+               write(OUT) id%POIDS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("BUFR")
+            IF(associated(id%BUFR)) THEN 
+               write(OUT) size(id%BUFR,1)
+               write(OUT) id%BUFR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IS")
+            IF(associated(id%IS)) THEN 
+               write(OUT) size(id%IS,1)
+               write(OUT) id%IS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IS1")
+            IF(associated(id%IS1)) THEN 
+               write(OUT) size(id%IS1,1)
+               write(OUT) id%IS1
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MAXIS1")
+            write(OUT) id%MAXIS1
+         CASE("Deficiency")
+            write(OUT) id%Deficiency
+         CASE("LNA")
+            write(OUT) id%LNA
+         CASE("NBSA")
+            write(OUT) id%NBSA
+         CASE("STEP")
+            IF(associated(id%STEP)) THEN
+               write(OUT) size(id%STEP,1)
+               write(OUT) id%STEP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NE_STEPS")
+            IF(associated(id%NE_STEPS)) THEN
+               write(OUT) size(id%NE_STEPS,1)
+               write(OUT) id%NE_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("ND_STEPS")
+            IF(associated(id%ND_STEPS)) THEN
+               write(OUT) size(id%ND_STEPS,1)
+               write(OUT) id%ND_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("Step2node")
+            IF(associated(id%Step2node)) THEN
+               write(OUT) size(id%Step2node,1)
+               write(OUT) id%Step2node
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FRERE_STEPS")
+            IF(associated(id%FRERE_STEPS)) THEN
+               write(OUT) size(id%FRERE_STEPS,1)
+               write(OUT) id%FRERE_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DAD_STEPS")
+            IF(associated(id%DAD_STEPS)) THEN
+               write(OUT) size(id%DAD_STEPS,1)
+               write(OUT) id%DAD_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FILS")
+            IF(associated(id%FILS)) THEN
+               write(OUT) size(id%FILS,1)
+               write(OUT) id%FILS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PTRAR")
+            IF(associated(id%PTRAR)) THEN
+               write(OUT) size(id%PTRAR,1)
+               write(OUT) id%PTRAR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FRTPTR")
+            IF(associated(id%FRTPTR)) THEN
+               write(OUT) size(id%FRTPTR,1)
+               write(OUT) id%FRTPTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FRTELT")
+            IF(associated(id%FRTELT)) THEN
+               write(OUT) size(id%FRTELT,1)
+               write(OUT) id%FRTELT
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NA")
+            IF(associated(id%NA)) THEN
+               write(OUT) size(id%NA,1)
+               write(OUT) id%NA
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PROCNODE_STEPS")
+            IF(associated(id%PROCNODE_STEPS)) THEN
+               write(OUT) size(id%PROCNODE_STEPS,1)
+               write(OUT) id%PROCNODE_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PTLUST_S")
+            IF(associated(id%PTLUST_S)) THEN
+               write(OUT) size(id%PTLUST_S,1)
+               write(OUT) id%PTLUST_S
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PTRFAC")
+            IF(associated(id%PTRFAC)) THEN
+               write(OUT) size(id%PTRFAC,1)
+               write(OUT) id%PTRFAC
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("S")
+            IF(associated(id%S)) THEN
+               write(OUT) id%KEEP8(23)
+               write(OUT) id%S
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PROCNODE")
+            IF(associated(id%PROCNODE)) THEN
+               write(OUT) size(id%PROCNODE,1)
+               write(OUT) id%PROCNODE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("INTARR")
+            IF(associated(id%INTARR)) THEN
+               write(OUT) size(id%INTARR,1)
+               write(OUT) id%INTARR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DBLARR")
+            IF(associated(id%DBLARR)) THEN
+               write(OUT) size(id%DBLARR,1)
+               write(OUT) id%DBLARR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NELT_loc")
+            write(OUT) id%NELT_loc
+         CASE("LELTVAR")
+            write(OUT) id%LELTVAR
+         CASE("NA_ELT")
+            write(OUT) id%NA_ELT
+         CASE("ELTPROC")
+            IF(associated(id%ELTPROC)) THEN
+               write(OUT) size(id%ELTPROC,1)
+               write(OUT) id%ELTPROC
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("CANDIDATES")
+            IF(associated(id%CANDIDATES)) THEN
+               write(OUT) size(id%CANDIDATES,1)
+     &              ,size(id%CANDIDATES,2)
+               write(OUT) id%CANDIDATES
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("ISTEP_TO_INIV2")
+            IF(associated(id%ISTEP_TO_INIV2)) THEN
+               write(OUT) size(id%ISTEP_TO_INIV2,1)
+               write(OUT) id%ISTEP_TO_INIV2
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FUTURE_NIV2")
+            IF(associated(id%FUTURE_NIV2)) THEN
+               write(OUT) size(id%FUTURE_NIV2,1)
+               write(OUT) id%FUTURE_NIV2
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("TAB_POS_IN_PERE")
+            IF(associated(id%TAB_POS_IN_PERE)) THEN
+               write(OUT) size(id%TAB_POS_IN_PERE,1)
+     &              ,size(id%TAB_POS_IN_PERE,2)
+               write(OUT) id%TAB_POS_IN_PERE
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("I_AM_CAND")
+            IF(associated(id%I_AM_CAND)) THEN
+               write(OUT) size(id%I_AM_CAND,1)
+               write(OUT) id%I_AM_CAND
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MEM_DIST")
+            IF(associated(id%MEM_DIST)) THEN
+               write(OUT) size(id%MEM_DIST,1)
+               write(OUT) id%MEM_DIST
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("POSINRHSCOMP_ROW")
+            IF(associated(id%POSINRHSCOMP_ROW)) THEN 
+               write(OUT) size(id%POSINRHSCOMP_ROW,1)
+               write(OUT) id%POSINRHSCOMP_ROW
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("POSINRHSCOMP_COL_ALLOC")
+            write(OUT) id%POSINRHSCOMP_COL_ALLOC
+         CASE("POSINRHSCOMP_COL")
+            IF(associated(id%POSINRHSCOMP_COL)) THEN
+               IF(id%POSINRHSCOMP_COL_ALLOC) THEN
+                  write(OUT) size(id%POSINRHSCOMP_COL,1)
+                  write(OUT) id%POSINRHSCOMP_COL
+               ELSE
+                  write(OUT) size(id%POSINRHSCOMP_COL,1)
+                  write(OUT) -999
+               ENDIF
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("RHSCOMP")
+            IF(associated(id%RHSCOMP)) THEN
+               write(OUT) size(id%RHSCOMP,1)
+               write(OUT) id%RHSCOMP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MEM_SUBTREE")
+            IF(associated(id%MEM_SUBTREE)) THEN
+               write(OUT) size(id%MEM_SUBTREE,1)
+               write(OUT) id%MEM_SUBTREE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("COST_TRAV")
+            IF(associated(id%COST_TRAV)) THEN
+               write(OUT) size(id%COST_TRAV,1)
+               write(OUT) id%COST_TRAV
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MY_ROOT_SBTR")
+            IF(associated(id%MY_ROOT_SBTR)) THEN
+               write(OUT) size(id%MY_ROOT_SBTR,1)
+               write(OUT) id%MY_ROOT_SBTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MY_FIRST_LEAF")
+            IF(associated(id%MY_FIRST_LEAF)) THEN
+               write(OUT) size(id%MY_FIRST_LEAF,1)
+               write(OUT) id%MY_FIRST_LEAF
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MY_NB_LEAF")
+            IF(associated(id%MY_NB_LEAF)) THEN
+               write(OUT) size(id%MY_NB_LEAF,1)
+               write(OUT) id%MY_NB_LEAF
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DEPTH_FIRST")
+            IF(associated(id%DEPTH_FIRST)) THEN
+               write(OUT) size(id%DEPTH_FIRST,1)
+               write(OUT) id%DEPTH_FIRST
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DEPTH_FIRST_SEQ")
+            IF(associated(id%DEPTH_FIRST_SEQ)) THEN
+               write(OUT) size(id%DEPTH_FIRST_SEQ,1)
+               write(OUT) id%DEPTH_FIRST_SEQ
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SBTR_ID")
+            IF(associated(id%SBTR_ID)) THEN
+               write(OUT) size(id%SBTR_ID,1)
+               write(OUT) id%SBTR_ID
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SCHED_DEP")
+            IF(associated(id%SCHED_DEP)) THEN
+               write(OUT) size(id%SCHED_DEP,1)
+               write(OUT) id%SCHED_DEP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SCHED_GRP")
+            IF(associated(id%SCHED_GRP)) THEN
+               write(OUT) size(id%SCHED_GRP,1)
+               write(OUT) id%SCHED_GRP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("CROIX_MANU")
+            IF(associated(id%CROIX_MANU)) THEN
+               write(OUT) size(id%CROIX_MANU,1)
+               write(OUT) id%CROIX_MANU
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("WK_USER")
+            IF(associated(id%WK_USER)) THEN
+               write(OUT) id%KEEP8(24)
+               write(OUT) id%WK_USER
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NBSA_LOCAL")
+            write(OUT) id%NBSA_LOCAL
+         CASE("LWK_USER")
+            write(OUT) id%LWK_USER
+         CASE("CB_SON_SIZE")
+            IF(associated(id%CB_SON_SIZE)) THEN
+               write(OUT) size(id%CB_SON_SIZE,1)
+               write(OUT) id%CB_SON_SIZE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("INSTANCE_NUMBER")
+            write(OUT) id%INSTANCE_NUMBER
+         CASE("OOC_MAX_NB_NODES_FOR_ZONE")
+            write(OUT) id%OOC_MAX_NB_NODES_FOR_ZONE
+         CASE("OOC_INODE_SEQUENCE")
+            IF(associated(id%OOC_INODE_SEQUENCE)) THEN
+               write(OUT) size(id%OOC_INODE_SEQUENCE,1)
+     &              ,size(id%OOC_INODE_SEQUENCE,2)
+               write(OUT) id%OOC_INODE_SEQUENCE
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_SIZE_OF_BLOCK")
+            IF(associated(id%OOC_SIZE_OF_BLOCK)) THEN
+               write(OUT) size(id%OOC_SIZE_OF_BLOCK,1)
+     &              ,size(id%OOC_SIZE_OF_BLOCK,2)  
+               write(OUT) id%OOC_SIZE_OF_BLOCK
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_VADDR")
+            IF(associated(id%OOC_VADDR)) THEN
+               write(OUT) size(id%OOC_VADDR,1),size(id%OOC_VADDR,2)
+               write(OUT) id%OOC_VADDR
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_TOTAL_NB_NODES")
+            IF(associated(id%OOC_TOTAL_NB_NODES)) THEN
+               write(OUT) size(id%OOC_TOTAL_NB_NODES,1)
+               write(OUT) id%OOC_TOTAL_NB_NODES
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_NB_FILES")
+            IF(associated(id%OOC_NB_FILES)) THEN
+               write(OUT) size(id%OOC_NB_FILES,1)
+               write(OUT) id%OOC_NB_FILES
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_NB_FILE_TYPE")
+            write(OUT) id%OOC_NB_FILE_TYPE
+         CASE("OOC_FILE_NAMES")
+            IF(associated(id%OOC_FILE_NAMES)) THEN
+               write(OUT) size(id%OOC_FILE_NAMES,1)
+     &              ,size(id%OOC_FILE_NAMES,2)
+               write(OUT) id%OOC_FILE_NAMES
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_FILE_NAME_LENGTH")
+            IF(associated(id%OOC_FILE_NAME_LENGTH)) THEN
+               write(OUT) size(id%OOC_FILE_NAME_LENGTH,1)
+               write(OUT) id%OOC_FILE_NAME_LENGTH
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PIVNUL_LIST")
+            IF(associated(id%PIVNUL_LIST)) THEN
+               write(OUT) size(id%PIVNUL_LIST,1)
+               write(OUT) id%PIVNUL_LIST
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SUP_PROC")
+            IF(associated(id%SUP_PROC)) THEN
+               write(OUT) size(id%SUP_PROC,1),size(id%SUP_PROC,2)
+               write(OUT) id%SUP_PROC
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("IPTR_WORKING")
+            IF(associated(id%IPTR_WORKING)) THEN
+               write(OUT) size(id%IPTR_WORKING,1)
+               write(OUT) id%IPTR_WORKING
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("WORKING")
+            IF(associated(id%WORKING)) THEN
+               write(OUT) size(id%WORKING,1)
+               write(OUT) id%WORKING
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("root")
+         CASE("NBGRP")
+           write(OUT) id%NBGRP
+        CASE("LRGROUPS")
+           IF(associated(id%LRGROUPS)) THEN
+              write(OUT) size(id%LRGROUPS,1)
+              write(OUT) id%LRGROUPS
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("SCHED_SBTR")
+           IF(associated(id%SCHED_SBTR)) THEN
+              write(OUT) size(id%SCHED_SBTR,1)
+              write(OUT) id%SCHED_SBTR
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("LPOOL_AFTER_L0_OMP")
+           write(OUT) id%LPOOL_AFTER_L0_OMP
+        CASE("LPOOL_BEFORE_L0_OMP")
+           write(OUT) id%LPOOL_BEFORE_L0_OMP
+        CASE("L_PHYS_L0_OMP")
+           write(OUT) id%L_PHYS_L0_OMP
+        CASE("L_VIRT_L0_OMP")        
+           write(OUT) id%L_VIRT_L0_OMP
+        CASE("LL0_OMP_MAPPING")
+           write(OUT) id%LL0_OMP_MAPPING
+        CASE("THREAD_LA")
+           write(OUT) id%THREAD_LA
+        CASE("IPOOL_AFTER_L0_OMP")
+           IF(associated(id%IPOOL_AFTER_L0_OMP)) THEN
+              write(OUT) size(id%IPOOL_AFTER_L0_OMP,1)
+              write(OUT) id%IPOOL_AFTER_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("IPOOL_BEFORE_L0_OMP")
+           IF(associated(id%IPOOL_BEFORE_L0_OMP)) THEN
+              write(OUT) size(id%IPOOL_BEFORE_L0_OMP,1)
+              write(OUT) id%IPOOL_BEFORE_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("PHYS_L0_OMP")
+           IF(associated(id%PHYS_L0_OMP)) THEN
+              write(OUT) size(id%PHYS_L0_OMP,1)
+              write(OUT) id%PHYS_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("VIRT_L0_OMP")
+           IF(associated(id%VIRT_L0_OMP)) THEN
+              write(OUT) size(id%VIRT_L0_OMP,1)
+              write(OUT) id%VIRT_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("PERM_L0_OMP")
+           IF(associated(id%PERM_L0_OMP)) THEN
+              write(OUT) size(id%PERM_L0_OMP,1)
+              write(OUT) id%PERM_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("PTR_LEAFS_L0_OMP")
+           IF(associated(id%PTR_LEAFS_L0_OMP)) THEN
+              write(OUT) size(id%PTR_LEAFS_L0_OMP,1)
+              write(OUT) id%PTR_LEAFS_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("L0_OMP_MAPPING")
+          IF(associated(id%L0_OMP_MAPPING)) THEN
+              write(OUT) size(id%L0_OMP_MAPPING,1)
+              write(OUT) id%L0_OMP_MAPPING
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("IF_RESTARTING")
+           write(OUT) id%IF_RESTARTING
+      CASE("SINGULAR_VALUES")
+         IF(associated(id%SINGULAR_VALUES)) THEN
+            write(OUT) size(id%SINGULAR_VALUES,1)
+            write(OUT) id%SINGULAR_VALUES
+         ELSE
+            write(OUT) -999,-998
+            write(OUT) -999
+         ENDIF 
+      CASE("NB_SINGULAR_VALUES")
+        write(OUT) id%NB_SINGULAR_VALUES
+        CASE("pad0","pad1","pad2","pad3","pad4","pad5","pad8","pad11",
+     &          "pad111", "pad12","pad13","pad14")
+        CASE DEFAULT
+           id%INFOG(1)=-92
+           write(*,*) "IN SMUMPS_STOP UNKNOWN VARIABLE IN STRUCTURE: "
+     &          // trim(adjustl(VARIABLES(i1)))
+           error=.true.
+           goto 100
+        END SELECT
+      ENDDO
+ 100  continue
+      CLOSE(OUT)
+      if(error) goto 101
+      OUTROOT=OUT+1000
+      OUTFILEROOT=trim(adjustl(OUTFILE)) // trim(adjustl("ROOT")) 
+     &     // trim(adjustl(STRING_ID))
+      open(UNIT=OUTROOT,FILE=OUTFILEROOT,STATUS='replace',
+     &     form='unformatted',iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN SMUMPS_STOP CANNOT OPEN FILE: "
+     &        //trim(adjustl(OUTFILEROOT))
+         goto 100
+      endif
+      DO i2=1,NBVARIABLES_ROOT
+         SELECT CASE(VARIABLES_ROOT(i2))
+      CASE("MBLOCK")
+         write(OUTROOT) id%root%MBLOCK
+      CASE("NBLOCK")
+         write(OUTROOT) id%root%NBLOCK
+      CASE("NPROW")
+         write(OUTROOT) id%root%NPROW
+      CASE("NPCOL")
+         write(OUTROOT) id%root%NPCOL
+      CASE("MYROW")
+         write(OUTROOT) id%root%MYROW
+      CASE("MYCOL")
+         write(OUTROOT) id%root%MYCOL
+      CASE("SCHUR_MLOC")
+         write(OUTROOT) id%root%SCHUR_MLOC
+      CASE("SCHUR_NLOC")
+         write(OUTROOT) id%root%SCHUR_NLOC
+      CASE("SCHUR_LLD")
+         write(OUTROOT) id%root%SCHUR_LLD
+      CASE("RHS_NLOC")
+         write(OUTROOT) id%root%RHS_NLOC
+      CASE("ROOT_SIZE")
+         write(OUTROOT) id%root%ROOT_SIZE
+      CASE("TOT_ROOT_SIZE")
+         write(OUTROOT) id%root%TOT_ROOT_SIZE
+      CASE("DESCRIPTOR")
+         write(OUTROOT) id%root%DESCRIPTOR
+      CASE("CNTXT_BLACS")
+         write(OUTROOT) id%root%CNTXT_BLACS
+      CASE("LPIV")
+         write(OUTROOT) id%root%LPIV
+      CASE("RG2L_ROW")
+         IF(associated(id%root%RG2L_ROW)) THEN
+            write(OUTROOT) size(id%root%RG2L_ROW,1)
+            write(OUTROOT) id%root%RG2L_ROW
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("RG2L_COL")
+         IF(associated(id%root%RG2L_COL)) THEN
+            write(OUTROOT) size(id%root%RG2L_COL,1)
+            write(OUTROOT) id%root%RG2L_COL
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("IPIV")
+         IF(associated(id%root%IPIV)) THEN
+            write(OUTROOT) size(id%root%IPIV,1)
+            write(OUTROOT) id%root%IPIV
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("RHS_CNTR_MASTER_ROOT")
+         IF(associated(id%root%RHS_CNTR_MASTER_ROOT)) THEN
+            write(OUTROOT) size(id%root%RHS_CNTR_MASTER_ROOT,1)
+            write(OUTROOT) id%root%RHS_CNTR_MASTER_ROOT
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("SCHUR_POINTER")
+         IF(associated(id%root%SCHUR_POINTER)) THEN
+            write(OUTROOT) size(id%root%SCHUR_POINTER,1)
+            write(OUTROOT) id%root%SCHUR_POINTER
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("QR_TAU")
+         IF(associated(id%root%QR_TAU)) THEN
+            write(OUTROOT) size(id%root%QR_TAU,1)
+            write(OUTROOT) id%root%QR_TAU
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("RHS_ROOT")
+         IF(associated(id%root%RHS_ROOT)) THEN
+            write(OUTROOT) size(id%root%RHS_ROOT,1)
+     &           ,size(id%root%RHS_ROOT,2)
+            write(OUTROOT) id%root%RHS_ROOT
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF
+      CASE("QR_RCOND")
+         write(OUTROOT) id%root%QR_RCOND
+      CASE("yes")
+         write(OUTROOT) id%root%yes
+      CASE("gridinit_done")
+         write(OUTROOT) id%root%gridinit_done
+      CASE("SVD_U")
+         IF(associated(id%root%SVD_U)) THEN
+            write(OUTROOT) size(id%root%SVD_U,1)
+     &           ,size(id%root%SVD_U,2)
+            write(OUTROOT) id%root%SVD_U
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF   
+      CASE("SVD_VT")
+         IF(associated(id%root%SVD_VT)) THEN
+            write(OUTROOT) size(id%root%SVD_VT,1)
+     &           ,size(id%root%SVD_VT,2)
+            write(OUTROOT) id%root%SVD_VT
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF  
+      CASE("SINGULAR_VALUES")
+         IF(associated(id%root%SINGULAR_VALUES)) THEN
+            write(OUTROOT) size(id%root%SINGULAR_VALUES,1)
+            write(OUTROOT) id%root%SINGULAR_VALUES
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF 
+      CASE("NB_SINGULAR_VALUES")
+         write(OUTROOT) id%root%NB_SINGULAR_VALUES
+      CASE("rootpad0","rootpad1","rootpad2","rootpad",
+     &        "rootpad3")
+      CASE DEFAULT
+         id%INFOG(1)=-92
+         write(*,*) "IN SMUMPS_STOP UNKNOWN VARIABLE"
+     &        // "IN ROOT: " // trim(adjustl(VARIABLES_ROOT(i2)))
+         goto 101
+      END SELECT  
+      ENDDO
+ 101  continue
+      CLOSE(OUTROOT)
+      END SUBROUTINE SMUMPS_STOP
+      SUBROUTINE SMUMPS_RESTART(id,INFILE)
+      USE SMUMPS_STRUC_DEF
+      IMPLICIT NONE
+      INCLUDE 'mpif.h'
+      INTEGER::IN,err,NBVARIABLES,i1,NBVARIABLES_ROOT,dummy
+      INTEGER:: i2,size_array1,size_array2,INROOT
+      CHARACTER(len=100),allocatable,DIMENSION(:)::VARIABLES
+      CHARACTER(len=100),allocatable,DIMENSION(:)::VARIABLES_ROOT
+      CHARACTER(len=*), intent(in):: INFILE
+      CHARACTER(len=100):: INFILEMAIN,INFILEROOT
+      CHARACTER(len=3) :: STRING_ID
+      LOGICAL :: error
+      INTEGER MASTER
+      PARAMETER( MASTER = 0 )
+      TYPE (SMUMPS_STRUC) :: id
+      error=.false.
+      write (STRING_ID, '(i3)') id%MYID
+      NBVARIABLES=171
+      allocate(VARIABLES(NBVARIABLES))
+      VARIABLES(171)="NB_SINGULAR_VALUES"
+      VARIABLES(170)="SINGULAR_VALUES"
+      VARIABLES(169)="IF_RESTARTING"
+      VARIABLES(168)="L0_OMP_MAPPING"
+      VARIABLES(167)="PTR_LEAFS_L0_OMP"
+      VARIABLES(166)="PERM_L0_OMP"
+      VARIABLES(165)="VIRT_L0_OMP"
+      VARIABLES(164)="PHYS_L0_OMP"
+      VARIABLES(163)="IPOOL_AFTER_L0_OMP"
+      VARIABLES(162)="IPOOL_BEFORE_L0_OMP"
+      VARIABLES(161)="THREAD_LA"
+      VARIABLES(160)="LL0_OMP_MAPPING"
+      VARIABLES(159)="L_VIRT_L0_OMP"
+      VARIABLES(158)="L_PHYS_L0_OMP"
+      VARIABLES(157)="LPOOL_BEFORE_L0_OMP"
+      VARIABLES(156)="LPOOL_AFTER_L0_OMP"
+      VARIABLES(155)="NBGRP"
+      VARIABLES(154)="LRGROUPS"
+      VARIABLES(153)="root"
+      VARIABLES(152)="WORKING"
+      VARIABLES(151)="IPTR_WORKING"
+      VARIABLES(150)="pad14"
+      VARIABLES(149)="SUP_PROC"
+      VARIABLES(148)="PIVNUL_LIST"
+      VARIABLES(147)="OOC_FILE_NAME_LENGTH"
+      VARIABLES(146)="OOC_FILE_NAMES"
+      VARIABLES(145)="OOC_NB_FILE_TYPE"
+      VARIABLES(144)="OOC_NB_FILES"
+      VARIABLES(143)="OOC_TOTAL_NB_NODES"
+      VARIABLES(142)="OOC_VADDR"
+      VARIABLES(141)="OOC_SIZE_OF_BLOCK"
+      VARIABLES(140)="pad13"
+      VARIABLES(139)="OOC_INODE_SEQUENCE"
+      VARIABLES(138)="OOC_MAX_NB_NODES_FOR_ZONE"
+      VARIABLES(137)="INSTANCE_NUMBER"
+      VARIABLES(136)="pad12"
+      VARIABLES(135)="CB_SON_SIZE"
+      VARIABLES(134)="DKEEP"
+      VARIABLES(133)="LWK_USER"
+      VARIABLES(132)="NBSA_LOCAL"
+      VARIABLES(131)="WK_USER"
+      VARIABLES(130)="CROIX_MANU"
+      VARIABLES(129)="SCHED_SBTR"
+      VARIABLES(128)="SCHED_GRP"
+      VARIABLES(127)="SCHED_DEP"
+      VARIABLES(126)="SBTR_ID"
+      VARIABLES(125)="DEPTH_FIRST_SEQ"
+      VARIABLES(124)="DEPTH_FIRST"
+      VARIABLES(123)="MY_NB_LEAF"
+      VARIABLES(122)="MY_FIRST_LEAF"
+      VARIABLES(121)="MY_ROOT_SBTR"
+      VARIABLES(120)="COST_TRAV"
+      VARIABLES(119)="MEM_SUBTREE"
+      VARIABLES(118)="RHSCOMP"
+      VARIABLES(117)="POSINRHSCOMP_COL"
+      VARIABLES(116)="POSINRHSCOMP_ROW"
+      VARIABLES(115)="POSINRHSCOMP_COL_ALLOC"
+      VARIABLES(114)="MEM_DIST"
+      VARIABLES(113)="I_AM_CAND"
+      VARIABLES(112)="TAB_POS_IN_PERE"
+      VARIABLES(111)="FUTURE_NIV2"
+      VARIABLES(110)="ISTEP_TO_INIV2"
+      VARIABLES(109)="CANDIDATES"
+      VARIABLES(108)="ELTPROC"
+      VARIABLES(107)="pad11"
+      VARIABLES(106)="NA_ELT"
+      VARIABLES(105)="LELTVAR"
+      VARIABLES(104)="NELT_loc"
+      VARIABLES(103)="DBLARR"
+      VARIABLES(102)="INTARR"
+      VARIABLES(101)="PROCNODE"
+      VARIABLES(100)="S"
+      VARIABLES(99)="PTRFAC"
+      VARIABLES(98)="PTLUST_S"
+      VARIABLES(97)="PROCNODE_STEPS"
+      VARIABLES(96)="NA"
+      VARIABLES(95)="FRTELT"
+      VARIABLES(94)="FRTPTR"
+      VARIABLES(93)="PTRAR"
+      VARIABLES(92)="FILS"
+      VARIABLES(91)="DAD_STEPS"
+      VARIABLES(90)="FRERE_STEPS"
+      VARIABLES(89)="Step2node"
+      VARIABLES(88)="ND_STEPS"
+      VARIABLES(87)="NE_STEPS"
+      VARIABLES(86)="STEP"
+      VARIABLES(85)="NBSA"
+      VARIABLES(84)="LNA"
+      VARIABLES(83)="KEEP"
+      VARIABLES(82)="Deficiency"
+      VARIABLES(81)="MAXIS1"
+      VARIABLES(80)="IS1"
+      VARIABLES(79)="IS"
+      VARIABLES(78)="BUFR"
+      VARIABLES(77)="POIDS"
+      VARIABLES(76)="LBUFR_BYTES"
+      VARIABLES(75)="LBUFR"
+      VARIABLES(74)="ASS_IRECV"
+      VARIABLES(73)="NSLAVES"
+      VARIABLES(72)="NPROCS"
+      VARIABLES(71)="MYID"
+      VARIABLES(70)="COMM_LOAD"
+      VARIABLES(69)="MYID_NODES"
+      VARIABLES(68)="COMM_NODES"
+      VARIABLES(67)="INST_Number"
+      VARIABLES(66)="MAX_SURF_MASTER"
+      VARIABLES(65)="KEEP8"
+      VARIABLES(64)="pad8"
+      VARIABLES(63)="WRITE_PROBLEM"
+      VARIABLES(62)="OOC_PREFIX"
+      VARIABLES(61)="OOC_TMPDIR"
+      VARIABLES(60)="VERSION_NUMBER"
+      VARIABLES(59)="MAPPING"
+      VARIABLES(58)="LISTVAR_SCHUR"
+      VARIABLES(57)="SCHUR_CINTERFACE"
+      VARIABLES(56)="SCHUR"
+      VARIABLES(55)="SIZE_SCHUR"
+      VARIABLES(54)="SCHUR_LLD"
+      VARIABLES(53)="SCHUR_NLOC"
+      VARIABLES(52)="SCHUR_MLOC"
+      VARIABLES(51)="NBLOCK"
+      VARIABLES(50)="MBLOCK"
+      VARIABLES(49)="NPCOL"
+      VARIABLES(48)="NPROW"
+      VARIABLES(47)="UNS_PERM"
+      VARIABLES(46)="SYM_PERM"
+      VARIABLES(45)="RINFOG"
+      VARIABLES(44)="RINFO"
+      VARIABLES(43)="CNTL"
+      VARIABLES(42)="COST_SUBTREES"
+      VARIABLES(41)="INFOG"
+      VARIABLES(40)="INFO"
+      VARIABLES(39)="ICNTL"
+      VARIABLES(38)="pad5"
+      VARIABLES(37)="LREDRHS"
+      VARIABLES(36)="LSOL_loc"
+      VARIABLES(35)="NZ_RHS"
+      VARIABLES(34)="NRHS"
+      VARIABLES(33)="LRHS"
+      VARIABLES(32)="ISOL_loc"
+      VARIABLES(31)="IRHS_PTR"
+      VARIABLES(30)="IRHS_SPARSE"
+      VARIABLES(29)="SOL_loc"
+      VARIABLES(28)="RHS_SPARSE"
+      VARIABLES(27)="REDRHS"
+      VARIABLES(26)="RHS"
+      VARIABLES(25)="PERM_IN"
+      VARIABLES(24)="pad4"
+      VARIABLES(23)="A_ELT"
+      VARIABLES(22)="ELTVAR"
+      VARIABLES(21)="ELTPTR"
+      VARIABLES(20)="pad3"
+      VARIABLES(19)="NELT"
+      VARIABLES(18)="pad2"
+      VARIABLES(17)="A_loc"
+      VARIABLES(16)="JCN_loc"
+      VARIABLES(15)="IRN_loc"
+      VARIABLES(14)="pad1"
+      VARIABLES(13)="NZ_loc"
+      VARIABLES(12)="pad0"
+      VARIABLES(11)="ROWSCA"
+      VARIABLES(10)="COLSCA"
+      VARIABLES(9)="JCN"
+      VARIABLES(8)="IRN"
+      VARIABLES(7)="A"
+      VARIABLES(6)="NZ"
+      VARIABLES(5)="N"
+      VARIABLES(4)="JOB"
+      VARIABLES(3)="PAR"
+      VARIABLES(2)="SYM"
+      VARIABLES(1)="COMM"
+      NBVARIABLES_ROOT=34
+      allocate(VARIABLES_ROOT(NBVARIABLES_ROOT))
+      VARIABLES_ROOT(34)="NB_SINGULAR_VALUES"
+      VARIABLES_ROOT(33)="SINGULAR_VALUES"
+      VARIABLES_ROOT(32)="SVD_VT"
+      VARIABLES_ROOT(31)="SVD_U"
+      VARIABLES_ROOT(30)="gridinit_done"
+      VARIABLES_ROOT(29)="yes"
+      VARIABLES_ROOT(28)="rootpad3"
+      VARIABLES_ROOT(27)="QR_RCOND"
+      VARIABLES_ROOT(26)="rootpad"
+      VARIABLES_ROOT(25)="RHS_ROOT"
+      VARIABLES_ROOT(24)="rootpad2"
+      VARIABLES_ROOT(23)="QR_TAU"
+      VARIABLES_ROOT(22)="SCHUR_POINTER"
+      VARIABLES_ROOT(21)="RHS_CNTR_MASTER_ROOT"
+      VARIABLES_ROOT(20)="rootpad1"
+      VARIABLES_ROOT(19)="IPIV"
+      VARIABLES_ROOT(18)="RG2L_COL"
+      VARIABLES_ROOT(17)="RG2L_ROW"
+      VARIABLES_ROOT(16)="rootpad0"
+      VARIABLES_ROOT(15)="LPIV"
+      VARIABLES_ROOT(14)="CNTXT_BLACS"
+      VARIABLES_ROOT(13)="DESCRIPTOR"
+      VARIABLES_ROOT(12)="TOT_ROOT_SIZE"
+      VARIABLES_ROOT(11)="ROOT_SIZE"
+      VARIABLES_ROOT(10)="RHS_NLOC"
+      VARIABLES_ROOT(9)="SCHUR_LLD"
+      VARIABLES_ROOT(8)="SCHUR_NLOC"
+      VARIABLES_ROOT(7)="SCHUR_MLOC"
+      VARIABLES_ROOT(6)="MYCOL"
+      VARIABLES_ROOT(5)="MYROW"
+      VARIABLES_ROOT(4)="NPCOL"
+      VARIABLES_ROOT(3)="NPROW"
+      VARIABLES_ROOT(2)="NBLOCK"
+      VARIABLES_ROOT(1)="MBLOCK"
+      IN=52+id%MYID
+      INFILEMAIN=trim(adjustl(INFILE)) // trim(adjustl(STRING_ID))
+      open(UNIT=IN,FILE=INFILEMAIN, STATUS='old',FORM='unformatted'
+     &     ,iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN SMUMPS_RESTART CANNOT OPEN FILE: "
+     &        //trim(adjustl(INFILEMAIN))
+         error=.true.
+         goto 101
+      endif
+      DO i1=4,NBVARIABLES
+         size_array1=0
+         size_array2=0
+         SELECT CASE(VARIABLES(i1))
+         CASE("JOB")
+            read(IN) id%JOB
+         CASE("N")
+            read(IN) id%N
+         CASE("ICNTL")
+            read(IN) id%ICNTL
+         CASE("INFO")
+            read(IN) id%INFO
+         CASE("INFOG")
+            read(IN) id%INFOG
+         CASE("COST_SUBTREES")
+            read(IN) id%COST_SUBTREES
+         CASE("CNTL")
+            read(IN) id%CNTL
+         CASE("RINFO")
+            read(IN) id%RINFO
+         CASE("RINFOG")
+            read(IN) id%RINFOG
+         CASE("KEEP8")
+            read(IN) id%KEEP8
+         CASE("KEEP")
+            read(IN) id%KEEP
+         CASE("DKEEP")
+            read(IN) id%DKEEP    
+         CASE("NZ")
+            read(IN) id%NZ
+         CASE("A")
+            nullify(id%A)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%A(size_array1))
+               read(IN) id%A
+            endif
+         CASE("IRN")
+            nullify(id%IRN)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRN(size_array1))
+               read(IN) id%IRN
+            endif
+         CASE("JCN")
+            nullify(id%JCN)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%JCN(size_array1))
+               read(IN) id%JCN
+            endif
+         CASE("COLSCA")
+            nullify(id%COLSCA)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%COLSCA(size_array1))
+               read(IN) id%COLSCA
+            endif
+         CASE("ROWSCA")
+            nullify(id%ROWSCA)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ROWSCA(size_array1))
+               read(IN) id%ROWSCA
+            endif
+         CASE("NZ_loc")
+            read(IN) id%NZ_loc
+         CASE("IRN_loc")
+            nullify(id%IRN_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRN_loc(size_array1))
+               read(IN) id%IRN_loc
+            endif
+         CASE("JCN_loc")
+            nullify(id%JCN_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%JCN_loc(size_array1))
+               read(IN) id%JCN_loc
+            endif
+         CASE("A_loc")
+            nullify(id%A_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%A_loc(size_array1))
+               read(IN) id%A_loc
+            endif
+         CASE("NELT")
+            read(IN) id%NELT
+         CASE("ELTPTR")
+            nullify(id%ELTPTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ELTPTR(size_array1))
+               read(IN) id%ELTPTR
+            endif
+         CASE("ELTVAR")
+            nullify(id%ELTVAR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ELTVAR(size_array1))
+               read(IN) id%ELTVAR
+            endif
+         CASE("A_ELT")
+            nullify(id%A_ELT)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%A_ELT(size_array1))
+               read(IN) id%A_ELT
+            endif
+         CASE("PERM_IN")
+            nullify(id%PERM_IN)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PERM_IN(size_array1))
+               read(IN) id%PERM_IN
+            endif
+         CASE("RHS")
+            nullify(id%RHS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%RHS(size_array1))
+               read(IN) id%RHS
+            endif
+         CASE("REDRHS")
+            nullify(id%REDRHS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%REDRHS(size_array1))
+               read(IN) id%REDRHS
+            endif
+         CASE("RHS_SPARSE")
+            nullify(id%RHS_SPARSE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%RHS_SPARSE(size_array1))
+               read(IN) id%RHS_SPARSE
+            endif
+         CASE("SOL_loc")
+            nullify(id%SOL_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SOL_loc(size_array1))
+               read(IN) id%SOL_loc
+            endif
+         CASE("IRHS_SPARSE")
+            nullify(id%IRHS_SPARSE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRHS_SPARSE(size_array1))
+               read(IN) id%IRHS_SPARSE
+            endif
+         CASE("IRHS_PTR")
+            nullify(id%IRHS_PTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRHS_PTR(size_array1))
+               read(IN) id%IRHS_PTR
+            endif
+         CASE("ISOL_loc")
+            nullify(id%ISOL_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ISOL_loc(size_array1))
+               read(IN) id%ISOL_loc
+            endif
+         CASE("LRHS")
+            read(IN) id%LRHS
+         CASE("NRHS")
+            read(IN) id%NRHS
+         CASE("NZ_RHS")
+            read(IN) id%NZ_RHS
+         CASE("LSOL_loc")
+            read(IN) id%LSOL_loc
+         CASE("LREDRHS")
+            read(IN) id%LREDRHS
+         CASE("SYM_PERM")
+            nullify(id%SYM_PERM)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SYM_PERM(size_array1))
+               read(IN) id%SYM_PERM
+            endif
+         CASE("UNS_PERM")
+            nullify(id%UNS_PERM)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%UNS_PERM(size_array1))
+               read(IN) id%UNS_PERM
+            endif
+         CASE("NPROW")
+            read(IN) id%NPROW
+         CASE("NPCOL")
+            read(IN) id%NPCOL
+         CASE("MBLOCK")
+            read(IN) id%MBLOCK
+         CASE("NBLOCK")
+            read(IN) id%NBLOCK
+         CASE("SCHUR_MLOC")
+            read(IN) id%SCHUR_MLOC
+         CASE("SCHUR_NLOC")
+            read(IN) id%SCHUR_NLOC
+         CASE("SCHUR_LLD")
+            read(IN) id%SCHUR_LLD
+         CASE("SIZE_SCHUR")
+            read(IN) id%SIZE_SCHUR
+         CASE("SCHUR")
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHUR(size_array1))
+               read(IN) id%SCHUR
+            endif
+         CASE("SCHUR_CINTERFACE")
+            nullify(id%SCHUR_CINTERFACE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHUR_CINTERFACE(size_array1))
+               read(IN) id%SCHUR_CINTERFACE
+            endif
+         CASE("LISTVAR_SCHUR")
+            nullify(id%LISTVAR_SCHUR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%LISTVAR_SCHUR(size_array1))
+               read(IN) id%LISTVAR_SCHUR
+            endif
+         CASE("MAPPING")
+            nullify(id%MAPPING)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MAPPING(size_array1))
+               read(IN) id%MAPPING
+            endif
+         CASE("VERSION_NUMBER")
+            read(IN) id%VERSION_NUMBER
+         CASE("OOC_TMPDIR")
+            read(IN) id%OOC_TMPDIR
+         CASE("OOC_PREFIX")
+            read(IN) id%OOC_PREFIX
+         CASE("WRITE_PROBLEM")
+            read(IN) id%WRITE_PROBLEM
+         CASE("MAX_SURF_MASTER")
+            read(IN) id%MAX_SURF_MASTER
+         CASE("INST_Number")
+            read(IN) id%INST_Number
+         CASE("COMM_NODES")
+            read(IN) id%COMM_NODES
+         CASE("MYID_NODES")
+            read(IN) id%MYID_NODES
+         CASE("COMM_LOAD")
+            read(IN) id%COMM_LOAD
+         CASE("MYID")
+            read(IN) id%MYID
+         CASE("NPROCS")
+            read(IN) id%NPROCS
+         CASE("NSLAVES")
+            read(IN) id%NSLAVES
+         CASE("ASS_IRECV")
+            read(IN) id%ASS_IRECV
+         CASE("LBUFR")
+            read(IN) id%LBUFR
+         CASE("LBUFR_BYTES")
+            read(IN) id%LBUFR_BYTES
+         CASE("POIDS")
+            nullify(id%POIDS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%POIDS(size_array1))
+               read(IN) id%POIDS
+            endif
+         CASE("BUFR")
+            nullify(id%BUFR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%BUFR(size_array1))
+               read(IN) id%BUFR
+            endif
+         CASE("IS")
+            nullify(id%IS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IS(size_array1))
+               read(IN) id%IS
+            endif
+         CASE("IS1")
+            nullify(id%IS1)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IS1(size_array1))
+               read(IN) id%IS1
+            endif
+         CASE("MAXIS1")
+            read(IN) id%MAXIS1
+         CASE("Deficiency")
+            read(IN) id%Deficiency
+         CASE("LNA")
+            read(IN) id%LNA
+         CASE("NBSA")
+            read(IN) id%NBSA
+         CASE("STEP")
+            nullify(id%STEP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%STEP(size_array1))
+               read(IN) id%STEP
+            endif
+         CASE("NE_STEPS")
+            nullify(id%NE_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%NE_STEPS(size_array1))
+               read(IN) id%NE_STEPS
+            endif
+         CASE("ND_STEPS")
+            nullify(id%ND_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ND_STEPS(size_array1))
+               read(IN) id%ND_STEPS
+            endif
+         CASE("Step2node")
+            nullify(id%Step2node)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%Step2node(size_array1))
+               read(IN) id%Step2node
+            endif
+         CASE("FRERE_STEPS")
+            nullify(id%FRERE_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FRERE_STEPS(size_array1))
+               read(IN) id%FRERE_STEPS
+            endif
+         CASE("DAD_STEPS")
+            nullify(id%DAD_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DAD_STEPS(size_array1))
+               read(IN) id%DAD_STEPS
+            endif
+         CASE("FILS")
+            nullify(id%FILS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FILS(size_array1))
+               read(IN) id%FILS
+            endif
+         CASE("PTRAR")
+            nullify(id%PTRAR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PTRAR(size_array1))
+               read(IN) id%PTRAR
+            endif
+         CASE("FRTPTR")
+            nullify(id%FRTPTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FRTPTR(size_array1))
+               read(IN) id%FRTPTR
+            endif
+         CASE("FRTELT")
+            nullify(id%FRTELT)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FRTELT(size_array1))
+               read(IN) id%FRTELT
+            endif
+         CASE("NA")
+            nullify(id%NA)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%NA(size_array1))
+               read(IN) id%NA
+            endif
+         CASE("PROCNODE_STEPS")
+            nullify(id%PROCNODE_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PROCNODE_STEPS(size_array1))
+               read(IN) id%PROCNODE_STEPS
+            endif
+         CASE("PTLUST_S")
+            nullify(id%PTLUST_S)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PTLUST_S(size_array1))
+               read(IN) id%PTLUST_S
+            endif
+         CASE("PTRFAC")
+            nullify(id%PTRFAC)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PTRFAC(size_array1))
+               read(IN) id%PTRFAC
+            endif
+         CASE("S")
+            nullify(id%S)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%S(size_array1))
+               read(IN) id%S
+            endif
+         CASE("PROCNODE")
+            nullify(id%PROCNODE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PROCNODE(size_array1))
+               read(IN) id%PROCNODE
+            endif
+         CASE("INTARR")
+            nullify(id%INTARR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%INTARR(size_array1))
+               read(IN) id%INTARR
+            endif
+         CASE("DBLARR")
+            nullify(id%DBLARR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DBLARR(size_array1))
+               read(IN) id%DBLARR
+            endif
+         CASE("NELT_loc")
+            read(IN) id%NELT_loc
+         CASE("LELTVAR")
+            read(IN) id%LELTVAR
+         CASE("NA_ELT")
+            read(IN) id%NA_ELT
+         CASE("ELTPROC")
+            nullify(id%ELTPROC)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ELTPROC(size_array1))
+               read(IN) id%ELTPROC
+            endif
+         CASE("CANDIDATES")
+            nullify(id%CANDIDATES)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%CANDIDATES(size_array1,size_array2))
+               read(IN) id%CANDIDATES
+            endif
+         CASE("ISTEP_TO_INIV2")
+            nullify(id%ISTEP_TO_INIV2)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ISTEP_TO_INIV2(size_array1))
+               read(IN) id%ISTEP_TO_INIV2
+            endif
+         CASE("FUTURE_NIV2")
+            nullify(id%FUTURE_NIV2)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FUTURE_NIV2(size_array1))
+               read(IN) id%FUTURE_NIV2
+            endif
+         CASE("TAB_POS_IN_PERE")
+            nullify(id%TAB_POS_IN_PERE)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%TAB_POS_IN_PERE(size_array1,size_array2))
+               read(IN) id%TAB_POS_IN_PERE
+            endif
+         CASE("I_AM_CAND")
+            nullify(id%I_AM_CAND)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%I_AM_CAND(size_array1))
+               read(IN) id%I_AM_CAND
+            endif
+         CASE("MEM_DIST")
+            nullify(id%MEM_DIST)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MEM_DIST(0:size_array1-1))
+               read(IN) id%MEM_DIST
+            endif
+         CASE("POSINRHSCOMP_ROW")
+            nullify(id%POSINRHSCOMP_ROW)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%POSINRHSCOMP_ROW(size_array1))
+               read(IN) id%POSINRHSCOMP_ROW
+            endif
+         CASE("POSINRHSCOMP_COL_ALLOC")
+            read(IN) id%POSINRHSCOMP_COL_ALLOC
+         CASE("POSINRHSCOMP_COL")
+            nullify(id%POSINRHSCOMP_COL)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               if(id%POSINRHSCOMP_COL_ALLOC) then
+                  allocate(id%POSINRHSCOMP_COL(size_array1))
+                  read(IN) id%POSINRHSCOMP_COL
+               else
+                  read(IN) dummy
+                  id%POSINRHSCOMP_COL=>id%POSINRHSCOMP_ROW
+               endif
+            endif
+         CASE("RHSCOMP")
+            nullify(id%RHSCOMP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%RHSCOMP(size_array1))
+               read(IN) id%RHSCOMP
+            endif
+         CASE("MEM_SUBTREE")
+            nullify(id%MEM_SUBTREE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MEM_SUBTREE(size_array1))
+               read(IN) id%MEM_SUBTREE
+            endif
+         CASE("COST_TRAV")
+            nullify(id%COST_TRAV)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%COST_TRAV(size_array1))
+               read(IN) id%COST_TRAV
+            endif
+         CASE("MY_ROOT_SBTR")
+            nullify(id%MY_ROOT_SBTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MY_ROOT_SBTR(size_array1))
+               read(IN) id%MY_ROOT_SBTR
+            endif
+         CASE("MY_FIRST_LEAF")
+            nullify(id%MY_FIRST_LEAF)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MY_FIRST_LEAF(size_array1))
+               read(IN) id%MY_FIRST_LEAF
+            endif
+         CASE("MY_NB_LEAF")
+            nullify(id%MY_NB_LEAF)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MY_NB_LEAF(size_array1))
+               read(IN) id%MY_NB_LEAF
+            endif
+         CASE("DEPTH_FIRST")
+            nullify(id%DEPTH_FIRST)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DEPTH_FIRST(size_array1))
+               read(IN) id%DEPTH_FIRST
+            endif
+         CASE("DEPTH_FIRST_SEQ")
+            nullify(id%DEPTH_FIRST_SEQ)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DEPTH_FIRST_SEQ(size_array1))
+               read(IN) id%DEPTH_FIRST_SEQ
+            endif
+         CASE("SBTR_ID")
+            nullify(id%SBTR_ID)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SBTR_ID(size_array1))
+               read(IN) id%SBTR_ID
+            endif
+         CASE("SCHED_DEP")
+            nullify(id%SCHED_DEP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHED_DEP(size_array1))
+               read(IN) id%SCHED_DEP
+            endif
+         CASE("SCHED_GRP")
+            nullify(id%SCHED_GRP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHED_GRP(size_array1))
+               read(IN) id%SCHED_GRP
+            endif
+         CASE("CROIX_MANU")
+            nullify(id%CROIX_MANU)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%CROIX_MANU(size_array1))
+               read(IN) id%CROIX_MANU
+            endif
+         CASE("WK_USER")
+            nullify(id%WK_USER)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%WK_USER(size_array1))
+               read(IN) id%WK_USER
+            endif
+         CASE("NBSA_LOCAL")
+            read(IN) id%NBSA_LOCAL
+         CASE("LWK_USER")
+            read(IN) id%LWK_USER
+         CASE("CB_SON_SIZE")
+            nullify(id%CB_SON_SIZE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%CB_SON_SIZE(size_array1))
+               read(IN) id%CB_SON_SIZE
+            endif
+         CASE("INSTANCE_NUMBER")
+            read(IN) id%INSTANCE_NUMBER
+         CASE("OOC_MAX_NB_NODES_FOR_ZONE")
+            read(IN) id%OOC_MAX_NB_NODES_FOR_ZONE
+         CASE("OOC_INODE_SEQUENCE")
+            nullify(id%OOC_INODE_SEQUENCE)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_INODE_SEQUENCE(size_array1,size_array2))
+               read(IN) id%OOC_INODE_SEQUENCE
+            endif
+         CASE("OOC_SIZE_OF_BLOCK")
+            nullify(id%OOC_SIZE_OF_BLOCK)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_SIZE_OF_BLOCK(size_array1,size_array2))
+               read(IN) id%OOC_SIZE_OF_BLOCK
+            endif
+         CASE("OOC_VADDR")
+            nullify(id%OOC_VADDR)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_VADDR(size_array1,size_array2))
+               read(IN) id%OOC_VADDR
+            endif
+         CASE("OOC_TOTAL_NB_NODES")
+            nullify(id%OOC_TOTAL_NB_NODES)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_TOTAL_NB_NODES(size_array1))
+               read(IN) id%OOC_TOTAL_NB_NODES
+            endif
+         CASE("OOC_NB_FILES")
+            nullify(id%OOC_NB_FILES)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_NB_FILES(size_array1))
+               read(IN) id%OOC_NB_FILES
+            endif
+         CASE("OOC_NB_FILE_TYPE")
+            read(IN) id%OOC_NB_FILE_TYPE
+         CASE("OOC_FILE_NAMES")
+            nullify(id%OOC_FILE_NAMES)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_FILE_NAMES(size_array1,size_array2))
+               read(IN) id%OOC_FILE_NAMES
+            endif
+         CASE("OOC_FILE_NAME_LENGTH")
+            nullify(id%OOC_FILE_NAME_LENGTH)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_FILE_NAME_LENGTH(size_array1))
+               read(IN) id%OOC_FILE_NAME_LENGTH
+            endif
+         CASE("PIVNUL_LIST")
+            nullify(id%PIVNUL_LIST)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PIVNUL_LIST(size_array1))
+               read(IN) id%PIVNUL_LIST
+            endif
+         CASE("SUP_PROC")
+            nullify(id%SUP_PROC)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SUP_PROC(size_array1,size_array2))
+               read(IN) id%SUP_PROC
+            endif
+         CASE("IPTR_WORKING")
+            nullify(id%IPTR_WORKING)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IPTR_WORKING(size_array1))
+               read(IN) id%IPTR_WORKING
+            endif
+         CASE("WORKING")
+            nullify(id%WORKING)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%WORKING(size_array1))
+               read(IN) id%WORKING
+            endif
+         CASE("root")
+        CASE("NBGRP")
+           read(IN) id%NBGRP
+        CASE("LRGROUPS")
+           nullify(id%LRGROUPS)
+           read(IN) size_array1
+           if(size_array1.EQ.-999) then
+              read(IN) dummy
+           else
+              allocate(id%LRGROUPS(size_array1))
+              read(IN) id%LRGROUPS
+           endif
+         CASE("SCHED_SBTR")
+            nullify(id%SCHED_SBTR)
+            read(IN) size_array1
+            IF(size_array1.EQ.-999) THEN
+               read(IN) dummy
+            ELSE
+               allocate(id%SCHED_SBTR(size_array1))
+               read(IN) id%SCHED_SBTR
+            ENDIF 
+        CASE("LPOOL_AFTER_L0_OMP")
+           read(IN) id%LPOOL_AFTER_L0_OMP
+        CASE("LPOOL_BEFORE_L0_OMP")
+           read(IN) id%LPOOL_BEFORE_L0_OMP
+        CASE("L_PHYS_L0_OMP")
+           read(IN) id%L_PHYS_L0_OMP
+        CASE("L_VIRT_L0_OMP")  
+           read(IN) id%L_VIRT_L0_OMP
+        CASE("LL0_OMP_MAPPING")
+           read(IN) id%LL0_OMP_MAPPING
+        CASE("THREAD_LA")
+           read(IN) id%THREAD_LA
+        CASE("IPOOL_AFTER_L0_OMP")
+           nullify(id%IPOOL_AFTER_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%IPOOL_AFTER_L0_OMP(size_array1))
+              read(IN) id%IPOOL_AFTER_L0_OMP
+           ENDIF 
+        CASE("IPOOL_BEFORE_L0_OMP")
+           nullify(id%IPOOL_BEFORE_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%IPOOL_BEFORE_L0_OMP(size_array1))
+              read(IN) id%IPOOL_BEFORE_L0_OMP
+           ENDIF 
+        CASE("PHYS_L0_OMP")
+           nullify(id%PHYS_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%PHYS_L0_OMP(size_array1))
+              read(IN) id%PHYS_L0_OMP
+           ENDIF 
+        CASE("VIRT_L0_OMP")
+           nullify(id%VIRT_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%VIRT_L0_OMP(size_array1))
+              read(IN) id%VIRT_L0_OMP
+           ENDIF
+        CASE("PERM_L0_OMP")
+           nullify(id%PERM_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%PERM_L0_OMP(size_array1))
+              read(IN) id%PERM_L0_OMP
+           ENDIF
+        CASE("PTR_LEAFS_L0_OMP")
+           nullify(id%PTR_LEAFS_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%PTR_LEAFS_L0_OMP(size_array1))
+              read(IN) id%PTR_LEAFS_L0_OMP
+           ENDIF
+        CASE("L0_OMP_MAPPING")
+           nullify(id%L0_OMP_MAPPING)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%L0_OMP_MAPPING(size_array1))
+              read(IN) id%L0_OMP_MAPPING
+           ENDIF 
+        CASE("IF_RESTARTING")
+           read(IN) id%IF_RESTARTING 
+        CASE("SINGULAR_VALUES")
+         read(IN) size_array1
+         if(size_array1.EQ.-999) then
+            read(IN) dummy
+         else
+            allocate(id%SINGULAR_VALUES(size_array1))
+            read(IN) id%SINGULAR_VALUES
+         endif  
+      CASE("NB_SINGULAR_VALUES")
+        write(IN) id%NB_SINGULAR_VALUES
+        CASE("pad0","pad1","pad2","pad3","pad4","pad5","pad8","pad11",
+     &          "pad111", "pad12","pad13","pad14")
+        CASE DEFAULT
+           id%INFOG(1)=-92
+           write(*,*) "IN SMUMPS_RESTART UNKNOWN VARIABLE IN "
+     &       // "STRUCTURE: "//  trim(adjustl(VARIABLES(i1)))
+           goto 101
+        END SELECT
+      ENDDO
+ 101  continue
+      close(IN)
+      if(error) goto 102
+      INROOT=1000+IN
+      INFILEROOT=trim(adjustl(INFILE)) // trim(adjustl("ROOT")) 
+     &     // trim(adjustl(STRING_ID)) 
+      open(UNIT=INROOT,FILE=INFILEROOT, STATUS='old',FORM='unformatted'
+     &     ,iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN SMUMPS_RESTART CANNOT OPEN FILE: "
+     &        //trim(adjustl(INFILEROOT))
+         goto 102
+      endif
+      DO i2=1,NBVARIABLES_ROOT
+         SELECT CASE(VARIABLES_ROOT(i2))
+      CASE("MBLOCK")
+         read(INROOT) id%root%MBLOCK
+      CASE("NBLOCK")
+         read(INROOT) id%root%NBLOCK
+      CASE("NPROW")
+         read(INROOT) id%root%NPROW
+      CASE("NPCOL")
+         read(INROOT) id%root%NPCOL
+      CASE("MYROW")
+         read(INROOT) id%root%MYROW
+      CASE("MYCOL")
+         read(INROOT) id%root%MYCOL
+      CASE("SCHUR_MLOC")
+         read(INROOT) id%root%SCHUR_MLOC
+      CASE("SCHUR_NLOC")
+         read(INROOT) id%root%SCHUR_NLOC
+      CASE("SCHUR_LLD")
+         read(INROOT) id%root%SCHUR_LLD
+      CASE("RHS_NLOC")
+         read(INROOT) id%root%RHS_NLOC
+      CASE("ROOT_SIZE")
+         read(INROOT) id%root%ROOT_SIZE
+      CASE("TOT_ROOT_SIZE")
+         read(INROOT) id%root%TOT_ROOT_SIZE
+      CASE("DESCRIPTOR")
+         read(INROOT) id%root%DESCRIPTOR
+      CASE("CNTXT_BLACS")
+         read(INROOT) id%root%CNTXT_BLACS
+      CASE("LPIV")
+         read(INROOT) id%root%LPIV
+      CASE("RG2L_ROW")
+         nullify(id%root%RG2L_ROW)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RG2L_ROW(size_array1))
+            read(INROOT) id%root%RG2L_ROW
+         endif
+      CASE("RG2L_COL")
+         nullify(id%root%RG2L_COL)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RG2L_COL(size_array1))
+            read(INROOT) id%root%RG2L_COL
+         endif
+      CASE("IPIV")
+         nullify(id%root%IPIV)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%IPIV(size_array1))
+            read(INROOT) id%root%IPIV
+         endif
+      CASE("RHS_CNTR_MASTER_ROOT")
+         nullify(id%root%RHS_CNTR_MASTER_ROOT)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RHS_CNTR_MASTER_ROOT(size_array1))
+            read(INROOT) id%root%RHS_CNTR_MASTER_ROOT
+         endif
+      CASE("SCHUR_POINTER")
+         nullify(id%root%SCHUR_POINTER)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SCHUR_POINTER(size_array1))
+            read(INROOT) id%root%SCHUR_POINTER
+         endif
+      CASE("QR_TAU")
+         nullify(id%root%QR_TAU)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%QR_TAU(size_array1))
+            read(INROOT) id%root%QR_TAU
+         endif
+      CASE("RHS_ROOT")
+         nullify(id%root%RHS_ROOT)
+         read(INROOT) size_array1,size_array2
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RHS_ROOT(size_array1,size_array2))
+            read(INROOT) id%root%RHS_ROOT
+         endif
+      CASE("QR_RCOND")
+         read(INROOT) id%root%QR_RCOND
+      CASE("yes")
+         read(INROOT) id%root%yes
+      CASE("gridinit_done")
+         read(INROOT) id%root%gridinit_done
+      CASE("SVD_U")
+         read(INROOT) size_array1,size_array2
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SVD_U(size_array1,size_array2))
+            read(INROOT) id%root%SVD_U
+         endif
+      CASE("SVD_VT")
+         read(INROOT) size_array1,size_array2
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SVD_VT(size_array1,size_array2))
+            read(INROOT) id%root%SVD_VT
+         endif
+      CASE("SINGULAR_VALUES")
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SINGULAR_VALUES(size_array1))
+            read(INROOT) id%root%SINGULAR_VALUES
+         endif  
+      CASE("NB_SINGULAR_VALUES")
+        write(INROOT) id%root%NB_SINGULAR_VALUES
+         CASE("rootpad0","rootpad1","rootpad2","rootpad",
+     &        "rootpad3")
+      CASE DEFAULT
+         id%INFOG(1)=-92
+         write(*,*) "IN SMUMPS_RESTART UNKNOWN VARIABLE "
+     &        // "IN ROOT: "// trim(adjustl(VARIABLES_ROOT(i2)))
+         goto 102
+      END SELECT  
+      ENDDO
+      if(id%root%gridinit_done) then
+         id%root%CNTXT_BLACS = id%COMM_NODES
+         CALL blacs_gridinit( id%root%CNTXT_BLACS, 'R',
+     &        id%root%NPROW, id%root%NPCOL )
+         id%root%gridinit_done = .TRUE.
+      endif
+ 102  continue
+      close(INROOT)
+      END SUBROUTINE SMUMPS_RESTART
diff -ruN MUMPS_5.1.2/src/tools_common_mod.F mumps-5.1.2-aster7/src/tools_common_mod.F
--- MUMPS_5.1.2/src/tools_common_mod.F	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/src/tools_common_mod.F	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,66 @@
+C
+C  This file is part of MUMPS 5.0.2, released
+C  on Fri Jul 15 09:12:54 UTC 2016
+C
+C
+C  Copyright 1991-2016 CERFACS, CNRS, ENS Lyon, INP Toulouse, Inria,
+C  University of Bordeaux.
+C
+C  This version of MUMPS is provided to you free of charge. It is
+C  released under the CeCILL-C license:
+C  http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html
+C
+      MODULE TOOLS_COMMON
+      INTERFACE MUMPS_REALLOC
+      SUBROUTINE MUMPS_IREALLOC(ARRAY, MINSIZE, INFO, LP, FORCE, COPY,
+     &     STRING, MEMCNT, ERRCODE)
+      INTEGER, POINTER    :: ARRAY(:)
+      INTEGER             :: MINSIZE, LP
+      INTEGER             :: INFO(:)
+      LOGICAL, OPTIONAL   :: FORCE
+      LOGICAL, OPTIONAL   :: COPY
+      CHARACTER, OPTIONAL :: STRING*(*)
+      INTEGER, OPTIONAL   :: ERRCODE, MEMCNT
+      END SUBROUTINE MUMPS_IREALLOC
+      SUBROUTINE MUMPS_DREALLOC(ARRAY, MINSIZE, INFO, LP, FORCE, COPY,
+     &     STRING, MEMCNT, ERRCODE)
+      REAL(kind(1.D0)), POINTER    :: ARRAY(:)
+      INTEGER             :: MINSIZE, LP
+      INTEGER             :: INFO(:)
+      LOGICAL, OPTIONAL   :: FORCE
+      LOGICAL, OPTIONAL   :: COPY
+      CHARACTER, OPTIONAL :: STRING*(*)
+      INTEGER, OPTIONAL   :: ERRCODE, MEMCNT
+      END SUBROUTINE MUMPS_DREALLOC
+      SUBROUTINE MUMPS_SREALLOC(ARRAY, MINSIZE, INFO, LP, FORCE, COPY,
+     &     STRING, MEMCNT, ERRCODE)
+      REAL(kind(1.E0)), POINTER    :: ARRAY(:)
+      INTEGER             :: MINSIZE, LP
+      INTEGER             :: INFO(:)
+      LOGICAL, OPTIONAL   :: FORCE
+      LOGICAL, OPTIONAL   :: COPY
+      CHARACTER, OPTIONAL :: STRING*(*)
+      INTEGER, OPTIONAL   :: ERRCODE, MEMCNT
+      END SUBROUTINE MUMPS_SREALLOC
+      SUBROUTINE MUMPS_ZREALLOC(ARRAY, MINSIZE, INFO, LP, FORCE, COPY,
+     &     STRING, MEMCNT, ERRCODE)
+      COMPLEX(kind((1.D0,1.D0))), POINTER    :: ARRAY(:)
+      INTEGER             :: MINSIZE, LP
+      INTEGER             :: INFO(:)
+      LOGICAL, OPTIONAL   :: FORCE
+      LOGICAL, OPTIONAL   :: COPY
+      CHARACTER, OPTIONAL :: STRING*(*)
+      INTEGER, OPTIONAL   :: ERRCODE, MEMCNT
+      END SUBROUTINE MUMPS_ZREALLOC
+      SUBROUTINE MUMPS_CREALLOC(ARRAY, MINSIZE, INFO, LP, FORCE, COPY,
+     &     STRING, MEMCNT, ERRCODE)
+      COMPLEX(kind((1.E0,1.E0))), POINTER    :: ARRAY(:)
+      INTEGER             :: MINSIZE, LP
+      INTEGER             :: INFO(:)
+      LOGICAL, OPTIONAL   :: FORCE
+      LOGICAL, OPTIONAL   :: COPY
+      CHARACTER, OPTIONAL :: STRING*(*)
+      INTEGER, OPTIONAL   :: ERRCODE, MEMCNT
+      END SUBROUTINE MUMPS_CREALLOC
+      END INTERFACE
+      END MODULE
diff -ruN MUMPS_5.1.2/src/zmumps_restart.F mumps-5.1.2-aster7/src/zmumps_restart.F
--- MUMPS_5.1.2/src/zmumps_restart.F	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/src/zmumps_restart.F	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,2648 @@
+C
+C  This file is part of MUMPS 5.0.2, released
+C  on Fri Jul 15 09:12:54 UTC 2016
+C
+C
+C  Copyright 1991-2016 CERFACS, CNRS, ENS Lyon, INP Toulouse, Inria,
+C  University of Bordeaux.
+C
+C  This version of MUMPS is provided to you free of charge. It is
+C  released under the CeCILL-C license:
+C  http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html
+C
+      SUBROUTINE ZMUMPS_STOP(id,OUTFILE)
+      USE ZMUMPS_STRUC_DEF
+      IMPLICIT NONE
+      INCLUDE 'mpif.h'
+      CHARACTER(len=*), intent(in) :: OUTFILE
+      INTEGER::i1,i2,NBVARIABLES,NBVARIABLES_ROOT
+      INTEGER::OUT,err,OUTROOT
+      CHARACTER(len=100), allocatable, dimension(:)::VARIABLES
+      CHARACTER(len=100), allocatable, dimension(:)::VARIABLES_ROOT
+      CHARACTER(len=100):: OUTFILEMAIN,OUTFILEROOT
+      CHARACTER(len=3) :: STRING_ID
+      LOGICAL :: error
+      INTEGER MASTER
+      PARAMETER( MASTER = 0 )
+      TYPE (ZMUMPS_STRUC) :: id
+      id%IF_RESTARTING=.TRUE.
+      NBVARIABLES=171
+      allocate(VARIABLES(NBVARIABLES))
+      VARIABLES(171)="NB_SINGULAR_VALUES"
+      VARIABLES(170)="SINGULAR_VALUES"
+      VARIABLES(169)="IF_RESTARTING"
+      VARIABLES(168)="L0_OMP_MAPPING"
+      VARIABLES(167)="PTR_LEAFS_L0_OMP"
+      VARIABLES(166)="PERM_L0_OMP"
+      VARIABLES(165)="VIRT_L0_OMP"
+      VARIABLES(164)="PHYS_L0_OMP"
+      VARIABLES(163)="IPOOL_AFTER_L0_OMP"
+      VARIABLES(162)="IPOOL_BEFORE_L0_OMP"
+      VARIABLES(161)="THREAD_LA"
+      VARIABLES(160)="LL0_OMP_MAPPING"
+      VARIABLES(159)="L_VIRT_L0_OMP"
+      VARIABLES(158)="L_PHYS_L0_OMP"
+      VARIABLES(157)="LPOOL_BEFORE_L0_OMP"
+      VARIABLES(156)="LPOOL_AFTER_L0_OMP"
+      VARIABLES(155)="NBGRP"
+      VARIABLES(154)="LRGROUPS"
+      VARIABLES(153)="root"
+      VARIABLES(152)="WORKING"
+      VARIABLES(151)="IPTR_WORKING"
+      VARIABLES(150)="pad14"
+      VARIABLES(149)="SUP_PROC"
+      VARIABLES(148)="PIVNUL_LIST"
+      VARIABLES(147)="OOC_FILE_NAME_LENGTH"
+      VARIABLES(146)="OOC_FILE_NAMES"
+      VARIABLES(145)="OOC_NB_FILE_TYPE"
+      VARIABLES(144)="OOC_NB_FILES"
+      VARIABLES(143)="OOC_TOTAL_NB_NODES"
+      VARIABLES(142)="OOC_VADDR"
+      VARIABLES(141)="OOC_SIZE_OF_BLOCK"
+      VARIABLES(140)="pad13"
+      VARIABLES(139)="OOC_INODE_SEQUENCE"
+      VARIABLES(138)="OOC_MAX_NB_NODES_FOR_ZONE"
+      VARIABLES(137)="INSTANCE_NUMBER"
+      VARIABLES(136)="pad12"
+      VARIABLES(135)="CB_SON_SIZE"
+      VARIABLES(134)="DKEEP"
+      VARIABLES(133)="LWK_USER"
+      VARIABLES(132)="NBSA_LOCAL"
+      VARIABLES(131)="WK_USER"
+      VARIABLES(130)="CROIX_MANU"
+      VARIABLES(129)="SCHED_SBTR"
+      VARIABLES(128)="SCHED_GRP"
+      VARIABLES(127)="SCHED_DEP"
+      VARIABLES(126)="SBTR_ID"
+      VARIABLES(125)="DEPTH_FIRST_SEQ"
+      VARIABLES(124)="DEPTH_FIRST"
+      VARIABLES(123)="MY_NB_LEAF"
+      VARIABLES(122)="MY_FIRST_LEAF"
+      VARIABLES(121)="MY_ROOT_SBTR"
+      VARIABLES(120)="COST_TRAV"
+      VARIABLES(119)="MEM_SUBTREE"
+      VARIABLES(118)="RHSCOMP"
+      VARIABLES(117)="POSINRHSCOMP_COL"
+      VARIABLES(116)="POSINRHSCOMP_ROW"
+      VARIABLES(115)="POSINRHSCOMP_COL_ALLOC"
+      VARIABLES(114)="MEM_DIST"
+      VARIABLES(113)="I_AM_CAND"
+      VARIABLES(112)="TAB_POS_IN_PERE"
+      VARIABLES(111)="FUTURE_NIV2"
+      VARIABLES(110)="ISTEP_TO_INIV2"
+      VARIABLES(109)="CANDIDATES"
+      VARIABLES(108)="ELTPROC"
+      VARIABLES(107)="pad11"
+      VARIABLES(106)="NA_ELT"
+      VARIABLES(105)="LELTVAR"
+      VARIABLES(104)="NELT_loc"
+      VARIABLES(103)="DBLARR"
+      VARIABLES(102)="INTARR"
+      VARIABLES(101)="PROCNODE"
+      VARIABLES(100)="S"
+      VARIABLES(99)="PTRFAC"
+      VARIABLES(98)="PTLUST_S"
+      VARIABLES(97)="PROCNODE_STEPS"
+      VARIABLES(96)="NA"
+      VARIABLES(95)="FRTELT"
+      VARIABLES(94)="FRTPTR"
+      VARIABLES(93)="PTRAR"
+      VARIABLES(92)="FILS"
+      VARIABLES(91)="DAD_STEPS"
+      VARIABLES(90)="FRERE_STEPS"
+      VARIABLES(89)="Step2node"
+      VARIABLES(88)="ND_STEPS"
+      VARIABLES(87)="NE_STEPS"
+      VARIABLES(86)="STEP"
+      VARIABLES(85)="NBSA"
+      VARIABLES(84)="LNA"
+      VARIABLES(83)="KEEP"
+      VARIABLES(82)="Deficiency"
+      VARIABLES(81)="MAXIS1"
+      VARIABLES(80)="IS1"
+      VARIABLES(79)="IS"
+      VARIABLES(78)="BUFR"
+      VARIABLES(77)="POIDS"
+      VARIABLES(76)="LBUFR_BYTES"
+      VARIABLES(75)="LBUFR"
+      VARIABLES(74)="ASS_IRECV"
+      VARIABLES(73)="NSLAVES"
+      VARIABLES(72)="NPROCS"
+      VARIABLES(71)="MYID"
+      VARIABLES(70)="COMM_LOAD"
+      VARIABLES(69)="MYID_NODES"
+      VARIABLES(68)="COMM_NODES"
+      VARIABLES(67)="INST_Number"
+      VARIABLES(66)="MAX_SURF_MASTER"
+      VARIABLES(65)="KEEP8"
+      VARIABLES(64)="pad8"
+      VARIABLES(63)="WRITE_PROBLEM"
+      VARIABLES(62)="OOC_PREFIX"
+      VARIABLES(61)="OOC_TMPDIR"
+      VARIABLES(60)="VERSION_NUMBER"
+      VARIABLES(59)="MAPPING"
+      VARIABLES(58)="LISTVAR_SCHUR"
+      VARIABLES(57)="SCHUR_CINTERFACE"
+      VARIABLES(56)="SCHUR"
+      VARIABLES(55)="SIZE_SCHUR"
+      VARIABLES(54)="SCHUR_LLD"
+      VARIABLES(53)="SCHUR_NLOC"
+      VARIABLES(52)="SCHUR_MLOC"
+      VARIABLES(51)="NBLOCK"
+      VARIABLES(50)="MBLOCK"
+      VARIABLES(49)="NPCOL"
+      VARIABLES(48)="NPROW"
+      VARIABLES(47)="UNS_PERM"
+      VARIABLES(46)="SYM_PERM"
+      VARIABLES(45)="RINFOG"
+      VARIABLES(44)="RINFO"
+      VARIABLES(43)="CNTL"
+      VARIABLES(42)="COST_SUBTREES"
+      VARIABLES(41)="INFOG"
+      VARIABLES(40)="INFO"
+      VARIABLES(39)="ICNTL"
+      VARIABLES(38)="pad5"
+      VARIABLES(37)="LREDRHS"
+      VARIABLES(36)="LSOL_loc"
+      VARIABLES(35)="NZ_RHS"
+      VARIABLES(34)="NRHS"
+      VARIABLES(33)="LRHS"
+      VARIABLES(32)="ISOL_loc"
+      VARIABLES(31)="IRHS_PTR"
+      VARIABLES(30)="IRHS_SPARSE"
+      VARIABLES(29)="SOL_loc"
+      VARIABLES(28)="RHS_SPARSE"
+      VARIABLES(27)="REDRHS"
+      VARIABLES(26)="RHS"
+      VARIABLES(25)="PERM_IN"
+      VARIABLES(24)="pad4"
+      VARIABLES(23)="A_ELT"
+      VARIABLES(22)="ELTVAR"
+      VARIABLES(21)="ELTPTR"
+      VARIABLES(20)="pad3"
+      VARIABLES(19)="NELT"
+      VARIABLES(18)="pad2"
+      VARIABLES(17)="A_loc"
+      VARIABLES(16)="JCN_loc"
+      VARIABLES(15)="IRN_loc"
+      VARIABLES(14)="pad1"
+      VARIABLES(13)="NZ_loc"
+      VARIABLES(12)="pad0"
+      VARIABLES(11)="ROWSCA"
+      VARIABLES(10)="COLSCA"
+      VARIABLES(9)="JCN"
+      VARIABLES(8)="IRN"
+      VARIABLES(7)="A"
+      VARIABLES(6)="NZ"
+      VARIABLES(5)="N"
+      VARIABLES(4)="JOB"
+      VARIABLES(3)="PAR"
+      VARIABLES(2)="SYM"
+      VARIABLES(1)="COMM"
+      NBVARIABLES_ROOT=34
+      allocate(VARIABLES_ROOT(NBVARIABLES_ROOT))
+      VARIABLES_ROOT(34)="NB_SINGULAR_VALUES"
+      VARIABLES_ROOT(33)="SINGULAR_VALUES"
+      VARIABLES_ROOT(32)="SVD_VT"
+      VARIABLES_ROOT(31)="SVD_U"
+      VARIABLES_ROOT(30)="gridinit_done"
+      VARIABLES_ROOT(29)="yes"
+      VARIABLES_ROOT(28)="rootpad3"
+      VARIABLES_ROOT(27)="QR_RCOND"
+      VARIABLES_ROOT(26)="rootpad"
+      VARIABLES_ROOT(25)="RHS_ROOT"
+      VARIABLES_ROOT(24)="rootpad2"
+      VARIABLES_ROOT(23)="QR_TAU"
+      VARIABLES_ROOT(22)="SCHUR_POINTER"
+      VARIABLES_ROOT(21)="RHS_CNTR_MASTER_ROOT"
+      VARIABLES_ROOT(20)="rootpad1"
+      VARIABLES_ROOT(19)="IPIV"
+      VARIABLES_ROOT(18)="RG2L_COL"
+      VARIABLES_ROOT(17)="RG2L_ROW"
+      VARIABLES_ROOT(16)="rootpad0"
+      VARIABLES_ROOT(15)="LPIV"
+      VARIABLES_ROOT(14)="CNTXT_BLACS"
+      VARIABLES_ROOT(13)="DESCRIPTOR"
+      VARIABLES_ROOT(12)="TOT_ROOT_SIZE"
+      VARIABLES_ROOT(11)="ROOT_SIZE"
+      VARIABLES_ROOT(10)="RHS_NLOC"
+      VARIABLES_ROOT(9)="SCHUR_LLD"
+      VARIABLES_ROOT(8)="SCHUR_NLOC"
+      VARIABLES_ROOT(7)="SCHUR_MLOC"
+      VARIABLES_ROOT(6)="MYCOL"
+      VARIABLES_ROOT(5)="MYROW"
+      VARIABLES_ROOT(4)="NPCOL"
+      VARIABLES_ROOT(3)="NPROW"
+      VARIABLES_ROOT(2)="NBLOCK"
+      VARIABLES_ROOT(1)="MBLOCK"
+      if(((id%ICNTL(3).GT.0).AND.(id%MYID .EQ. MASTER))) then
+         write(*,*) "DUMPING MUMPS STRUCTURE IN FILE:",OUTFILE
+      endif
+      error=.false.
+      write (STRING_ID, '(i3)') id%MYID
+      OUT=42+id%MYID
+      OUTFILEMAIN=trim(adjustl(OUTFILE)) // trim(adjustl(STRING_ID))
+      open(UNIT=OUT,FILE=OUTFILEMAIN,STATUS='replace',
+     &     form='unformatted',iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN ZMUMPS_STOP CANNOT OPEN FILE: "
+     &        //trim(adjustl(OUTFILEMAIN))
+         error=.true.
+         goto 100
+      endif      
+      DO i1=1,NBVARIABLES 
+         SELECT CASE(trim(adjustl(VARIABLES(i1))))
+         CASE("COMM") 
+         CASE("SYM")
+         CASE("PAR")
+         CASE("JOB")
+            write(OUT) id%JOB
+         CASE("N")
+            write(OUT) id%N
+         CASE("ICNTL")
+            write(OUT) id%ICNTL
+         CASE("INFO")
+            write(OUT) id%INFO
+         CASE("INFOG")
+            write(OUT) id%INFOG
+         CASE("COST_SUBTREES")
+            write(OUT) id%COST_SUBTREES
+         CASE("CNTL")
+            write(OUT) id%CNTL
+         CASE("RINFO")
+            write(OUT) id%RINFO
+         CASE("RINFOG")
+            write(OUT) id%RINFOG
+         CASE("KEEP8")
+            write(OUT) id%KEEP8
+         CASE("KEEP")
+            write(OUT) id%KEEP
+         CASE("DKEEP")
+            write(OUT) id%DKEEP    
+         CASE("NZ")
+            write(OUT) id%NZ
+         CASE("A")
+            IF(associated(id%A)) THEN
+               write(OUT) size(id%A,1)
+               write(OUT) id%A
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IRN")
+            IF(associated(id%IRN)) THEN
+               write(OUT) size(id%IRN,1)
+               write(OUT) id%IRN
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("JCN")
+            IF(associated(id%JCN)) THEN
+               write(OUT) size(id%JCN,1)
+               write(OUT) id%JCN
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("COLSCA")
+            IF(associated(id%COLSCA)) THEN
+               write(OUT) size(id%COLSCA,1)
+               write(OUT) id%COLSCA
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF 
+         CASE("ROWSCA")
+            IF(associated(id%ROWSCA)) THEN
+               write(OUT) size(id%ROWSCA,1)
+               write(OUT) id%ROWSCA
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NZ_loc")
+            write(OUT) id%NZ_loc
+         CASE("IRN_loc")
+            IF(associated(id%IRN_loc)) THEN
+               write(OUT) size(id%IRN_loc,1)
+               write(OUT) id%IRN_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("JCN_loc")
+            IF(associated(id%JCN_loc)) THEN
+               write(OUT) size(id%JCN_loc,1)
+               write(OUT) id%JCN_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("A_loc")
+            IF(associated(id%A_loc)) THEN
+               write(OUT) size(id%A_loc,1)
+               write(OUT) id%A_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NELT")
+            write(OUT) id%NELT
+         CASE("ELTPTR")
+            IF(associated(id%ELTPTR)) THEN
+               write(OUT) size(id%ELTPTR,1)
+               write(OUT) id%ELTPTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("ELTVAR")
+            IF(associated(id%ELTVAR)) THEN
+               write(OUT) size(id%ELTVAR,1)
+               write(OUT) id%ELTVAR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("A_ELT")
+            IF(associated(id%A_ELT)) THEN
+               write(OUT) size(id%A_ELT,1)
+               write(OUT) id%A_ELT
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PERM_IN")
+            IF(associated(id%PERM_IN)) THEN
+               write(OUT) size(id%PERM_IN,1)
+               write(OUT) id%PERM_IN
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("RHS")
+            IF(associated(id%RHS)) THEN
+               write(OUT) size(id%RHS,1)
+               write(OUT) id%RHS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("REDRHS")
+            IF(associated(id%REDRHS)) THEN
+               write(OUT) size(id%REDRHS,1)
+               write(OUT) id%REDRHS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("RHS_SPARSE")
+            IF(associated(id%RHS_SPARSE)) THEN
+               write(OUT) size(id%RHS_SPARSE,1)
+               write(OUT) id%RHS_SPARSE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SOL_loc")
+            IF(associated(id%SOL_loc)) THEN
+               write(OUT) size(id%SOL_loc,1)
+               write(OUT) id%SOL_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IRHS_SPARSE")
+            IF(associated(id%IRHS_SPARSE)) THEN
+               write(OUT) size(id%IRHS_SPARSE,1)
+               write(OUT) id%IRHS_SPARSE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IRHS_PTR")
+            IF(associated(id%IRHS_PTR)) THEN
+               write(OUT) size(id%IRHS_PTR,1)
+               write(OUT) id%IRHS_PTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("ISOL_loc")
+            IF(associated(id%ISOL_loc)) THEN
+               write(OUT) size(id%ISOL_loc,1)
+               write(OUT) id%ISOL_loc
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("LRHS")
+            write(OUT) id%LRHS
+         CASE("NRHS")
+            write(OUT) id%NRHS
+         CASE("NZ_RHS")
+            write(OUT) id%NZ_RHS
+         CASE("LSOL_loc")
+            write(OUT) id%LSOL_loc
+         CASE("LREDRHS")
+            write(OUT) id%LREDRHS
+         CASE("SYM_PERM")
+            IF(associated(id%SYM_PERM)) THEN
+               write(OUT) size(id%SYM_PERM,1)
+               write(OUT) id%SYM_PERM
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("UNS_PERM")
+            IF(associated(id%UNS_PERM)) THEN
+               write(OUT) size(id%UNS_PERM,1)
+               write(OUT) id%UNS_PERM
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NPROW")
+            write(OUT) id%NPROW
+         CASE("NPCOL")
+            write(OUT) id%NPCOL
+         CASE("MBLOCK")
+            write(OUT) id%MBLOCK
+         CASE("NBLOCK")
+            write(OUT) id%NBLOCK
+         CASE("SCHUR_MLOC")
+            write(OUT) id%SCHUR_MLOC
+         CASE("SCHUR_NLOC")
+            write(OUT) id%SCHUR_NLOC
+         CASE("SCHUR_LLD")
+            write(OUT) id%SCHUR_LLD
+         CASE("SIZE_SCHUR")
+            write(OUT) id%SIZE_SCHUR
+         CASE("SCHUR")
+            IF(associated(id%SCHUR)) THEN
+               write(OUT) size(id%SCHUR,1)
+               write(OUT) id%SCHUR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SCHUR_CINTERFACE")
+            IF(associated(id%SCHUR_CINTERFACE)) THEN
+               write(OUT) size(id%SCHUR_CINTERFACE,1)
+               write(OUT) id%SCHUR_CINTERFACE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("LISTVAR_SCHUR")
+            IF(associated(id%LISTVAR_SCHUR)) THEN
+               write(OUT) size(id%LISTVAR_SCHUR,1)
+               write(OUT) id%LISTVAR_SCHUR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MAPPING")
+            IF(associated(id%MAPPING)) THEN
+               write(OUT) size(id%MAPPING,1)
+               write(OUT) id%MAPPING
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("VERSION_NUMBER")
+            write(OUT) id%VERSION_NUMBER
+         CASE("OOC_TMPDIR")
+            write(OUT) id%OOC_TMPDIR
+         CASE("OOC_PREFIX")
+            write(OUT) id%OOC_PREFIX
+         CASE("WRITE_PROBLEM")
+            write(OUT) id%WRITE_PROBLEM
+         CASE("MAX_SURF_MASTER")
+            write(OUT) id%MAX_SURF_MASTER
+         CASE("INST_Number")
+            write(OUT) id%INST_Number
+         CASE("COMM_NODES")
+            write(OUT) id%COMM_NODES
+         CASE("MYID_NODES")
+            write(OUT) id%MYID_NODES
+         CASE("COMM_LOAD")
+            write(OUT) id%COMM_LOAD
+         CASE("MYID")
+            write(OUT) id%MYID
+         CASE("NPROCS")
+            write(OUT) id%NPROCS
+         CASE("NSLAVES")
+            write(OUT) id%NSLAVES
+         CASE("ASS_IRECV")
+            write(OUT) id%ASS_IRECV
+         CASE("LBUFR")
+            write(OUT) id%LBUFR
+         CASE("LBUFR_BYTES")
+            write(OUT) id%LBUFR_BYTES
+         CASE("POIDS")
+            IF(associated(id%POIDS)) THEN 
+               write(OUT) size(id%POIDS,1)
+               write(OUT) id%POIDS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("BUFR")
+            IF(associated(id%BUFR)) THEN 
+               write(OUT) size(id%BUFR,1)
+               write(OUT) id%BUFR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IS")
+            IF(associated(id%IS)) THEN 
+               write(OUT) size(id%IS,1)
+               write(OUT) id%IS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("IS1")
+            IF(associated(id%IS1)) THEN 
+               write(OUT) size(id%IS1,1)
+               write(OUT) id%IS1
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MAXIS1")
+            write(OUT) id%MAXIS1
+         CASE("Deficiency")
+            write(OUT) id%Deficiency
+         CASE("LNA")
+            write(OUT) id%LNA
+         CASE("NBSA")
+            write(OUT) id%NBSA
+         CASE("STEP")
+            IF(associated(id%STEP)) THEN
+               write(OUT) size(id%STEP,1)
+               write(OUT) id%STEP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NE_STEPS")
+            IF(associated(id%NE_STEPS)) THEN
+               write(OUT) size(id%NE_STEPS,1)
+               write(OUT) id%NE_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("ND_STEPS")
+            IF(associated(id%ND_STEPS)) THEN
+               write(OUT) size(id%ND_STEPS,1)
+               write(OUT) id%ND_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("Step2node")
+            IF(associated(id%Step2node)) THEN
+               write(OUT) size(id%Step2node,1)
+               write(OUT) id%Step2node
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FRERE_STEPS")
+            IF(associated(id%FRERE_STEPS)) THEN
+               write(OUT) size(id%FRERE_STEPS,1)
+               write(OUT) id%FRERE_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DAD_STEPS")
+            IF(associated(id%DAD_STEPS)) THEN
+               write(OUT) size(id%DAD_STEPS,1)
+               write(OUT) id%DAD_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FILS")
+            IF(associated(id%FILS)) THEN
+               write(OUT) size(id%FILS,1)
+               write(OUT) id%FILS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PTRAR")
+            IF(associated(id%PTRAR)) THEN
+               write(OUT) size(id%PTRAR,1)
+               write(OUT) id%PTRAR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FRTPTR")
+            IF(associated(id%FRTPTR)) THEN
+               write(OUT) size(id%FRTPTR,1)
+               write(OUT) id%FRTPTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FRTELT")
+            IF(associated(id%FRTELT)) THEN
+               write(OUT) size(id%FRTELT,1)
+               write(OUT) id%FRTELT
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NA")
+            IF(associated(id%NA)) THEN
+               write(OUT) size(id%NA,1)
+               write(OUT) id%NA
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PROCNODE_STEPS")
+            IF(associated(id%PROCNODE_STEPS)) THEN
+               write(OUT) size(id%PROCNODE_STEPS,1)
+               write(OUT) id%PROCNODE_STEPS
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PTLUST_S")
+            IF(associated(id%PTLUST_S)) THEN
+               write(OUT) size(id%PTLUST_S,1)
+               write(OUT) id%PTLUST_S
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PTRFAC")
+            IF(associated(id%PTRFAC)) THEN
+               write(OUT) size(id%PTRFAC,1)
+               write(OUT) id%PTRFAC
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("S")
+            IF(associated(id%S)) THEN
+               write(OUT) id%KEEP8(23)
+               write(OUT) id%S
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PROCNODE")
+            IF(associated(id%PROCNODE)) THEN
+               write(OUT) size(id%PROCNODE,1)
+               write(OUT) id%PROCNODE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("INTARR")
+            IF(associated(id%INTARR)) THEN
+               write(OUT) size(id%INTARR,1)
+               write(OUT) id%INTARR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DBLARR")
+            IF(associated(id%DBLARR)) THEN
+               write(OUT) size(id%DBLARR,1)
+               write(OUT) id%DBLARR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NELT_loc")
+            write(OUT) id%NELT_loc
+         CASE("LELTVAR")
+            write(OUT) id%LELTVAR
+         CASE("NA_ELT")
+            write(OUT) id%NA_ELT
+         CASE("ELTPROC")
+            IF(associated(id%ELTPROC)) THEN
+               write(OUT) size(id%ELTPROC,1)
+               write(OUT) id%ELTPROC
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("CANDIDATES")
+            IF(associated(id%CANDIDATES)) THEN
+               write(OUT) size(id%CANDIDATES,1)
+     &              ,size(id%CANDIDATES,2)
+               write(OUT) id%CANDIDATES
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("ISTEP_TO_INIV2")
+            IF(associated(id%ISTEP_TO_INIV2)) THEN
+               write(OUT) size(id%ISTEP_TO_INIV2,1)
+               write(OUT) id%ISTEP_TO_INIV2
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("FUTURE_NIV2")
+            IF(associated(id%FUTURE_NIV2)) THEN
+               write(OUT) size(id%FUTURE_NIV2,1)
+               write(OUT) id%FUTURE_NIV2
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("TAB_POS_IN_PERE")
+            IF(associated(id%TAB_POS_IN_PERE)) THEN
+               write(OUT) size(id%TAB_POS_IN_PERE,1)
+     &              ,size(id%TAB_POS_IN_PERE,2)
+               write(OUT) id%TAB_POS_IN_PERE
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("I_AM_CAND")
+            IF(associated(id%I_AM_CAND)) THEN
+               write(OUT) size(id%I_AM_CAND,1)
+               write(OUT) id%I_AM_CAND
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MEM_DIST")
+            IF(associated(id%MEM_DIST)) THEN
+               write(OUT) size(id%MEM_DIST,1)
+               write(OUT) id%MEM_DIST
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("POSINRHSCOMP_ROW")
+            IF(associated(id%POSINRHSCOMP_ROW)) THEN 
+               write(OUT) size(id%POSINRHSCOMP_ROW,1)
+               write(OUT) id%POSINRHSCOMP_ROW
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("POSINRHSCOMP_COL_ALLOC")
+            write(OUT) id%POSINRHSCOMP_COL_ALLOC
+         CASE("POSINRHSCOMP_COL")
+            IF(associated(id%POSINRHSCOMP_COL)) THEN
+               IF(id%POSINRHSCOMP_COL_ALLOC) THEN
+                  write(OUT) size(id%POSINRHSCOMP_COL,1)
+                  write(OUT) id%POSINRHSCOMP_COL
+               ELSE
+                  write(OUT) size(id%POSINRHSCOMP_COL,1)
+                  write(OUT) -999
+               ENDIF
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("RHSCOMP")
+            IF(associated(id%RHSCOMP)) THEN
+               write(OUT) size(id%RHSCOMP,1)
+               write(OUT) id%RHSCOMP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MEM_SUBTREE")
+            IF(associated(id%MEM_SUBTREE)) THEN
+               write(OUT) size(id%MEM_SUBTREE,1)
+               write(OUT) id%MEM_SUBTREE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("COST_TRAV")
+            IF(associated(id%COST_TRAV)) THEN
+               write(OUT) size(id%COST_TRAV,1)
+               write(OUT) id%COST_TRAV
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MY_ROOT_SBTR")
+            IF(associated(id%MY_ROOT_SBTR)) THEN
+               write(OUT) size(id%MY_ROOT_SBTR,1)
+               write(OUT) id%MY_ROOT_SBTR
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MY_FIRST_LEAF")
+            IF(associated(id%MY_FIRST_LEAF)) THEN
+               write(OUT) size(id%MY_FIRST_LEAF,1)
+               write(OUT) id%MY_FIRST_LEAF
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("MY_NB_LEAF")
+            IF(associated(id%MY_NB_LEAF)) THEN
+               write(OUT) size(id%MY_NB_LEAF,1)
+               write(OUT) id%MY_NB_LEAF
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DEPTH_FIRST")
+            IF(associated(id%DEPTH_FIRST)) THEN
+               write(OUT) size(id%DEPTH_FIRST,1)
+               write(OUT) id%DEPTH_FIRST
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("DEPTH_FIRST_SEQ")
+            IF(associated(id%DEPTH_FIRST_SEQ)) THEN
+               write(OUT) size(id%DEPTH_FIRST_SEQ,1)
+               write(OUT) id%DEPTH_FIRST_SEQ
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SBTR_ID")
+            IF(associated(id%SBTR_ID)) THEN
+               write(OUT) size(id%SBTR_ID,1)
+               write(OUT) id%SBTR_ID
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SCHED_DEP")
+            IF(associated(id%SCHED_DEP)) THEN
+               write(OUT) size(id%SCHED_DEP,1)
+               write(OUT) id%SCHED_DEP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SCHED_GRP")
+            IF(associated(id%SCHED_GRP)) THEN
+               write(OUT) size(id%SCHED_GRP,1)
+               write(OUT) id%SCHED_GRP
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("CROIX_MANU")
+            IF(associated(id%CROIX_MANU)) THEN
+               write(OUT) size(id%CROIX_MANU,1)
+               write(OUT) id%CROIX_MANU
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("WK_USER")
+            IF(associated(id%WK_USER)) THEN
+               write(OUT) id%KEEP8(24)
+               write(OUT) id%WK_USER
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("NBSA_LOCAL")
+            write(OUT) id%NBSA_LOCAL
+         CASE("LWK_USER")
+            write(OUT) id%LWK_USER
+         CASE("CB_SON_SIZE")
+            IF(associated(id%CB_SON_SIZE)) THEN
+               write(OUT) size(id%CB_SON_SIZE,1)
+               write(OUT) id%CB_SON_SIZE
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("INSTANCE_NUMBER")
+            write(OUT) id%INSTANCE_NUMBER
+         CASE("OOC_MAX_NB_NODES_FOR_ZONE")
+            write(OUT) id%OOC_MAX_NB_NODES_FOR_ZONE
+         CASE("OOC_INODE_SEQUENCE")
+            IF(associated(id%OOC_INODE_SEQUENCE)) THEN
+               write(OUT) size(id%OOC_INODE_SEQUENCE,1)
+     &              ,size(id%OOC_INODE_SEQUENCE,2)
+               write(OUT) id%OOC_INODE_SEQUENCE
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_SIZE_OF_BLOCK")
+            IF(associated(id%OOC_SIZE_OF_BLOCK)) THEN
+               write(OUT) size(id%OOC_SIZE_OF_BLOCK,1)
+     &              ,size(id%OOC_SIZE_OF_BLOCK,2)  
+               write(OUT) id%OOC_SIZE_OF_BLOCK
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_VADDR")
+            IF(associated(id%OOC_VADDR)) THEN
+               write(OUT) size(id%OOC_VADDR,1),size(id%OOC_VADDR,2)
+               write(OUT) id%OOC_VADDR
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_TOTAL_NB_NODES")
+            IF(associated(id%OOC_TOTAL_NB_NODES)) THEN
+               write(OUT) size(id%OOC_TOTAL_NB_NODES,1)
+               write(OUT) id%OOC_TOTAL_NB_NODES
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_NB_FILES")
+            IF(associated(id%OOC_NB_FILES)) THEN
+               write(OUT) size(id%OOC_NB_FILES,1)
+               write(OUT) id%OOC_NB_FILES
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_NB_FILE_TYPE")
+            write(OUT) id%OOC_NB_FILE_TYPE
+         CASE("OOC_FILE_NAMES")
+            IF(associated(id%OOC_FILE_NAMES)) THEN
+               write(OUT) size(id%OOC_FILE_NAMES,1)
+     &              ,size(id%OOC_FILE_NAMES,2)
+               write(OUT) id%OOC_FILE_NAMES
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("OOC_FILE_NAME_LENGTH")
+            IF(associated(id%OOC_FILE_NAME_LENGTH)) THEN
+               write(OUT) size(id%OOC_FILE_NAME_LENGTH,1)
+               write(OUT) id%OOC_FILE_NAME_LENGTH
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("PIVNUL_LIST")
+            IF(associated(id%PIVNUL_LIST)) THEN
+               write(OUT) size(id%PIVNUL_LIST,1)
+               write(OUT) id%PIVNUL_LIST
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("SUP_PROC")
+            IF(associated(id%SUP_PROC)) THEN
+               write(OUT) size(id%SUP_PROC,1),size(id%SUP_PROC,2)
+               write(OUT) id%SUP_PROC
+            ELSE
+               write(OUT) -999,-998
+               write(OUT) -999
+            ENDIF
+         CASE("IPTR_WORKING")
+            IF(associated(id%IPTR_WORKING)) THEN
+               write(OUT) size(id%IPTR_WORKING,1)
+               write(OUT) id%IPTR_WORKING
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("WORKING")
+            IF(associated(id%WORKING)) THEN
+               write(OUT) size(id%WORKING,1)
+               write(OUT) id%WORKING
+            ELSE
+               write(OUT) -999
+               write(OUT) -999
+            ENDIF
+         CASE("root")
+         CASE("NBGRP")
+           write(OUT) id%NBGRP
+        CASE("LRGROUPS")
+           IF(associated(id%LRGROUPS)) THEN
+              write(OUT) size(id%LRGROUPS,1)
+              write(OUT) id%LRGROUPS
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("SCHED_SBTR")
+           IF(associated(id%SCHED_SBTR)) THEN
+              write(OUT) size(id%SCHED_SBTR,1)
+              write(OUT) id%SCHED_SBTR
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("LPOOL_AFTER_L0_OMP")
+           write(OUT) id%LPOOL_AFTER_L0_OMP
+        CASE("LPOOL_BEFORE_L0_OMP")
+           write(OUT) id%LPOOL_BEFORE_L0_OMP
+        CASE("L_PHYS_L0_OMP")
+           write(OUT) id%L_PHYS_L0_OMP
+        CASE("L_VIRT_L0_OMP")        
+           write(OUT) id%L_VIRT_L0_OMP
+        CASE("LL0_OMP_MAPPING")
+           write(OUT) id%LL0_OMP_MAPPING
+        CASE("THREAD_LA")
+           write(OUT) id%THREAD_LA
+        CASE("IPOOL_AFTER_L0_OMP")
+           IF(associated(id%IPOOL_AFTER_L0_OMP)) THEN
+              write(OUT) size(id%IPOOL_AFTER_L0_OMP,1)
+              write(OUT) id%IPOOL_AFTER_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("IPOOL_BEFORE_L0_OMP")
+           IF(associated(id%IPOOL_BEFORE_L0_OMP)) THEN
+              write(OUT) size(id%IPOOL_BEFORE_L0_OMP,1)
+              write(OUT) id%IPOOL_BEFORE_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("PHYS_L0_OMP")
+           IF(associated(id%PHYS_L0_OMP)) THEN
+              write(OUT) size(id%PHYS_L0_OMP,1)
+              write(OUT) id%PHYS_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("VIRT_L0_OMP")
+           IF(associated(id%VIRT_L0_OMP)) THEN
+              write(OUT) size(id%VIRT_L0_OMP,1)
+              write(OUT) id%VIRT_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("PERM_L0_OMP")
+           IF(associated(id%PERM_L0_OMP)) THEN
+              write(OUT) size(id%PERM_L0_OMP,1)
+              write(OUT) id%PERM_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("PTR_LEAFS_L0_OMP")
+           IF(associated(id%PTR_LEAFS_L0_OMP)) THEN
+              write(OUT) size(id%PTR_LEAFS_L0_OMP,1)
+              write(OUT) id%PTR_LEAFS_L0_OMP
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("L0_OMP_MAPPING")
+          IF(associated(id%L0_OMP_MAPPING)) THEN
+              write(OUT) size(id%L0_OMP_MAPPING,1)
+              write(OUT) id%L0_OMP_MAPPING
+           ELSE
+              write(OUT) -999
+              write(OUT) -999
+           ENDIF
+        CASE("IF_RESTARTING")
+           write(OUT) id%IF_RESTARTING
+      CASE("SINGULAR_VALUES")
+         IF(associated(id%SINGULAR_VALUES)) THEN
+            write(OUT) size(id%SINGULAR_VALUES,1)
+            write(OUT) id%SINGULAR_VALUES
+         ELSE
+            write(OUT) -999,-998
+            write(OUT) -999
+         ENDIF 
+      CASE("NB_SINGULAR_VALUES")
+        write(OUT) id%NB_SINGULAR_VALUES
+        CASE("pad0","pad1","pad2","pad3","pad4","pad5","pad8","pad11",
+     &          "pad111", "pad12","pad13","pad14")
+        CASE DEFAULT
+           id%INFOG(1)=-92
+           write(*,*) "IN ZMUMPS_STOP UNKNOWN VARIABLE IN STRUCTURE: "
+     &          // trim(adjustl(VARIABLES(i1)))
+           error=.true.
+           goto 100
+        END SELECT
+      ENDDO
+ 100  continue
+      CLOSE(OUT)
+      if(error) goto 101
+      OUTROOT=OUT+1000
+      OUTFILEROOT=trim(adjustl(OUTFILE)) // trim(adjustl("ROOT")) 
+     &     // trim(adjustl(STRING_ID))
+      open(UNIT=OUTROOT,FILE=OUTFILEROOT,STATUS='replace',
+     &     form='unformatted',iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN ZMUMPS_STOP CANNOT OPEN FILE: "
+     &        //trim(adjustl(OUTFILEROOT))
+         goto 100
+      endif
+      DO i2=1,NBVARIABLES_ROOT
+         SELECT CASE(VARIABLES_ROOT(i2))
+      CASE("MBLOCK")
+         write(OUTROOT) id%root%MBLOCK
+      CASE("NBLOCK")
+         write(OUTROOT) id%root%NBLOCK
+      CASE("NPROW")
+         write(OUTROOT) id%root%NPROW
+      CASE("NPCOL")
+         write(OUTROOT) id%root%NPCOL
+      CASE("MYROW")
+         write(OUTROOT) id%root%MYROW
+      CASE("MYCOL")
+         write(OUTROOT) id%root%MYCOL
+      CASE("SCHUR_MLOC")
+         write(OUTROOT) id%root%SCHUR_MLOC
+      CASE("SCHUR_NLOC")
+         write(OUTROOT) id%root%SCHUR_NLOC
+      CASE("SCHUR_LLD")
+         write(OUTROOT) id%root%SCHUR_LLD
+      CASE("RHS_NLOC")
+         write(OUTROOT) id%root%RHS_NLOC
+      CASE("ROOT_SIZE")
+         write(OUTROOT) id%root%ROOT_SIZE
+      CASE("TOT_ROOT_SIZE")
+         write(OUTROOT) id%root%TOT_ROOT_SIZE
+      CASE("DESCRIPTOR")
+         write(OUTROOT) id%root%DESCRIPTOR
+      CASE("CNTXT_BLACS")
+         write(OUTROOT) id%root%CNTXT_BLACS
+      CASE("LPIV")
+         write(OUTROOT) id%root%LPIV
+      CASE("RG2L_ROW")
+         IF(associated(id%root%RG2L_ROW)) THEN
+            write(OUTROOT) size(id%root%RG2L_ROW,1)
+            write(OUTROOT) id%root%RG2L_ROW
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("RG2L_COL")
+         IF(associated(id%root%RG2L_COL)) THEN
+            write(OUTROOT) size(id%root%RG2L_COL,1)
+            write(OUTROOT) id%root%RG2L_COL
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("IPIV")
+         IF(associated(id%root%IPIV)) THEN
+            write(OUTROOT) size(id%root%IPIV,1)
+            write(OUTROOT) id%root%IPIV
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("RHS_CNTR_MASTER_ROOT")
+         IF(associated(id%root%RHS_CNTR_MASTER_ROOT)) THEN
+            write(OUTROOT) size(id%root%RHS_CNTR_MASTER_ROOT,1)
+            write(OUTROOT) id%root%RHS_CNTR_MASTER_ROOT
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("SCHUR_POINTER")
+         IF(associated(id%root%SCHUR_POINTER)) THEN
+            write(OUTROOT) size(id%root%SCHUR_POINTER,1)
+            write(OUTROOT) id%root%SCHUR_POINTER
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("QR_TAU")
+         IF(associated(id%root%QR_TAU)) THEN
+            write(OUTROOT) size(id%root%QR_TAU,1)
+            write(OUTROOT) id%root%QR_TAU
+         ELSE
+            write(OUTROOT) -999
+            write(OUTROOT) -999
+         ENDIF
+      CASE("RHS_ROOT")
+         IF(associated(id%root%RHS_ROOT)) THEN
+            write(OUTROOT) size(id%root%RHS_ROOT,1)
+     &           ,size(id%root%RHS_ROOT,2)
+            write(OUTROOT) id%root%RHS_ROOT
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF
+      CASE("QR_RCOND")
+         write(OUTROOT) id%root%QR_RCOND
+      CASE("yes")
+         write(OUTROOT) id%root%yes
+      CASE("gridinit_done")
+         write(OUTROOT) id%root%gridinit_done
+      CASE("SVD_U")
+         IF(associated(id%root%SVD_U)) THEN
+            write(OUTROOT) size(id%root%SVD_U,1)
+     &           ,size(id%root%SVD_U,2)
+            write(OUTROOT) id%root%SVD_U
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF   
+      CASE("SVD_VT")
+         IF(associated(id%root%SVD_VT)) THEN
+            write(OUTROOT) size(id%root%SVD_VT,1)
+     &           ,size(id%root%SVD_VT,2)
+            write(OUTROOT) id%root%SVD_VT
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF  
+      CASE("SINGULAR_VALUES")
+         IF(associated(id%root%SINGULAR_VALUES)) THEN
+            write(OUTROOT) size(id%root%SINGULAR_VALUES,1)
+            write(OUTROOT) id%root%SINGULAR_VALUES
+         ELSE
+            write(OUTROOT) -999,-998
+            write(OUTROOT) -999
+         ENDIF 
+      CASE("NB_SINGULAR_VALUES")
+         write(OUTROOT) id%root%NB_SINGULAR_VALUES
+      CASE("rootpad0","rootpad1","rootpad2","rootpad",
+     &        "rootpad3")
+      CASE DEFAULT
+         id%INFOG(1)=-92
+         write(*,*) "IN ZMUMPS_STOP UNKNOWN VARIABLE"
+     &        // "IN ROOT: " // trim(adjustl(VARIABLES_ROOT(i2)))
+         goto 101
+      END SELECT  
+      ENDDO
+ 101  continue
+      CLOSE(OUTROOT)
+      END SUBROUTINE ZMUMPS_STOP
+      SUBROUTINE ZMUMPS_RESTART(id,INFILE)
+      USE ZMUMPS_STRUC_DEF
+      IMPLICIT NONE
+      INCLUDE 'mpif.h'
+      INTEGER::IN,err,NBVARIABLES,i1,NBVARIABLES_ROOT,dummy
+      INTEGER:: i2,size_array1,size_array2,INROOT
+      CHARACTER(len=100),allocatable,DIMENSION(:)::VARIABLES
+      CHARACTER(len=100),allocatable,DIMENSION(:)::VARIABLES_ROOT
+      CHARACTER(len=*), intent(in):: INFILE
+      CHARACTER(len=100):: INFILEMAIN,INFILEROOT
+      CHARACTER(len=3) :: STRING_ID
+      LOGICAL :: error
+      INTEGER MASTER
+      PARAMETER( MASTER = 0 )
+      TYPE (ZMUMPS_STRUC) :: id
+      error=.false.
+      write (STRING_ID, '(i3)') id%MYID
+      NBVARIABLES=171
+      allocate(VARIABLES(NBVARIABLES))
+      VARIABLES(171)="NB_SINGULAR_VALUES"
+      VARIABLES(170)="SINGULAR_VALUES"
+      VARIABLES(169)="IF_RESTARTING"
+      VARIABLES(168)="L0_OMP_MAPPING"
+      VARIABLES(167)="PTR_LEAFS_L0_OMP"
+      VARIABLES(166)="PERM_L0_OMP"
+      VARIABLES(165)="VIRT_L0_OMP"
+      VARIABLES(164)="PHYS_L0_OMP"
+      VARIABLES(163)="IPOOL_AFTER_L0_OMP"
+      VARIABLES(162)="IPOOL_BEFORE_L0_OMP"
+      VARIABLES(161)="THREAD_LA"
+      VARIABLES(160)="LL0_OMP_MAPPING"
+      VARIABLES(159)="L_VIRT_L0_OMP"
+      VARIABLES(158)="L_PHYS_L0_OMP"
+      VARIABLES(157)="LPOOL_BEFORE_L0_OMP"
+      VARIABLES(156)="LPOOL_AFTER_L0_OMP"
+      VARIABLES(155)="NBGRP"
+      VARIABLES(154)="LRGROUPS"
+      VARIABLES(153)="root"
+      VARIABLES(152)="WORKING"
+      VARIABLES(151)="IPTR_WORKING"
+      VARIABLES(150)="pad14"
+      VARIABLES(149)="SUP_PROC"
+      VARIABLES(148)="PIVNUL_LIST"
+      VARIABLES(147)="OOC_FILE_NAME_LENGTH"
+      VARIABLES(146)="OOC_FILE_NAMES"
+      VARIABLES(145)="OOC_NB_FILE_TYPE"
+      VARIABLES(144)="OOC_NB_FILES"
+      VARIABLES(143)="OOC_TOTAL_NB_NODES"
+      VARIABLES(142)="OOC_VADDR"
+      VARIABLES(141)="OOC_SIZE_OF_BLOCK"
+      VARIABLES(140)="pad13"
+      VARIABLES(139)="OOC_INODE_SEQUENCE"
+      VARIABLES(138)="OOC_MAX_NB_NODES_FOR_ZONE"
+      VARIABLES(137)="INSTANCE_NUMBER"
+      VARIABLES(136)="pad12"
+      VARIABLES(135)="CB_SON_SIZE"
+      VARIABLES(134)="DKEEP"
+      VARIABLES(133)="LWK_USER"
+      VARIABLES(132)="NBSA_LOCAL"
+      VARIABLES(131)="WK_USER"
+      VARIABLES(130)="CROIX_MANU"
+      VARIABLES(129)="SCHED_SBTR"
+      VARIABLES(128)="SCHED_GRP"
+      VARIABLES(127)="SCHED_DEP"
+      VARIABLES(126)="SBTR_ID"
+      VARIABLES(125)="DEPTH_FIRST_SEQ"
+      VARIABLES(124)="DEPTH_FIRST"
+      VARIABLES(123)="MY_NB_LEAF"
+      VARIABLES(122)="MY_FIRST_LEAF"
+      VARIABLES(121)="MY_ROOT_SBTR"
+      VARIABLES(120)="COST_TRAV"
+      VARIABLES(119)="MEM_SUBTREE"
+      VARIABLES(118)="RHSCOMP"
+      VARIABLES(117)="POSINRHSCOMP_COL"
+      VARIABLES(116)="POSINRHSCOMP_ROW"
+      VARIABLES(115)="POSINRHSCOMP_COL_ALLOC"
+      VARIABLES(114)="MEM_DIST"
+      VARIABLES(113)="I_AM_CAND"
+      VARIABLES(112)="TAB_POS_IN_PERE"
+      VARIABLES(111)="FUTURE_NIV2"
+      VARIABLES(110)="ISTEP_TO_INIV2"
+      VARIABLES(109)="CANDIDATES"
+      VARIABLES(108)="ELTPROC"
+      VARIABLES(107)="pad11"
+      VARIABLES(106)="NA_ELT"
+      VARIABLES(105)="LELTVAR"
+      VARIABLES(104)="NELT_loc"
+      VARIABLES(103)="DBLARR"
+      VARIABLES(102)="INTARR"
+      VARIABLES(101)="PROCNODE"
+      VARIABLES(100)="S"
+      VARIABLES(99)="PTRFAC"
+      VARIABLES(98)="PTLUST_S"
+      VARIABLES(97)="PROCNODE_STEPS"
+      VARIABLES(96)="NA"
+      VARIABLES(95)="FRTELT"
+      VARIABLES(94)="FRTPTR"
+      VARIABLES(93)="PTRAR"
+      VARIABLES(92)="FILS"
+      VARIABLES(91)="DAD_STEPS"
+      VARIABLES(90)="FRERE_STEPS"
+      VARIABLES(89)="Step2node"
+      VARIABLES(88)="ND_STEPS"
+      VARIABLES(87)="NE_STEPS"
+      VARIABLES(86)="STEP"
+      VARIABLES(85)="NBSA"
+      VARIABLES(84)="LNA"
+      VARIABLES(83)="KEEP"
+      VARIABLES(82)="Deficiency"
+      VARIABLES(81)="MAXIS1"
+      VARIABLES(80)="IS1"
+      VARIABLES(79)="IS"
+      VARIABLES(78)="BUFR"
+      VARIABLES(77)="POIDS"
+      VARIABLES(76)="LBUFR_BYTES"
+      VARIABLES(75)="LBUFR"
+      VARIABLES(74)="ASS_IRECV"
+      VARIABLES(73)="NSLAVES"
+      VARIABLES(72)="NPROCS"
+      VARIABLES(71)="MYID"
+      VARIABLES(70)="COMM_LOAD"
+      VARIABLES(69)="MYID_NODES"
+      VARIABLES(68)="COMM_NODES"
+      VARIABLES(67)="INST_Number"
+      VARIABLES(66)="MAX_SURF_MASTER"
+      VARIABLES(65)="KEEP8"
+      VARIABLES(64)="pad8"
+      VARIABLES(63)="WRITE_PROBLEM"
+      VARIABLES(62)="OOC_PREFIX"
+      VARIABLES(61)="OOC_TMPDIR"
+      VARIABLES(60)="VERSION_NUMBER"
+      VARIABLES(59)="MAPPING"
+      VARIABLES(58)="LISTVAR_SCHUR"
+      VARIABLES(57)="SCHUR_CINTERFACE"
+      VARIABLES(56)="SCHUR"
+      VARIABLES(55)="SIZE_SCHUR"
+      VARIABLES(54)="SCHUR_LLD"
+      VARIABLES(53)="SCHUR_NLOC"
+      VARIABLES(52)="SCHUR_MLOC"
+      VARIABLES(51)="NBLOCK"
+      VARIABLES(50)="MBLOCK"
+      VARIABLES(49)="NPCOL"
+      VARIABLES(48)="NPROW"
+      VARIABLES(47)="UNS_PERM"
+      VARIABLES(46)="SYM_PERM"
+      VARIABLES(45)="RINFOG"
+      VARIABLES(44)="RINFO"
+      VARIABLES(43)="CNTL"
+      VARIABLES(42)="COST_SUBTREES"
+      VARIABLES(41)="INFOG"
+      VARIABLES(40)="INFO"
+      VARIABLES(39)="ICNTL"
+      VARIABLES(38)="pad5"
+      VARIABLES(37)="LREDRHS"
+      VARIABLES(36)="LSOL_loc"
+      VARIABLES(35)="NZ_RHS"
+      VARIABLES(34)="NRHS"
+      VARIABLES(33)="LRHS"
+      VARIABLES(32)="ISOL_loc"
+      VARIABLES(31)="IRHS_PTR"
+      VARIABLES(30)="IRHS_SPARSE"
+      VARIABLES(29)="SOL_loc"
+      VARIABLES(28)="RHS_SPARSE"
+      VARIABLES(27)="REDRHS"
+      VARIABLES(26)="RHS"
+      VARIABLES(25)="PERM_IN"
+      VARIABLES(24)="pad4"
+      VARIABLES(23)="A_ELT"
+      VARIABLES(22)="ELTVAR"
+      VARIABLES(21)="ELTPTR"
+      VARIABLES(20)="pad3"
+      VARIABLES(19)="NELT"
+      VARIABLES(18)="pad2"
+      VARIABLES(17)="A_loc"
+      VARIABLES(16)="JCN_loc"
+      VARIABLES(15)="IRN_loc"
+      VARIABLES(14)="pad1"
+      VARIABLES(13)="NZ_loc"
+      VARIABLES(12)="pad0"
+      VARIABLES(11)="ROWSCA"
+      VARIABLES(10)="COLSCA"
+      VARIABLES(9)="JCN"
+      VARIABLES(8)="IRN"
+      VARIABLES(7)="A"
+      VARIABLES(6)="NZ"
+      VARIABLES(5)="N"
+      VARIABLES(4)="JOB"
+      VARIABLES(3)="PAR"
+      VARIABLES(2)="SYM"
+      VARIABLES(1)="COMM"
+      NBVARIABLES_ROOT=34
+      allocate(VARIABLES_ROOT(NBVARIABLES_ROOT))
+      VARIABLES_ROOT(34)="NB_SINGULAR_VALUES"
+      VARIABLES_ROOT(33)="SINGULAR_VALUES"
+      VARIABLES_ROOT(32)="SVD_VT"
+      VARIABLES_ROOT(31)="SVD_U"
+      VARIABLES_ROOT(30)="gridinit_done"
+      VARIABLES_ROOT(29)="yes"
+      VARIABLES_ROOT(28)="rootpad3"
+      VARIABLES_ROOT(27)="QR_RCOND"
+      VARIABLES_ROOT(26)="rootpad"
+      VARIABLES_ROOT(25)="RHS_ROOT"
+      VARIABLES_ROOT(24)="rootpad2"
+      VARIABLES_ROOT(23)="QR_TAU"
+      VARIABLES_ROOT(22)="SCHUR_POINTER"
+      VARIABLES_ROOT(21)="RHS_CNTR_MASTER_ROOT"
+      VARIABLES_ROOT(20)="rootpad1"
+      VARIABLES_ROOT(19)="IPIV"
+      VARIABLES_ROOT(18)="RG2L_COL"
+      VARIABLES_ROOT(17)="RG2L_ROW"
+      VARIABLES_ROOT(16)="rootpad0"
+      VARIABLES_ROOT(15)="LPIV"
+      VARIABLES_ROOT(14)="CNTXT_BLACS"
+      VARIABLES_ROOT(13)="DESCRIPTOR"
+      VARIABLES_ROOT(12)="TOT_ROOT_SIZE"
+      VARIABLES_ROOT(11)="ROOT_SIZE"
+      VARIABLES_ROOT(10)="RHS_NLOC"
+      VARIABLES_ROOT(9)="SCHUR_LLD"
+      VARIABLES_ROOT(8)="SCHUR_NLOC"
+      VARIABLES_ROOT(7)="SCHUR_MLOC"
+      VARIABLES_ROOT(6)="MYCOL"
+      VARIABLES_ROOT(5)="MYROW"
+      VARIABLES_ROOT(4)="NPCOL"
+      VARIABLES_ROOT(3)="NPROW"
+      VARIABLES_ROOT(2)="NBLOCK"
+      VARIABLES_ROOT(1)="MBLOCK"
+      IN=52+id%MYID
+      INFILEMAIN=trim(adjustl(INFILE)) // trim(adjustl(STRING_ID))
+      open(UNIT=IN,FILE=INFILEMAIN, STATUS='old',FORM='unformatted'
+     &     ,iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN ZMUMPS_RESTART CANNOT OPEN FILE: "
+     &        //trim(adjustl(INFILEMAIN))
+         error=.true.
+         goto 101
+      endif
+      DO i1=4,NBVARIABLES
+         size_array1=0
+         size_array2=0
+         SELECT CASE(VARIABLES(i1))
+         CASE("JOB")
+            read(IN) id%JOB
+         CASE("N")
+            read(IN) id%N
+         CASE("ICNTL")
+            read(IN) id%ICNTL
+         CASE("INFO")
+            read(IN) id%INFO
+         CASE("INFOG")
+            read(IN) id%INFOG
+         CASE("COST_SUBTREES")
+            read(IN) id%COST_SUBTREES
+         CASE("CNTL")
+            read(IN) id%CNTL
+         CASE("RINFO")
+            read(IN) id%RINFO
+         CASE("RINFOG")
+            read(IN) id%RINFOG
+         CASE("KEEP8")
+            read(IN) id%KEEP8
+         CASE("KEEP")
+            read(IN) id%KEEP
+         CASE("DKEEP")
+            read(IN) id%DKEEP    
+         CASE("NZ")
+            read(IN) id%NZ
+         CASE("A")
+            nullify(id%A)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%A(size_array1))
+               read(IN) id%A
+            endif
+         CASE("IRN")
+            nullify(id%IRN)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRN(size_array1))
+               read(IN) id%IRN
+            endif
+         CASE("JCN")
+            nullify(id%JCN)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%JCN(size_array1))
+               read(IN) id%JCN
+            endif
+         CASE("COLSCA")
+            nullify(id%COLSCA)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%COLSCA(size_array1))
+               read(IN) id%COLSCA
+            endif
+         CASE("ROWSCA")
+            nullify(id%ROWSCA)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ROWSCA(size_array1))
+               read(IN) id%ROWSCA
+            endif
+         CASE("NZ_loc")
+            read(IN) id%NZ_loc
+         CASE("IRN_loc")
+            nullify(id%IRN_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRN_loc(size_array1))
+               read(IN) id%IRN_loc
+            endif
+         CASE("JCN_loc")
+            nullify(id%JCN_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%JCN_loc(size_array1))
+               read(IN) id%JCN_loc
+            endif
+         CASE("A_loc")
+            nullify(id%A_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%A_loc(size_array1))
+               read(IN) id%A_loc
+            endif
+         CASE("NELT")
+            read(IN) id%NELT
+         CASE("ELTPTR")
+            nullify(id%ELTPTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ELTPTR(size_array1))
+               read(IN) id%ELTPTR
+            endif
+         CASE("ELTVAR")
+            nullify(id%ELTVAR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ELTVAR(size_array1))
+               read(IN) id%ELTVAR
+            endif
+         CASE("A_ELT")
+            nullify(id%A_ELT)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%A_ELT(size_array1))
+               read(IN) id%A_ELT
+            endif
+         CASE("PERM_IN")
+            nullify(id%PERM_IN)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PERM_IN(size_array1))
+               read(IN) id%PERM_IN
+            endif
+         CASE("RHS")
+            nullify(id%RHS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%RHS(size_array1))
+               read(IN) id%RHS
+            endif
+         CASE("REDRHS")
+            nullify(id%REDRHS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%REDRHS(size_array1))
+               read(IN) id%REDRHS
+            endif
+         CASE("RHS_SPARSE")
+            nullify(id%RHS_SPARSE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%RHS_SPARSE(size_array1))
+               read(IN) id%RHS_SPARSE
+            endif
+         CASE("SOL_loc")
+            nullify(id%SOL_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SOL_loc(size_array1))
+               read(IN) id%SOL_loc
+            endif
+         CASE("IRHS_SPARSE")
+            nullify(id%IRHS_SPARSE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRHS_SPARSE(size_array1))
+               read(IN) id%IRHS_SPARSE
+            endif
+         CASE("IRHS_PTR")
+            nullify(id%IRHS_PTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IRHS_PTR(size_array1))
+               read(IN) id%IRHS_PTR
+            endif
+         CASE("ISOL_loc")
+            nullify(id%ISOL_loc)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ISOL_loc(size_array1))
+               read(IN) id%ISOL_loc
+            endif
+         CASE("LRHS")
+            read(IN) id%LRHS
+         CASE("NRHS")
+            read(IN) id%NRHS
+         CASE("NZ_RHS")
+            read(IN) id%NZ_RHS
+         CASE("LSOL_loc")
+            read(IN) id%LSOL_loc
+         CASE("LREDRHS")
+            read(IN) id%LREDRHS
+         CASE("SYM_PERM")
+            nullify(id%SYM_PERM)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SYM_PERM(size_array1))
+               read(IN) id%SYM_PERM
+            endif
+         CASE("UNS_PERM")
+            nullify(id%UNS_PERM)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%UNS_PERM(size_array1))
+               read(IN) id%UNS_PERM
+            endif
+         CASE("NPROW")
+            read(IN) id%NPROW
+         CASE("NPCOL")
+            read(IN) id%NPCOL
+         CASE("MBLOCK")
+            read(IN) id%MBLOCK
+         CASE("NBLOCK")
+            read(IN) id%NBLOCK
+         CASE("SCHUR_MLOC")
+            read(IN) id%SCHUR_MLOC
+         CASE("SCHUR_NLOC")
+            read(IN) id%SCHUR_NLOC
+         CASE("SCHUR_LLD")
+            read(IN) id%SCHUR_LLD
+         CASE("SIZE_SCHUR")
+            read(IN) id%SIZE_SCHUR
+         CASE("SCHUR")
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHUR(size_array1))
+               read(IN) id%SCHUR
+            endif
+         CASE("SCHUR_CINTERFACE")
+            nullify(id%SCHUR_CINTERFACE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHUR_CINTERFACE(size_array1))
+               read(IN) id%SCHUR_CINTERFACE
+            endif
+         CASE("LISTVAR_SCHUR")
+            nullify(id%LISTVAR_SCHUR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%LISTVAR_SCHUR(size_array1))
+               read(IN) id%LISTVAR_SCHUR
+            endif
+         CASE("MAPPING")
+            nullify(id%MAPPING)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MAPPING(size_array1))
+               read(IN) id%MAPPING
+            endif
+         CASE("VERSION_NUMBER")
+            read(IN) id%VERSION_NUMBER
+         CASE("OOC_TMPDIR")
+            read(IN) id%OOC_TMPDIR
+         CASE("OOC_PREFIX")
+            read(IN) id%OOC_PREFIX
+         CASE("WRITE_PROBLEM")
+            read(IN) id%WRITE_PROBLEM
+         CASE("MAX_SURF_MASTER")
+            read(IN) id%MAX_SURF_MASTER
+         CASE("INST_Number")
+            read(IN) id%INST_Number
+         CASE("COMM_NODES")
+            read(IN) id%COMM_NODES
+         CASE("MYID_NODES")
+            read(IN) id%MYID_NODES
+         CASE("COMM_LOAD")
+            read(IN) id%COMM_LOAD
+         CASE("MYID")
+            read(IN) id%MYID
+         CASE("NPROCS")
+            read(IN) id%NPROCS
+         CASE("NSLAVES")
+            read(IN) id%NSLAVES
+         CASE("ASS_IRECV")
+            read(IN) id%ASS_IRECV
+         CASE("LBUFR")
+            read(IN) id%LBUFR
+         CASE("LBUFR_BYTES")
+            read(IN) id%LBUFR_BYTES
+         CASE("POIDS")
+            nullify(id%POIDS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%POIDS(size_array1))
+               read(IN) id%POIDS
+            endif
+         CASE("BUFR")
+            nullify(id%BUFR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%BUFR(size_array1))
+               read(IN) id%BUFR
+            endif
+         CASE("IS")
+            nullify(id%IS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IS(size_array1))
+               read(IN) id%IS
+            endif
+         CASE("IS1")
+            nullify(id%IS1)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IS1(size_array1))
+               read(IN) id%IS1
+            endif
+         CASE("MAXIS1")
+            read(IN) id%MAXIS1
+         CASE("Deficiency")
+            read(IN) id%Deficiency
+         CASE("LNA")
+            read(IN) id%LNA
+         CASE("NBSA")
+            read(IN) id%NBSA
+         CASE("STEP")
+            nullify(id%STEP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%STEP(size_array1))
+               read(IN) id%STEP
+            endif
+         CASE("NE_STEPS")
+            nullify(id%NE_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%NE_STEPS(size_array1))
+               read(IN) id%NE_STEPS
+            endif
+         CASE("ND_STEPS")
+            nullify(id%ND_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ND_STEPS(size_array1))
+               read(IN) id%ND_STEPS
+            endif
+         CASE("Step2node")
+            nullify(id%Step2node)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%Step2node(size_array1))
+               read(IN) id%Step2node
+            endif
+         CASE("FRERE_STEPS")
+            nullify(id%FRERE_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FRERE_STEPS(size_array1))
+               read(IN) id%FRERE_STEPS
+            endif
+         CASE("DAD_STEPS")
+            nullify(id%DAD_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DAD_STEPS(size_array1))
+               read(IN) id%DAD_STEPS
+            endif
+         CASE("FILS")
+            nullify(id%FILS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FILS(size_array1))
+               read(IN) id%FILS
+            endif
+         CASE("PTRAR")
+            nullify(id%PTRAR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PTRAR(size_array1))
+               read(IN) id%PTRAR
+            endif
+         CASE("FRTPTR")
+            nullify(id%FRTPTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FRTPTR(size_array1))
+               read(IN) id%FRTPTR
+            endif
+         CASE("FRTELT")
+            nullify(id%FRTELT)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FRTELT(size_array1))
+               read(IN) id%FRTELT
+            endif
+         CASE("NA")
+            nullify(id%NA)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%NA(size_array1))
+               read(IN) id%NA
+            endif
+         CASE("PROCNODE_STEPS")
+            nullify(id%PROCNODE_STEPS)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PROCNODE_STEPS(size_array1))
+               read(IN) id%PROCNODE_STEPS
+            endif
+         CASE("PTLUST_S")
+            nullify(id%PTLUST_S)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PTLUST_S(size_array1))
+               read(IN) id%PTLUST_S
+            endif
+         CASE("PTRFAC")
+            nullify(id%PTRFAC)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PTRFAC(size_array1))
+               read(IN) id%PTRFAC
+            endif
+         CASE("S")
+            nullify(id%S)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%S(size_array1))
+               read(IN) id%S
+            endif
+         CASE("PROCNODE")
+            nullify(id%PROCNODE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PROCNODE(size_array1))
+               read(IN) id%PROCNODE
+            endif
+         CASE("INTARR")
+            nullify(id%INTARR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%INTARR(size_array1))
+               read(IN) id%INTARR
+            endif
+         CASE("DBLARR")
+            nullify(id%DBLARR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DBLARR(size_array1))
+               read(IN) id%DBLARR
+            endif
+         CASE("NELT_loc")
+            read(IN) id%NELT_loc
+         CASE("LELTVAR")
+            read(IN) id%LELTVAR
+         CASE("NA_ELT")
+            read(IN) id%NA_ELT
+         CASE("ELTPROC")
+            nullify(id%ELTPROC)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ELTPROC(size_array1))
+               read(IN) id%ELTPROC
+            endif
+         CASE("CANDIDATES")
+            nullify(id%CANDIDATES)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%CANDIDATES(size_array1,size_array2))
+               read(IN) id%CANDIDATES
+            endif
+         CASE("ISTEP_TO_INIV2")
+            nullify(id%ISTEP_TO_INIV2)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%ISTEP_TO_INIV2(size_array1))
+               read(IN) id%ISTEP_TO_INIV2
+            endif
+         CASE("FUTURE_NIV2")
+            nullify(id%FUTURE_NIV2)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%FUTURE_NIV2(size_array1))
+               read(IN) id%FUTURE_NIV2
+            endif
+         CASE("TAB_POS_IN_PERE")
+            nullify(id%TAB_POS_IN_PERE)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%TAB_POS_IN_PERE(size_array1,size_array2))
+               read(IN) id%TAB_POS_IN_PERE
+            endif
+         CASE("I_AM_CAND")
+            nullify(id%I_AM_CAND)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%I_AM_CAND(size_array1))
+               read(IN) id%I_AM_CAND
+            endif
+         CASE("MEM_DIST")
+            nullify(id%MEM_DIST)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MEM_DIST(0:size_array1-1))
+               read(IN) id%MEM_DIST
+            endif
+         CASE("POSINRHSCOMP_ROW")
+            nullify(id%POSINRHSCOMP_ROW)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%POSINRHSCOMP_ROW(size_array1))
+               read(IN) id%POSINRHSCOMP_ROW
+            endif
+         CASE("POSINRHSCOMP_COL_ALLOC")
+            read(IN) id%POSINRHSCOMP_COL_ALLOC
+         CASE("POSINRHSCOMP_COL")
+            nullify(id%POSINRHSCOMP_COL)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               if(id%POSINRHSCOMP_COL_ALLOC) then
+                  allocate(id%POSINRHSCOMP_COL(size_array1))
+                  read(IN) id%POSINRHSCOMP_COL
+               else
+                  read(IN) dummy
+                  id%POSINRHSCOMP_COL=>id%POSINRHSCOMP_ROW
+               endif
+            endif
+         CASE("RHSCOMP")
+            nullify(id%RHSCOMP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%RHSCOMP(size_array1))
+               read(IN) id%RHSCOMP
+            endif
+         CASE("MEM_SUBTREE")
+            nullify(id%MEM_SUBTREE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MEM_SUBTREE(size_array1))
+               read(IN) id%MEM_SUBTREE
+            endif
+         CASE("COST_TRAV")
+            nullify(id%COST_TRAV)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%COST_TRAV(size_array1))
+               read(IN) id%COST_TRAV
+            endif
+         CASE("MY_ROOT_SBTR")
+            nullify(id%MY_ROOT_SBTR)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MY_ROOT_SBTR(size_array1))
+               read(IN) id%MY_ROOT_SBTR
+            endif
+         CASE("MY_FIRST_LEAF")
+            nullify(id%MY_FIRST_LEAF)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MY_FIRST_LEAF(size_array1))
+               read(IN) id%MY_FIRST_LEAF
+            endif
+         CASE("MY_NB_LEAF")
+            nullify(id%MY_NB_LEAF)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%MY_NB_LEAF(size_array1))
+               read(IN) id%MY_NB_LEAF
+            endif
+         CASE("DEPTH_FIRST")
+            nullify(id%DEPTH_FIRST)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DEPTH_FIRST(size_array1))
+               read(IN) id%DEPTH_FIRST
+            endif
+         CASE("DEPTH_FIRST_SEQ")
+            nullify(id%DEPTH_FIRST_SEQ)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%DEPTH_FIRST_SEQ(size_array1))
+               read(IN) id%DEPTH_FIRST_SEQ
+            endif
+         CASE("SBTR_ID")
+            nullify(id%SBTR_ID)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SBTR_ID(size_array1))
+               read(IN) id%SBTR_ID
+            endif
+         CASE("SCHED_DEP")
+            nullify(id%SCHED_DEP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHED_DEP(size_array1))
+               read(IN) id%SCHED_DEP
+            endif
+         CASE("SCHED_GRP")
+            nullify(id%SCHED_GRP)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SCHED_GRP(size_array1))
+               read(IN) id%SCHED_GRP
+            endif
+         CASE("CROIX_MANU")
+            nullify(id%CROIX_MANU)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%CROIX_MANU(size_array1))
+               read(IN) id%CROIX_MANU
+            endif
+         CASE("WK_USER")
+            nullify(id%WK_USER)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%WK_USER(size_array1))
+               read(IN) id%WK_USER
+            endif
+         CASE("NBSA_LOCAL")
+            read(IN) id%NBSA_LOCAL
+         CASE("LWK_USER")
+            read(IN) id%LWK_USER
+         CASE("CB_SON_SIZE")
+            nullify(id%CB_SON_SIZE)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%CB_SON_SIZE(size_array1))
+               read(IN) id%CB_SON_SIZE
+            endif
+         CASE("INSTANCE_NUMBER")
+            read(IN) id%INSTANCE_NUMBER
+         CASE("OOC_MAX_NB_NODES_FOR_ZONE")
+            read(IN) id%OOC_MAX_NB_NODES_FOR_ZONE
+         CASE("OOC_INODE_SEQUENCE")
+            nullify(id%OOC_INODE_SEQUENCE)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_INODE_SEQUENCE(size_array1,size_array2))
+               read(IN) id%OOC_INODE_SEQUENCE
+            endif
+         CASE("OOC_SIZE_OF_BLOCK")
+            nullify(id%OOC_SIZE_OF_BLOCK)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_SIZE_OF_BLOCK(size_array1,size_array2))
+               read(IN) id%OOC_SIZE_OF_BLOCK
+            endif
+         CASE("OOC_VADDR")
+            nullify(id%OOC_VADDR)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_VADDR(size_array1,size_array2))
+               read(IN) id%OOC_VADDR
+            endif
+         CASE("OOC_TOTAL_NB_NODES")
+            nullify(id%OOC_TOTAL_NB_NODES)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_TOTAL_NB_NODES(size_array1))
+               read(IN) id%OOC_TOTAL_NB_NODES
+            endif
+         CASE("OOC_NB_FILES")
+            nullify(id%OOC_NB_FILES)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_NB_FILES(size_array1))
+               read(IN) id%OOC_NB_FILES
+            endif
+         CASE("OOC_NB_FILE_TYPE")
+            read(IN) id%OOC_NB_FILE_TYPE
+         CASE("OOC_FILE_NAMES")
+            nullify(id%OOC_FILE_NAMES)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_FILE_NAMES(size_array1,size_array2))
+               read(IN) id%OOC_FILE_NAMES
+            endif
+         CASE("OOC_FILE_NAME_LENGTH")
+            nullify(id%OOC_FILE_NAME_LENGTH)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%OOC_FILE_NAME_LENGTH(size_array1))
+               read(IN) id%OOC_FILE_NAME_LENGTH
+            endif
+         CASE("PIVNUL_LIST")
+            nullify(id%PIVNUL_LIST)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%PIVNUL_LIST(size_array1))
+               read(IN) id%PIVNUL_LIST
+            endif
+         CASE("SUP_PROC")
+            nullify(id%SUP_PROC)
+            read(IN) size_array1,size_array2
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%SUP_PROC(size_array1,size_array2))
+               read(IN) id%SUP_PROC
+            endif
+         CASE("IPTR_WORKING")
+            nullify(id%IPTR_WORKING)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%IPTR_WORKING(size_array1))
+               read(IN) id%IPTR_WORKING
+            endif
+         CASE("WORKING")
+            nullify(id%WORKING)
+            read(IN) size_array1
+            if(size_array1.EQ.-999) then
+               read(IN) dummy
+            else
+               allocate(id%WORKING(size_array1))
+               read(IN) id%WORKING
+            endif
+         CASE("root")
+        CASE("NBGRP")
+           read(IN) id%NBGRP
+        CASE("LRGROUPS")
+           nullify(id%LRGROUPS)
+           read(IN) size_array1
+           if(size_array1.EQ.-999) then
+              read(IN) dummy
+           else
+              allocate(id%LRGROUPS(size_array1))
+              read(IN) id%LRGROUPS
+           endif
+         CASE("SCHED_SBTR")
+            nullify(id%SCHED_SBTR)
+            read(IN) size_array1
+            IF(size_array1.EQ.-999) THEN
+               read(IN) dummy
+            ELSE
+               allocate(id%SCHED_SBTR(size_array1))
+               read(IN) id%SCHED_SBTR
+            ENDIF 
+        CASE("LPOOL_AFTER_L0_OMP")
+           read(IN) id%LPOOL_AFTER_L0_OMP
+        CASE("LPOOL_BEFORE_L0_OMP")
+           read(IN) id%LPOOL_BEFORE_L0_OMP
+        CASE("L_PHYS_L0_OMP")
+           read(IN) id%L_PHYS_L0_OMP
+        CASE("L_VIRT_L0_OMP")  
+           read(IN) id%L_VIRT_L0_OMP
+        CASE("LL0_OMP_MAPPING")
+           read(IN) id%LL0_OMP_MAPPING
+        CASE("THREAD_LA")
+           read(IN) id%THREAD_LA
+        CASE("IPOOL_AFTER_L0_OMP")
+           nullify(id%IPOOL_AFTER_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%IPOOL_AFTER_L0_OMP(size_array1))
+              read(IN) id%IPOOL_AFTER_L0_OMP
+           ENDIF 
+        CASE("IPOOL_BEFORE_L0_OMP")
+           nullify(id%IPOOL_BEFORE_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%IPOOL_BEFORE_L0_OMP(size_array1))
+              read(IN) id%IPOOL_BEFORE_L0_OMP
+           ENDIF 
+        CASE("PHYS_L0_OMP")
+           nullify(id%PHYS_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%PHYS_L0_OMP(size_array1))
+              read(IN) id%PHYS_L0_OMP
+           ENDIF 
+        CASE("VIRT_L0_OMP")
+           nullify(id%VIRT_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%VIRT_L0_OMP(size_array1))
+              read(IN) id%VIRT_L0_OMP
+           ENDIF
+        CASE("PERM_L0_OMP")
+           nullify(id%PERM_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%PERM_L0_OMP(size_array1))
+              read(IN) id%PERM_L0_OMP
+           ENDIF
+        CASE("PTR_LEAFS_L0_OMP")
+           nullify(id%PTR_LEAFS_L0_OMP)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%PTR_LEAFS_L0_OMP(size_array1))
+              read(IN) id%PTR_LEAFS_L0_OMP
+           ENDIF
+        CASE("L0_OMP_MAPPING")
+           nullify(id%L0_OMP_MAPPING)
+           read(IN) size_array1
+           IF(size_array1.EQ.-999) THEN
+              read(IN) dummy
+           ELSE
+              allocate(id%L0_OMP_MAPPING(size_array1))
+              read(IN) id%L0_OMP_MAPPING
+           ENDIF 
+        CASE("IF_RESTARTING")
+           read(IN) id%IF_RESTARTING 
+        CASE("SINGULAR_VALUES")
+         read(IN) size_array1
+         if(size_array1.EQ.-999) then
+            read(IN) dummy
+         else
+            allocate(id%SINGULAR_VALUES(size_array1))
+            read(IN) id%SINGULAR_VALUES
+         endif  
+      CASE("NB_SINGULAR_VALUES")
+        write(IN) id%NB_SINGULAR_VALUES
+        CASE("pad0","pad1","pad2","pad3","pad4","pad5","pad8","pad11",
+     &          "pad111", "pad12","pad13","pad14")
+        CASE DEFAULT
+           id%INFOG(1)=-92
+           write(*,*) "IN ZMUMPS_RESTART UNKNOWN VARIABLE IN "
+     &       // "STRUCTURE: "//  trim(adjustl(VARIABLES(i1)))
+           goto 101
+        END SELECT
+      ENDDO
+ 101  continue
+      close(IN)
+      if(error) goto 102
+      INROOT=1000+IN
+      INFILEROOT=trim(adjustl(INFILE)) // trim(adjustl("ROOT")) 
+     &     // trim(adjustl(STRING_ID)) 
+      open(UNIT=INROOT,FILE=INFILEROOT, STATUS='old',FORM='unformatted'
+     &     ,iostat=err)
+      if(err.ne.0) THEN
+         id%INFOG(1)=-91
+         write(*,*) "IN ZMUMPS_RESTART CANNOT OPEN FILE: "
+     &        //trim(adjustl(INFILEROOT))
+         goto 102
+      endif
+      DO i2=1,NBVARIABLES_ROOT
+         SELECT CASE(VARIABLES_ROOT(i2))
+      CASE("MBLOCK")
+         read(INROOT) id%root%MBLOCK
+      CASE("NBLOCK")
+         read(INROOT) id%root%NBLOCK
+      CASE("NPROW")
+         read(INROOT) id%root%NPROW
+      CASE("NPCOL")
+         read(INROOT) id%root%NPCOL
+      CASE("MYROW")
+         read(INROOT) id%root%MYROW
+      CASE("MYCOL")
+         read(INROOT) id%root%MYCOL
+      CASE("SCHUR_MLOC")
+         read(INROOT) id%root%SCHUR_MLOC
+      CASE("SCHUR_NLOC")
+         read(INROOT) id%root%SCHUR_NLOC
+      CASE("SCHUR_LLD")
+         read(INROOT) id%root%SCHUR_LLD
+      CASE("RHS_NLOC")
+         read(INROOT) id%root%RHS_NLOC
+      CASE("ROOT_SIZE")
+         read(INROOT) id%root%ROOT_SIZE
+      CASE("TOT_ROOT_SIZE")
+         read(INROOT) id%root%TOT_ROOT_SIZE
+      CASE("DESCRIPTOR")
+         read(INROOT) id%root%DESCRIPTOR
+      CASE("CNTXT_BLACS")
+         read(INROOT) id%root%CNTXT_BLACS
+      CASE("LPIV")
+         read(INROOT) id%root%LPIV
+      CASE("RG2L_ROW")
+         nullify(id%root%RG2L_ROW)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RG2L_ROW(size_array1))
+            read(INROOT) id%root%RG2L_ROW
+         endif
+      CASE("RG2L_COL")
+         nullify(id%root%RG2L_COL)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RG2L_COL(size_array1))
+            read(INROOT) id%root%RG2L_COL
+         endif
+      CASE("IPIV")
+         nullify(id%root%IPIV)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%IPIV(size_array1))
+            read(INROOT) id%root%IPIV
+         endif
+      CASE("RHS_CNTR_MASTER_ROOT")
+         nullify(id%root%RHS_CNTR_MASTER_ROOT)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RHS_CNTR_MASTER_ROOT(size_array1))
+            read(INROOT) id%root%RHS_CNTR_MASTER_ROOT
+         endif
+      CASE("SCHUR_POINTER")
+         nullify(id%root%SCHUR_POINTER)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SCHUR_POINTER(size_array1))
+            read(INROOT) id%root%SCHUR_POINTER
+         endif
+      CASE("QR_TAU")
+         nullify(id%root%QR_TAU)
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%QR_TAU(size_array1))
+            read(INROOT) id%root%QR_TAU
+         endif
+      CASE("RHS_ROOT")
+         nullify(id%root%RHS_ROOT)
+         read(INROOT) size_array1,size_array2
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%RHS_ROOT(size_array1,size_array2))
+            read(INROOT) id%root%RHS_ROOT
+         endif
+      CASE("QR_RCOND")
+         read(INROOT) id%root%QR_RCOND
+      CASE("yes")
+         read(INROOT) id%root%yes
+      CASE("gridinit_done")
+         read(INROOT) id%root%gridinit_done
+      CASE("SVD_U")
+         read(INROOT) size_array1,size_array2
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SVD_U(size_array1,size_array2))
+            read(INROOT) id%root%SVD_U
+         endif
+      CASE("SVD_VT")
+         read(INROOT) size_array1,size_array2
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SVD_VT(size_array1,size_array2))
+            read(INROOT) id%root%SVD_VT
+         endif
+      CASE("SINGULAR_VALUES")
+         read(INROOT) size_array1
+         if(size_array1.EQ.-999) then
+            read(INROOT) dummy
+         else
+            allocate(id%root%SINGULAR_VALUES(size_array1))
+            read(INROOT) id%root%SINGULAR_VALUES
+         endif  
+      CASE("NB_SINGULAR_VALUES")
+        write(INROOT) id%root%NB_SINGULAR_VALUES
+         CASE("rootpad0","rootpad1","rootpad2","rootpad",
+     &        "rootpad3")
+      CASE DEFAULT
+         id%INFOG(1)=-92
+         write(*,*) "IN ZMUMPS_RESTART UNKNOWN VARIABLE "
+     &        // "IN ROOT: "// trim(adjustl(VARIABLES_ROOT(i2)))
+         goto 102
+      END SELECT  
+      ENDDO
+      if(id%root%gridinit_done) then
+         id%root%CNTXT_BLACS = id%COMM_NODES
+         CALL blacs_gridinit( id%root%CNTXT_BLACS, 'R',
+     &        id%root%NPROW, id%root%NPCOL )
+         id%root%gridinit_done = .TRUE.
+      endif
+ 102  continue
+      close(INROOT)
+      END SUBROUTINE ZMUMPS_RESTART
diff -ruN MUMPS_5.1.2/waf mumps-5.1.2-aster7/waf
--- MUMPS_5.1.2/waf	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/waf	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,172 @@
+#!/usr/bin/env python3
+# encoding: latin-1
+# Thomas Nagy, 2005-2018
+#
+"""
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+
+3. The name of the author may not be used to endorse or promote products
+   derived from this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
+IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
+INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGE.
+"""
+
+import os, sys, inspect
+
+VERSION="2.0.20"
+REVISION="df7687050314fa98c5daa534cb234b8c"
+GIT="cef110adc2fb3789107b6ed8dee15397dc7e4030"
+INSTALL=''
+C1='#8'
+C2='#.'
+C3='#,'
+cwd = os.getcwd()
+join = os.path.join
+
+
+WAF='waf'
+def b(x):
+	return x
+if sys.hexversion>0x300000f:
+	WAF='waf3'
+	def b(x):
+		return x.encode()
+
+def err(m):
+	print(('\033[91mError: %s\033[0m' % m))
+	sys.exit(1)
+
+def unpack_wafdir(dir, src):
+	f = open(src,'rb')
+	c = 'corrupt archive (%d)'
+	while 1:
+		line = f.readline()
+		if not line: err('run waf-light from a folder containing waflib')
+		if line == b('#==>\n'):
+			txt = f.readline()
+			if not txt: err(c % 1)
+			if f.readline() != b('#<==\n'): err(c % 2)
+			break
+	if not txt: err(c % 3)
+	txt = txt[1:-1].replace(b(C1), b('\n')).replace(b(C2), b('\r')).replace(b(C3), b('\x00'))
+
+	import shutil, tarfile
+	try: shutil.rmtree(dir)
+	except OSError: pass
+	try:
+		for x in ('Tools', 'extras'):
+			os.makedirs(join(dir, 'waflib', x))
+	except OSError:
+		err("Cannot unpack waf lib into %s\nMove waf in a writable directory" % dir)
+
+	os.chdir(dir)
+	tmp = 't.bz2'
+	t = open(tmp,'wb')
+	try: t.write(txt)
+	finally: t.close()
+
+	try:
+		t = tarfile.open(tmp)
+	except:
+		try:
+			os.system('bunzip2 t.bz2')
+			t = tarfile.open('t')
+			tmp = 't'
+		except:
+			os.chdir(cwd)
+			try: shutil.rmtree(dir)
+			except OSError: pass
+			err("Waf cannot be unpacked, check that bzip2 support is present")
+
+	try:
+		for x in t: t.extract(x)
+	finally:
+		t.close()
+
+	for x in ('Tools', 'extras'):
+		os.chmod(join('waflib',x), 493)
+
+	if sys.hexversion<0x300000f:
+		sys.path = [join(dir, 'waflib')] + sys.path
+		import fixpy2
+		fixpy2.fixdir(dir)
+
+	os.remove(tmp)
+	os.chdir(cwd)
+
+	try: dir = unicode(dir, 'mbcs')
+	except: pass
+	try:
+		from ctypes import windll
+		windll.kernel32.SetFileAttributesW(dir, 2)
+	except:
+		pass
+
+def test(dir):
+	try:
+		os.stat(join(dir, 'waflib'))
+		return os.path.abspath(dir)
+	except OSError:
+		pass
+
+def find_lib():
+	src = os.path.abspath(inspect.getfile(inspect.getmodule(err)))
+	base, name = os.path.split(src)
+
+	#devs use $WAFDIR
+	w=test(os.environ.get('WAFDIR', ''))
+	if w: return w
+
+	#waf-light
+	if name.endswith('waf-light'):
+		w = test(base)
+		if w: return w
+		for dir in sys.path:
+			if test(dir):
+				return dir
+		err('waf-light requires waflib -> export WAFDIR=/folder')
+
+	dirname = '%s-%s-%s' % (WAF, VERSION, REVISION)
+	for i in (INSTALL,'/usr','/usr/local','/opt'):
+		w = test(i + '/lib/' + dirname)
+		if w: return w
+
+	#waf-local
+	dir = join(base, (sys.platform != 'win32' and '.' or '') + dirname)
+	w = test(dir)
+	if w: return w
+
+	#unpack
+	unpack_wafdir(dir, src)
+	return dir
+
+wafdir = find_lib()
+sys.path.insert(0, wafdir)
+
+if __name__ == '__main__':
+
+	from waflib import Scripting
+	Scripting.waf_entry_point(cwd, VERSION, wafdir)
+
+#==>
+#BZh91AY&SY����t�����D������������m�h¬#,0�E0m�b(���w�#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,/�}�W�v�w7��t�][5j����mٱ���ݽ��m�d��W�����vWZȍYY5iM��{ݮjr\�v��#,�e��	֚4�b���].���#,�}=v�'��޾w_}��E]��uh16��g�:�]��g�]��;���nwkz�#,#,#,;�#,P/c@#,�G#,G�Ҕ��l�����]�@6o��y�t�i�GGl&�nh)��m�v�(Q[��#.$UJQ@{"�{1$#,	j��6�m��-����{�i�a痫�k.�Z�jҙ�4�Gl�bRU�;��s��}.����狩Z�z�����w}�k�W�Y��^�WZ������=�4��}��D���sˣ���7w�x��U%[֤��EIP)m��Q������z�W���h{m�a�lj"��r�0#,PT	��!���;��=Q#w�tzk��w��m���{���v����:�B��oW��fCU�=�8d_1�W��}gF�ڔy��nQ����ݲ������M��=��gڼ���`��ڷ��TZ۹�^��omm'#.�����^ջ3���fU��m���^�{9��c�+M�n_\�y�^�|��{��z>�A��:�vR�۹���1�ol�o��J���K��s���Ң�b�sL=����v��7�ݾs/I�&W�g}�U�o,m��δ۝-ۃ0��7��po!���vno�w{�����#,`**Z5@3�n�#8��(�9�ۑކ����U���0��.i�])��]��ow}���P��ݰ�#,T{��}���|���랊��}�k��5U�v�=�"�����S�kuݲ5��;�N�|�p�b�4�l|ڜ!��c���u��n�Y�B;c�M{����[�m�OF�^nއ/ww����>�_^��\wY�ָ�ݮ��Y#�w8�c���v�[��=�ۧ\��'u.��B�7e]׼r���h0U�&�穮�r��������w]��Q:T]�C��^۶{�w��#.�f����y�%k��Zn�m��系{ƝSֹ7�B����^7�smK�iOB�J�j#.�;k^]�o������(kvq]��=�y{�#}�o{��ҴR�������pz����o*�u�3�r�5�/a�9R�mz���mÀ>�}���a#����4w���֝�Z�\�,�PP�+�I�ƻ���#8���^�j�o�zb���z>��W�U�G�;9��Y��[۪$�C�}�בֽ��[gH{پ����Ү�{���z��l]�_]�<k�>�����t���4�#,@4#,@2��L�@#,�4!2�=O(4#,mA�=O#8mA)�B 	��OA4�)�5M�G�����z��#,#,#,#,#,#,$"M#,CL�Ɉ�dj��J~�1�4�����S#54z�#,#,#,#,#,��I#."i?P5=O�=F��h�@�#,�#,�#,#,#,#,#,#,�$A#,@i�&A0A4Ѧ�4�S�#.I�z�L�C@#,4#,#,#,j"#,#@	��i���Sɤɵ��#.#,#,#,#,#,#,/�����J���˚��]ݮ�j���e���jө#8QD�H0#,L�#8#,E�I�B<��>���r�?��&~z��6nŞC����*Wuq3R����º��ɿա�[�T�\�#uLi�z���.\�|�nOK��wN�����ܧ��1/3*mN-��(��.�3�f�2o,\d�|j]��)!���W�F�#,�)0�($��*�H#8ЋH4*&�	 #,d�x^�)%y83 �o �<$4��J��A"O�T�T�"�*�@��&H��<P�d�$jf͔ؠ�Ib����2*R�(��M�4	�P����TF�B�3Id�Q%��b�6��H�ZX��4ŕ6�I�Z-DP�YiM-�1-!�BLA31�I�F�d�#.&�a&�4�	��"���	����������Ė32L��$��M��i��&���Ii���-�6Si2fX�#8�)kLMB�#.2(�6�BѳH�) �ED�6"J�FiQjR�ѱCA 2X�hdFIR&B#K,�$��#�)f�,��2Y)d�M�lb�#.H�C%���Ji��I�FQ!FJ���Ti��@%d�Ɖ"�X��ZA�cY!�&3Jf�0��lK+FL�)66��-%�%D$�F�)L��L2�)�e#8e$��Y�5���RD��KJl�!E�؀�,�(�Y�Q6l��ě")Fl��eSLIҖ#.��dH4����F�d�1�e�Ȧ�b	il� li1I*IeA�FL�6�B��(���,��Y�Y)2&�i��Q�0�YB��`�L��Č�1����	��&jfZ�Q�R؆"fCR4�4�͍#8����,Q��L�l���b*Y��ň�L������ͦ��#D��jd�2#8C�)#.�6�Y�R�0��6FHɑM�(�F2����E*�I1$�YI��&�H�)����2�M$D��h�`�!4�F"ƙ��"	M���(&i���fŬ�$���#.QT�D�#8D�lS#(5%�E�D�h�j�ҁE����1L�D�Y6De0H��4�0��КLȊCD�i��0L�53FR$biE$�DEh5)�,�f)4��,���jeal�Sb2�D�#HJm�ҫ��ؤ�a��b�lmcmI��5�h�ZB�M��l�Q��jf2����	RF��33L�eX��KQ�!hɦ�5��acR#8e��2eI�5i*l��2ȪU4�0�M��f��DVɦVD��Sk%h������$R���)�ؒ�4��*��Z2TEY-�F�b��J5�4D����Z1cZ��Z6��E�Ʌ���QH&�&2�&��؋cF�X�$X�DV�[Yb���LԵ�D�#)iH��VUR�J����%�jdE��K"e6����3m	)��X��6f���j�,�АQ2�I4E���#"A�1����S0!*#8-�d�h�2X�d`l�H��@��"��)�)��)(٦`b#8-dL���I�#M����b�!�#.1$d�b�ba�cDI3QES"��YeXM�3#,dh�bJP���$&�ѐ�(̵Ѱ��Q�4d)SlDS#.�ьjH�XF��%�#82Z(i��bM6e,fRSfVa��a�,��jIj6��h�PѩJM���cl�KQ�H�FD&fA�%D�&��*SLT���%3QX6̩��lf�h��e4�%�[Y���FR�$ �(��#T�6(�٤�%15$$�E���1V36-#.&HM#.,��F�j#8�6,�eX�d6JYIS"5b��j���E����A#,����0�, �4�m%Qh4��d(�D�l�-EQ`6#)[e���],k&�&��eR�C2R�J�����m��b�E�%E�)�4�+�����4����T��iQ� ����5&�1&#l���I� ��A#8�)�*Q�RVKfESI5DQEM�+�d��b(�AL&�"4ZYh�V�6�m�)F�5� �Q�(�BQ�LR�L�dfFcf�c�͓	���[Ib�RT����6�[�(آH�E3l��FŶ1mI��h��ٍbkEb�#cj#i����(�T9��eF�9%F�lked�i+bɶRehѬf��d� M�[m��%"eB�bJ###,�#.�M�iC�mb���hƵ����Z�K&ښ�d-�4Չ�(�#LȬ��a�*MI��ʈ�#8�Ēe$Ȍ�FadD��k�?+�����E����p�#.ҝ��F�Cl%d��M���O�?��Wt%3�e�i#.M�4�o������ߍרv�'2�3���4�����iN2y���&q��	4<mHh�UPUUoP�#8E�#.���*������>�Z?�%�׆Lg��x��F"��X���[s��*����߾d�[l-�L%��S�trL�Zv�����a�8�ca�f�z(��UnٳRp��Z!II�JZ��b��MtO��/'&��'y�!1�r�祯=]zk�s�Y~3�>��g5r	6k�Eow�xN�ݷ#.;�dd�CB���Z� �c@�gQ�]�@�L娲)��o4$RQz�ׁ��T��q��ײ�Z�$����=nf�ѳ�t\��דc�,/��r���A��#�ϙ���:f��uu�B�e�8B�@�咬�����g��PCCm��:�\kc�	r#�CG�#8>��(�0�8�=���V����oW(�T�T�^��c��,D�n�]R$V9��.(��P�R�+�t�#.F�m���$ب�E��5�m"����O�����>>��S+��ln]"~C(���gԙp��T���p��:��#8t�+[�i�eэ�Ab�z�koop�r���2#8��)��|2���r����x�ousF��k�Wyݍ�:W.d�.���9d�t��	�M�����!�9F(H:T����43�leƉ�e�#8�h�bM?�F4�����ٙ#.)+�29���cUHT[b�#.�P�6h��I�A@V�x�ۈs@�W���|�Ǚ�#tE]P�}�+��/�~�?��p������G��^��^!ժ������<��)�rur�G���SD�MY8	��νw���a�X9�=�;PW}|�H)ɨ�>~��s��=�ۻ[�&�u#.n�����HNB��ʝɗ+�PRhѡ^I�9�'Va��#8�kC�B�L�B��ZT�)b#�=/k�b�b�d]T���'ߖ��Ɠ}Y5"�c(W�R�ˬ/v'u��y�E}V�zt��Wl3�v�^p��#,��>P(î�LS��I���۠����箞�v��U*�Ұy�����S:҅A@V�5xܲj7���k�?k��K�`D��dMM�y��C۾#.#.�[�J>���mzk!�@����c�gL'!ȳ�G��T�u��Ȕ�)TA�Rh�޻��^�����&�=��E~r[�wc����7Îvu�°ɥ�)b^��u3Pi-�n��>%�����=w�p�`�Otc�&K�@WL\qu�˙P�F+�ka�rD ��v��#8�X���0V�B�J罗���",5m��)���HN-�Nڄ4]�=tx:�S(E%�ZSѥ������Z���VS���t���H��S�E#8l�QMZH"Ju��J�*�ÓŶ-5k�JSucg�_s	۵#8���Շ�-DG��GJ*rB�#8���K�vQQ>��g#.t�a��ߝz��#V.!��x{�D9z��01�v�9�Ňo���Ř��?&�6T�3#831�7��e�����j�M'�I����o��3�~��ve�J*���j"piMk�?ow.��T�=,��s����P3VHj�Y{�JCO�q��#8Iu��8��D��a��8�Č[�ʲ�A�cR鰁G�R�	�7CVM~tl�j<j�Jt������ɣ�JU;���x�WS8&.S8W[+��ף�]|��r_4ꅙ�w�s'���>�p#.���b�Z���0��7Cg�~�V!��dx��a�;�<Rf˿B�f�^�ZG�p�ѝ0⑿�%�$����K�����u�@�(l;��&�熴zv��G���1�77�KO����#8����L�g��V�m�� ŏ7�V���[��#.uo�����z��;��$:h���}|�F��x��H"�0�:�E5B�^�9�-����v��C�~�,�0Q����z��H)��#,�Щ7��c���mQ+b�<�����R�:I��xK��5�%�/~R:ϥ�,�8`�=jR;�'xo�^�ѽ�W����#[�m�=@�.�.5�v�ch܆8ߙ�ն{:Cls��=��Z�給��u�	$�(��0���t�%Bd�N?	�ܸI���8��QeD��9zC|����W��MpV�_�b����{C�������ׇ-��9��V�raC��mƵ�#.��m��l}z걲�&<�e���|٧�o��r3���jv��b����}9#.��^#.,M�o�'�����k4�ܩ%�D愫*cl/�B�#8>�7+�]��n2���/)�!6�B)��z�_�B�R��Q�(�	�+�W_{��u��>���V�֢��Z[y�QTR���>�>��|����6�<���nC��_�̭����P_V⬕Q>lѴ|(�oU��5F�,(A�$�Kx�O����6S!������k&0�^Z��#.3'�H�?{�~{��\m�y�Q>U���'W�5v6"}��X�_#�<%�t#����x~�A�lg8��p&*���W~5�6��`s�qА�4���3q������LU��,�#�-�9Y�V�g���>[����E�l�h��=��C�ŧS��b�H��k�r��y�M�e���4�n&Ӊ�;L�.�]�=��s�kCj�J�W�*)���j������øD2���i�i5]g�B�=���Kd؆t�i_TFf5����ٻ/\cH��ES#8���(-�����f�@���ݥbR{!��ط<o.��v�$3�����|���G��A��VG梳l_���&�>���4QIB�^�#.�K�4l�T��^tE)���\�:'?׭<*��;F5>i2�����s�8ɣ9�:�h]��ƶ& �:F���c�~0B`ݐe����_��SGn����|��]F�*�4dT/U#����z�y���#����G��γ�m@���⃩�[�'�*#.@��UU7U];{�����9Z+�#8-C8�}z������ǲ*����U9���1�RYL�C5���|��,"���30NR�YG��;A���h0ï$�7!�&��񍇳��k��(.EU{U��r�0�;0�*�zG/І���b�d�V�;��yp�N����S��K��b!��B�9+J�P��ޥ	Jm�a}�z\��:f�W��Aex�Yk�|3�J)�;]M��p|�G��^|'=�{`tJ�\lt��=|�Wo���Z��.�~������o�De��y��۴T�YOb���c�Wz�~�Y:~Y��e��ayz���RWSk>�(���坚�F��0p=�`�4UҜ6i��1DE�{��G��<�u�7�)!�x���dPE%7Ķ����S�b��!�$7�}�v�T�n;�%.QvkR��Tq����@WJ�xG/>κ��J�+j���?�(���P��O(͎�ӎ!�c"cpᝦ��tΧ��8=sJ���j+�J�#r~UQSG��6�S�Bu���)���	�%�t���C���6�:ЫNأ=�J�H�����28y���cm<�G���/.0#8��aF�J�g�~M����G����gc�I#�Z=�����7�����o��4����uG�H��l������:��t��C	����7y������p�[��ʼ��0{�M�y��Z�1(`�fn^���>�=#.h�5��g�:f�Ī�����T���X���Z#.*��	�Te�; �BH���|��� G��Db?	ǎ�V�|#�e4�d!~����w����t�����!c�����d�8l:28ֺ�R���#8?=��#8�c�o�.��+�BB>H�R��m��~������vcH߲/���/8�0ծm3v�Oʔ��֓j����0a=�Qh�U6ʪ�� �DY��g��O#.E~�#8������iٮ��ӕ��~�?Ol���g����ƻ�薪}iI�[��8<y}}��g�c~�p�'�5V��u���0�u�~�5O~�i����)zjsv�vW\Q�m�k���}!�<#.ӂf�0�C-#8F,V!��1R�+h�M���g����5��#.���2¿�	�j�zV���M�00Y�UFuh�Em��@�0f8,m\j��@�-vx�d��� ����4 �0�Ǆ3s�Z�k<�{��F&Iџ�q��SY���D"�Z�;�b�����P��&-aZK���!#.ar�|�tNR{{�/u!PJ:u��X�hq����G��U&�TTM~��v��Pj'5"7iS�1�Z$��z�@�DfjJ��F&������U�v�R�����7���R�듮��*�Q��Zb%��������#,�����m���*f�.�$���\�"7�u��������W�����p��� ���Dh��V��\C�b:S!�� .#.���c�%野�6'Ϛ�8�Q�HX*B*���_�+������Y��Z�$[�u�g�I�0#�>�R#,y#,'�.C~	�P�F�	�ސ�*񷺢:��T�6k����a�uuBC5�<��3�o��f�}j�WS4�R�������ݭi��;�n)Q˹k��;F�q�M�<Zο������r��nʜ�i�w&S�ŜU�uq����k�A%#���rC���u�fb4����J���Z߯B�csQ��hD@��]��$e_��}3Y���+�zbq���q�Y�au��r�ߘ��Ҩۥ��8J�%���3/"�r�汑��37!ﲈF����:�����ՎI˸�|�Xv�_'mM��u�Z3�Qx�'������	������8׮�<���%�dhIc�TMu����8Y�<1�$���y�-4�L��j#Ö�>�00�n��ZgL6˲&m;����1t_7�(�d�{a�^����#.6u}�1�ץM���#,�`�ҏF��f�=���2�Ӻ�pS�qKA���پ�����"�u�����(�������L���'�6�H�WVOnA��g"��s!^\�R\}��	�r��0����B��"pc#87��^� ��]�m�"�/�>��`��/�z&IeD�nw�-ǩ������:�q|�Mv��.�¨E&��AAڃQ�N&|���X��Y~��>7���g�K�����o���`�G�e�����R�UB��{����V˖\sm�7��2s����;bH<�W�(s2�۳[�_���$~'�J�B#�I#,��t��~�۽u~}�b��D%�Ѩ!�jvA%�����<Ϻ�[y��0��B��#.u�f�����M-�d+ኋ�~_g��;dt��H���&������O<�HC�)C����+��|�x|�����N~�IW�O�#L�l�ރB�T`�)9�T�#,d��*����pX#8���H�Q�XʎZ_r	D�;c�Jn��!�|_�PjFO�.:-�h�� ��ӯ71��h�}i`��ey>˥;yx`u��^o�#.XNź��b�w�yTg_v��s�d�K��CF�=����j�Z�������e�,�y�d-��j5�?@m�n�5����{#��~�(���4B��C9Q4���@CK9J�Z���ba�s��J�(�tj��^�����D��q�n+tPY�?MD�s��\,ܭq�P�#.%Dt������Z���(g#,C���bC�F�]���X9�h%��=o[��J]�]�k�M\�U�-������T4>|��	��7�x��ݟ�។��Bs%S��m��@���i��JZ�����N]-�`�@(A�M���'(�C(d2�I(��t�E#.Þ���A ��?B�D���P�9.�tl�� #,� ��B	z!Dz�;�%#,%"A/��@��^�)y�� ��؏��W8l_�]�į;��Q�#8<�G$�����Z��_'sf�b�>=^�}��ݰn&P�)�����{�ۍG�Q���vͰ驘�;#.꤅9+�mx>��:�$k[�R")#,&�@E(���U��m�R����+�����x>fC`��s^�iQE�3���9��p�5C~�v:�b<�@2�G�W�c����;�����#8M�\�1DY�>�7"#,���n�!H#8e��D�x/P�B":��}��ˣo���N�{e���X=�g��6�D�#��i��Ɲ�D��2�a��!p��ň�a�N�Y>�E�H�i}4��@�f1�H#.��c��;}�I�#,%;@c�m���a��.w���=p�}��h��3�>tA��H�!N��Q#,�Ʉ���?��	�G�08M�u�6�m��O�����������s���q`�V� �&�􉰴b��y�#,b0�IR�$0���KOe~1�\��1s��ٸ}>�<<m�@����7���M�79DxZ��7�#g�/���䏲T�Go����ʛ(��n�r����ݺ�,�����忙Fq����������=$�Y����5����Ŝ~���־�%���0 �3�8�a�k��!�g��42Ѽ�&߫_[s^�@�*,UC���x��~�n��H�x��Q�����{�����̳��b�jE�ġ~h�A?ּr@��- ���n�>��;w�,b I�ח�[=T�I���c�b�3��ВϚ&G�t�Gs@���㯇��_N�~�gM|�u^�r�\�31*�+q�{NQW04B<����涗[|�����!0���.,�p�,��#.��"��#,�4!������<�=�|��E�y�yKx���%d�f`�!29=�K�����e�-$r��Mͯ)�7���G#,�db��%����hQnS�4��d}u������V�#8��%�t	���*N�X�ձ��:$_g��3��¨=���ٜ��A�Z�LD{>^����U�f_J��Կ﬒2>n��`�fg�bb|���j���R]�G��I��wQ��`,d��>��)��<bOzb�5����#.ֺgHH�[#.���eu���Te�#�OT�����V�4OE�J)#8#.˩�mUљ"'�o�WN�#,�W&�68���@���!����B#,X��3���HA����%%U����?3#8H�G{iErf�]��l߉��ʹ2}r4�#.~��?�(� x���U�(���ΡwFAm#8�� 8(��GД$�@�x������v�='M0���m#.B�}�?�VDN��w�S]1M�L�Yh�8�1 �Mv�c������z�lrզ7�@�h%�,k�Y^�"5�Ş�sǜ�it�t��!�y�p��7�-HI%�`�=<��s�ϒ��٥���������=w��r��R"����×5�ё���C6��0�Sw<G��D�O<`zߴh����1M���2�tvG��Y-^)���8V㠡�w�UҼ~@x�oJ���X�q+�FRMb�����Amp��L�����ze-� �PSv;	�<J����ZZ`��S���TD�1vLyE���Ҙ!�LimGIˏ�h��5"#���n�{D#PX&1���ւ�޺|���O&�&�S S�0��8F������B�e��w8�YhR���!��Sy`A��+��3x�lG�#8�2:}"�0Jf=1���9AC�l�Dsbg)	��~벯-껛^�N?�c��������F8�0�%&	�(�T���N?5*�G��*?�E�^�}�~�߳x�f�M_ ���d���Pc�1D|ݴP{��9�h�V������ov��5�͝�ϲ2͆2.�� �qh��#8�Z,f+��b�����IsN�.�iB��(ȵ����]vN��v9�;Ğ�C;�_���&{�2ѪRU:�Bc}�,zDA�jμ�r������}����t�}�j��m $����(�A� 1���#Ag�8x�4�`V�KJ���#8����)9����� [t��X��5'@�(6-�F#8Ç�s�E�<_dlv�5[[hM)�����#.Ppp���;j2�BuK4v!їL9�lhr39z�)�m��BP�%���Իp�f�A������l%���sэ�"����W�Wa��7�g_2�8�h�l��[�w|#.�˷�c�z`;��K�f���tn�5<⬴��VQ�+��3GGd�Jv��3T5����/c)e�d�]>~�Hc_�C�.��P�{��Sb�c�L�+#,%m�i����mP:O��#.m}�J��/���c<LO�0z	n��#8���l���b��&*�U~e�����f0���:2�) �,�ٶO^��hК�vo1�>\/<y�g/�����$5!�,)�V2�#8Il�#8�Lcj�hg���wfL��Z����"�HV#,)����9L�N���t!#�ӚýCwĒ�6c������s�.64�W�ppH=�{N�O��X�Aw�{[�S��5��b#.wz/��J�K�⸰�C��p��߁9�Ȳ!�0̘.7Ǟ�c�2pnԼ�8,?7+�C�[��,0r��S"�p�xɐ��#8x!��1�����f�8y�n��С�0�`úB>��?>���}1UH�@�o��R|Ǣ>}�"��[O��Z�ɈP�F��#8M��:A���n`����{�ထ��"��o��b�E�O�U��,E��3�}�	��9�͛�@��c�*�cPDW�8���@������S:��tZ��ي[#.֘���J�(Bw�C�q�.�A�n�q-�I����0���=�b#8��8L!���b�c��B��J�X1�1tX�#8Bl�ӏ��6.����Ծ|��<���E|mnh���k�5zb���m��,�Q��a)w��i�.�R�jB�.c�+c�NꥌF1��chrv�z���b(�8�bE�,v%�1I�����m�R��ـ�4`��~�e���=W���~[��>�����"_�EG���G��r���צ��ʲ�1��/ǰysn(�<�?�*xO	�ޜw�	�����!J�`�@m�9D%d������C���l�P#8�\(�SR����_��;�m���ݤ;�#8���AΦ�)�#.��S�O4	���[i�y�dpg�K�d��c�l"�64��n�9.5�L�zpO������][Z�� �¹Wz�8�J`jT��h9�s}��b�1�H��Y�;TqY$sg���cb����d2�����$���:���^�����8�:4�Pߔ^��v��1�h7f���8 ���|��c '���J�����f\�h���G��v�	������s�o�01���k3�2�[KqW���1�j��?H���p@lߞ�T�噵�J�U"P`Id���pN�d��!����a���oڙ��vǷA������V�����!E�=�b�-�L���@!F�|���ZAe����#8���=QN�Jsa���Dg#.��j4��C[�6�����4���./?���˺&f2��D�y�Rj��bӥ3S=�#8�t���Pȳ G:��a#.$�:��6���3�2�ǄQ���2D!��7P�[����CR!��ÖZ�DQ���;��"8k�1'*#8[�����F���,q�����;��H5�L�D�`�!�M).�7����N����#�:�%��k-p`�*(�5"�S�Zh~��\��h�6Fh(i\#H�fxp�\5��Vd:Q������˝̊$jE�*u���?E/��&��ˑr�<GBy��P��1�2�8���w��)#.�-V�Dcq�K.�һ��#8�i�#.GK��LMd�5�����A����D2l���r#ǯU~G0,�$�	'n�,5�G���f)���2Rc7#,�9�?�^��E����ؤ!2>o�ɱC(rw���n�X�m6�	�E����~�M�w�w�x���^�U���L������R�������[�e�(9Bᄖ�#s,��|-&�Gȇ!!`1{�<(���}UB�'��N�u��P����D� e0O�svA�����w-Ɍc&B��j4��=���L��ُ����1)��5P�A`h��0ps��.k��6�,�@���͛�M�Z'�DiR��/��\���Lo;rN�_ĚU��p;�Ąb^>y���[��������&��1��3���U�reZH�QB�UQC�Z������fn���Tn&��~�_N����Np��#88��tQ�.�����T���D$/�,�����_뿝����`l #,L���!���=:�>8��Om�U��H��}�Q���K��y�7H��v�V��3��~HC��;r�K�.���T��!Jja��)��D�rU�R�Cֆ�1�1�2:Ul!��T"7�-�^����bo��ΰ��#.�t�#8"(,X�L�xh�R�J������3��x����C�>�����'�PLAn�A��n.E0\|Y��U����\�����B����xk��>L�����H��K��5��tj(14���[F���i���ͪ0#����q��B��`���PF:��l<���������W���؁�/�i�&N$�`��K���o�	�^��bv�q��߭T�vz��,��p}q�D���'	��Wi!A�I�ex�@�PL�����ǹ�^�~K��h�\ȻF@O?����q���q���(#��˗�8x~���b��_��o�K�ⳗok�/5���?#��e�~����嶴?������}�u��,�x�L&�C��Y�n>Q�!:�}��V�,\��I#�|���e�<��,�8~��lw��i��|J��OW�,͕I1m,�`���H�̣�w��N��~���,vx� ����e�y�X�g�Y#.���l(j+\�0��>T����=6��	:	����g��|�s�k[8� ��K	�����K�������%���X~=�c��=�a�*9Q�'���c�,�#.B�`��;Z�mId�& 3eK��8�MlU�����Q�XF��� RKVu��;���������aӖ}?�v���y�Mf���G/��<��2SQvi+�,A#8UB�����A`[R��0�2`���H�f��w�������������SU{�U�����1W_���<�O��O��Mkz͕�1�dYh���ԥ'��_�S���w (�GT���>�P5H�HaEJ�E�#.��`!�����2�-C�G��8^gm#.�m��bq��a#8'�j��*U��ɥ���ƳW�?_@s�:�]��E�^1=:%��T��W��w_�f��iԿ�\_�JS8��آ]�ZK`�Jԛ�]Kۿ�����s��`Hh*��X7D|Ǹ�+�����q8�<yP|�ʚQR,�.�|�#9u����4xbs�ll�#.#8{T�I�]�w\4A��C�R�TAU��\o��O���q0��6/ץ�Ͽ[�E@����ְ��,~2�D��yd~OD���Oz���k��O�$�M�8;�Q�И���H�%#.4���(#,b���H��P=L��P|��$8	{��uO@����G�~�?O�o����#��������3����Z��f�Leo��?��UK=='���t���~������ n�O�l�m9������W�㟂���d�{�d\A�'	�0�����u+9�X���.q+��!�t/�rQ�OggM���vϜSM�l���i�����|#�M��kA���ݜ#.-�䮆6�=#t��F��p*�gM�|?�_ƚ����ߑ�FoZR�<Il�<�1�{Cf�s�V�p`�3�C;���G��(qͿ=���s�Ϧ���f��v��è��O���F٬���>O�!�#8B����cnD��R.�u�L�~����<���~6S��=}:�>��O�	�G�������O����9���?���ݤ�;�h���}��2�ȓ�/�:z=^��lS����h��q����*F��/���I�ճ��#8��]���(]6�*��Ï:�;�������}�^��������#~����O�?(rk��r����v^��<�:����OI��P��?����M���L[rbBc�B&��.P=䑠���L��TDc?�������	�R|�]�>p=F}iv(/�U𯍝�JH���o�2�A�1BA0���t�z�P�UE�	q7��ɹ�SO��4���1#��oe�������?t#,��w���'/Y���U�OC��ث�8�!Hx]P#.�PUV	#,Z�#.Ck�.�_���=^�ߏ�ݝ۟��~r	?�G#8a�Q����Ɛ4"��C�[W�4�gcS�&(~�6Bo�=#8fl)��/a���#�t�*0����"����!��bj����=�ϳ��x�g��~�O�ۻ��ћ����t@��WFI_������#쯵����#8�ۤi��i)mt_�˖�7t?��Y�{�{x{�<w���a��}�f�������`��+�5��DH�����c���j�!�w��x��-񣎷&����86E����i��Z:ݫݺ?Ç�_w�F~ch�;ώ��v����2��b��/��i}:�z9�u�}G�}?�{#.�:C�Og��� ���@2�Hdt��,1��iw?>V�S�b,�������}��l�~�q��d�y.�P�w:�O.���q�^�q�u(�u�������/�}0���^�#.}�Ϳ�ʸ?�v�N=�wF0�V��k��:v���}����8%�nP��du�oB�>�.�rӶ9�����g��Ku�jΐ���n#8�b�X�<yYJ�v���爰oܹ׼I0��BZ�#�%{��͐8���e�t��?���z�<n����U�ѫ�{/��͗�>r4�&�c��R%��p�U�����6[���ࡇA��d��ҵ���5y~�U������R����V)C��T,4���wz�On��r>3+-��^�p�w��;Du��3�7�&#??��{�1�����fß.'N�+I#.;�5��a߶6�a�_Uw粿V�&�_gN�h��/�������a*�_N[Y>����V�kHe�l��F�ܠ2�@��c\�,�~*@d����8��t�ž!�#�?/�w��#8(��TH���T���~��.������{S����+�J��]�9��:N1����wZ��n=�#.���1��g��Fӄ{5�m�_��5K��Ҋ�!ȮAGf>o��}x����*��>}���#8;3�_c�(|�_����j���[�n3�؀��^����7�|�#��9���A�p�/$g����+g�tm����������=�vY(&a���h�L����Q����������w#.#O�^Vɥ��o��jjh����J�P���6����}Z.��S�}������U�¨_ȵm-aN��~?w�Y?�������@tr��:c#.Z?�����_BO��D��㞾����g����-'���{=��<����x�G}�ze=j�k;��~�[w�ͯ�a~8v�˻�݇W�ԅ߭��_	������H��������6^1�w���}��v��7�~B�u6��3<���#.��V��/�O�rM�!�=���}�?���xS��?Usp�8|��[�_���k=)Þ;���0v�]������/���>a��%A� ���2W#,�9U��:9�����>ĵ;Ǉ��sr�G��������X)��63��i�G��*Ϯ"y=wbr4�(��D�Ɇvy������׈�o?O�����_���|�w�.�N���Y�%�G�;i�(�@�'���Y7'�)�*�t�<s��lCu����#���5�����x�+�� m9�"���@��=��l���P�/�Ω.����n�BB]�jI���A-���?�౒@����+�V3���=�����c\o����ѻNVua���0�1�H��fS�8b#"]�ߛ��t*�ѣ��!��n/Ȍ���X�K��E2)�:�[#,��ԛ�G6��i������g�a��9��&�����־{�~����&�#.�!J҈��&N=�k�kh���ѨrȈ�Ԙ��`�A�v7w-r���6�%�(Ejc���w�#.u}�/��\�za�^�~���<Y65��MR�o#8�eT[�)KJ�A�x�KF�I?�����1�jV��M��%��ө��!v�m���F�c����*���½�}�B=#.���g�I2I!%'qJ%�>���U�;l��/22��J�O����d+|�����DqC.A#,x��{���2����Y��rݸw{�������Æ��+�7��Vp���X�u�Nh�n��z��}Pb��؇�)�ZQ�4����c,�G~�`Y��uui�[.ٲ��v>,�q]�#�{�PjߪS-��h&L����6f�y�|\�>�0q�*a��#.��	�0�O�gI�=:�[9�w���]���W���o[?���m���Uވ@��֧jI;v���P����d"v�����:ُ6W�����[=x�'x���|T=�0�03A�K�l^>'�.��K6c=���T�?��T�>���������{%'�|�G�x�X�0�1���cay��1Wx�g?��H#h����u���`C�Ũ��L���7a+,��DpaS�qQ��F�A��H��MJ*T&۶ #D49�ń�����p(��?�v��0m�G�p֚ԉ���!aa�[�M`��cX�L�ǁH5dM#.#.Ѕ$R��Պ��pEf8�c��7N'\6��]S�z�oMzi��.N���u�}Z�f��bg����̻��Z�M�38�/�o�=�wj?��z�L�=a�5����A�]��c���Xw!x�H�%�UH�	��.�?Ƴ���q�y�����DhҶ�d���Ҡ��b��i7�x�2��EA*�26Bv��&��NF�%%��$���-(9���:>�	�#My�<�ܳ4�ʚo�)�ö]&���:q��Hd�h�>�e�e��;U���>}���7��-�+�⮽����%��[/�/�8�����O>��X�E0�;�_���ϣ�9��w#.x��;��?ɤ�.ww�e[*�k��+�=��o���wT8XQ�S�ADzD����T~a������Z��uz���ǋ}�~2^W���$fP1i�x������K�th<}���л����\;q^�"N��5��#��r���sXZm�k��F6�`��h�k�O���۷ϻ�]��۹OΉ�+?\��^9�d�a|Q}�o􀟸�?�Q������\p?��/�y�14fׁ�܅QmZ$V��"*����Z�����CXC��9�f!�]��y��yݍ�)M�D�E:Q`b�6Ď�5�T��Q�&Q�\h��I�n(�-p��#.������zh�au%m�Tcl���Q�!l���[��PQ��t�&�w<Y�Hƻr�H�������shف�,Mh�j�o�VdDnT�!�IlB�R3��ZC�Ӹ��YKk��$-�B#8%���2��5�γ�X�ޖ�ou��)��,�R4bq=��j#c�dx��B34�U�Q9�A�DaWZeF8�iVR")]����K�jc�Z���AI$�9�%!���Ň���9UL��v ^�ꌺ�����t�a����MH��^�@�g�z�����O�m�K�dR:�h^ܾ��{!��;W���F��a���5���X{��Z���h��ti�	�\��i٭��b��#.�^)�:1̷��S�`{�����wt�E���a����b")N�2�Oe9�{s�a��߇S�iY���3��a��?�C���#w:�9�S�Ar2��L� �/�xC�%��l碑��n�m��#�6�־�Ip:�#8�$�eUV��G�E�hM@=,��-���� $#�<�(~��9r}�����"g���i������>�>��!�誣#8��H;��O�'���~��J%���_���1�(@�J�A���)�}C�"�����W{�I6�	~�N�6h�&9�����F���E�ӯ�(���y��u�§��s����S�(d�q�V!���1[#,��r��D�Պ�TU!A.TVP����������yl������*�����^����ɤ}+k�,���=��LlzOJ�D&�~�c3���A��lp���7s*[���H�)�#0z�����0���!�yk��*�0�)�da�kOr0�5A�pE30�B���hbdFTX"�{�$�L��/;��ɐ�Fc�� "9�ʌ�AL�m���=�BAC~�h�j�B'�jfR"%��8�*1�HȺ��#�DsV�ƪ+6�:���mu�Dɩ:d�c*�I@�fM���,1�#,Z8r���F��.��2���X6�jn��eɶ�5�KY�?ːɐ��c#.k/4P��+8�r��K(�N��Z�%�:��E;H#.���3ߞ �0�,"���\����y¥(Pȫo]۹r|\_���������:B:��et E!KL�H�e�1~�>fSsc?i�PyK+��y���������n+)'��щ�z�>��	�O-^�����������I��@>�X�L����$m�1b�Ҫ��J� كN0_+�[�_�h�܏�����ҏ�+���#.,Y%ӕ"��	$n���Q�Z�co`F�EA�١�	�Hh�ON�3��[QO\E�M���4.hnǨE{�/F�����K��#.m�N��s0��Ö6�i�q�ϧ��Q���B|�"����m�D�C�տ����z������˚���|}zE�3��3O�!�������l*���y�/PdVpV/G�&�Eѥh27�tv�>�=o���R����?��7Npm4>��	��4Hy�#C��Y�}]mʨ�NЮ�L����R7x268C��e�*��j#.��+�q�B��$#.��u�d��8�t�3�*&�)�jJ�'~�3H�#8��o-�.�I� ������K˭��5t��#.=h#8�|�t7դaW,�ma�#8��o�#.�P�����xrL�;Y$�Q�A�L���3I-��X�c5��f��ḑ;^�j��!�V4Υ�b��V5�{2	�op+v�`j0t�Em��kFa��r�7k�2��i�ڞ�2�!�H��&���ݞ����7���?�����a�}�����3�M9�~���`M�\}�v��N2�"�6�$�ԏ9��;҇bڪ�o�L�Xh�~�u�m��m�ϓ	����;�Kp�L$�C�5@��%�,c%9����2��(xS��-$!��ۀ���S����T�}0ˌcݍ��&��	���$*�N﹟#,.�g���fh׷�o/��K��$�F�	a2��3:a���R(#°(;�����?�wC~��c���#.5� ���6�n���|#8#/���hs6�&Xt�g}��Tk�v!�������,Ef8�Mp�@�Τ4�n+������ێ6��@d�j���#�1[��ۍ�5������z��X��S�Ϲ�q2!Cn[�4�#88n#.33xKw��e��ם�1�5��T��$3��}x5.�����u�Ъ9SZƲeT��u%+U��9w\o��������\F�h��a�@���͠#��xL��R�x��-�p��J�D~RJ#.n47B���:�Ց�IJ�;�5;���vڎ����#8ѩ�d�w#8�F/�dBk8�x�p��wE�ٸ�V}�Ň#,L��B�aяe�+VЉъnں8�d��͕2���F�P;5K�M���1dፑXe�'91�#8�Fo��Nq�	E!&��Wn��V�c&�[�6���� �I�m��dA���U�����6'è�b߮3�6�#8>Fd�=��XDsU ^������JRd��v�Պ�!˘�B}��P�.�K���Z��sGr0�G��a�FJ�ߦ)SU��#.%�\dI��F1�Dȝ`zd�L)��\u�O��O��j��u��z��̲bq��Y�\r�����g*I���H���!R���1DƃJm�����-/u̪�F�S��,��-�e�4�L�H���T>�8��olQ����ɓC�?M'DW]x�f���l��ņ4�|�I���,rB�Ⱟ|xE���-,Sv����~:����Ki�!>�CЉ�gnqX#.�ԏ�Mq7�D>y��K/��'-�8���1M�5�<{�k�zuйBO�ʞrr�Y�X�d�^N8���m{Xae�8g#.]�L��W��Y�#��++���\�����sk�^X��g�?2��ƴ��!�t)�T��:j�b����~,��uP���y�f�i�ԡ�޴��#.�_]���*÷�]�������D���]wi�=�5Ƹ:��oN��8iN����Z�U�J	ȳ������#,\�#8:���ٿ��R��`{���U:;U|�� R<}�j#,��)�zW�mP�fx]wS:Q���wq�Tv��r_����k�Xj����D��d���?�Q��=`ry�a�p����x�D�T�4#.�P��pm��8#����\�#82�:����G�|��@��ǊO�y\�+ �r{?.�	��DEr����s[	}>�iޣ~N:�Ϣ�z�6��ϗk�/#,σ-�y�.|Z��_�1��^bL�8#,z�pr`֢@��.3s�ø3���}��ix�&X�yN��#	tF^���#8e��YJ�#8�f['(d6l���a�x��_�{-�1������{�b*#86#,�úB<-QBw�����f*�j�����=�J���š��K+�M{$="ܳ�=��,y}�o�/�`��)>pw?�s���Y7�<��+ݏčU?���\�Av����hJ?7">Y"�d�p{�(�&ف�����K��1&��=�M��-*�.��ϼr9L�@;����7UL��7`���&b���xe�yg��)IV�\�.B�m0J��R[����F�3��k� ׃hȶ�(���=���c����u��Q�b%�����6�m+�r��3����5Vʱ������f�:�%!#8�2m����P�|����Q>-GmÃ̱����EI���O.����R��(�[�/��:#��b5Ys(�����o_����I�k��P|^�ռ��ۣ9����$Î���]�A��B��Q/iP� ��d�]���k/h~=���p>H����&�A钒zj�PY�QٜX[wA]�BLñ��3�>5י����ښ�'��m�F�P����i]㯄��c��(i������g�Q[r�#Z~ֺ�?���ƫҜZx�"}--qw%E��Q#))�@��A(i5@X�t8���3]"����Sn���=$ӝ=Ջ�����~�������l.���؆&!u�'Y�@'�#.̞�3���b8s�M?-����Ͱ���,$���Y��VX^�aϦ�jB��BP�\�yu���_�M�W�A	���[��8�aS9lV�N/����h#�0f��8��#.{S}E�BƂ>_;<i"A#.��/qz(�݆�i#.�؛e���B�����o_��8�H�N%P��".�hwU�O��;�dR��d|1ט0�=�F�0o�(rgs���e�ǽ#.6��7�x֘c&:���[~v�2TO��jan��f���08�"�@�B��&3�\Gg'/��v�M����Z���YK^��G�4�c��G��D���������`��"*>��m��� ���#8V�?#8���^�\®�Q(�:]��=e5��+0	�#8Fe8�@�y�iv���9�|�L�P��S?����q/�!��}rg�0�5�V���K�����(������a�C{8��%`����tsr�Gj�K0�WS��2��}�����]���`A+%��io����)X�	��V��>1���"y�	Ւ�'lļ��<��Z����j�&�������Ό'�&ӕ�3?f�����<#8�䎋�_+���ktC�8�.�/��eB�~�m���ǧ���Q�:��|f"5�o]$��|+#�qi|���������`!$�6�Ӛ����B�G��锝�}�h0���#,����fv]��c+j/���Ks>��'�n�m�����f'��DN#.���Z�w�w��n�L��c'�j��Z�J-�g߷C�h*��Œ�g-K�mF+,ʼ����hY�o��������8Մ�Ƥ�x��Q�1��nk]��KtϜ�7��jmc��e�ϓ k�;Z��/��F�wg��o6���72a��'��)K�Y>{�;t[:[>(pyG&�J:`;'f�D��Q�}�페(܃���a%K��[i��<��*���%x��r��K�U9B������7s��[��>���[t8���:6���F٢J'�������O��Q(=YE]*4��iX��A����ˍ��͍ul���#8����=ه|De���Sg���N'}��_���%���%��wٳ��+e�Xl;<���v7b.�SdS��Ixz�W7���t���BI/C|��0�J�*0��9��Ӏ�T�FR���(~%ڑHIj/̅,e>>^f�m��2&�]��x��ͥyKHe���L�b�©xoںc}6��"\���rr�[�%�Z���e�%5<)���D0"a#r�_)fu�][_�"�7Q�0����t>�����.�#.�ǅ��k��l�q�,��=��;DXν�k�A���N+5��Y�DRA������_�`�ΧI�S�C�@�B}�1�3x�2cK��Fa��1>�e�{�V�i���9x�6���ᣦ�-/��:�)_���Y.����nq��.�竟0�0a�yU"G����]w��&a�2s�g���BJ�\u�b�4�r��[J(7�Z�׬ґ�齥����3�'ٿ&�e�r�©��Ƴp�xb卷N���[D�j`���Hep����i�갴N�c��n���5�ֈyu��V.��r�����G�#.�0���oGGl�N4HY���s�#.��pz�����IY�6Q�g����p�h���nJ��\/��]���+&�E�U�i�ł����8�q�_�M��7O'+���o�9���U��X�8���#��>罹ݺk��7�G���[m�Ǎ��,����@c��CV^R��tv�����/Ck���J�݅3�(4�HOih�:;�Rz��w{�Σá��Mg\���Y\[�|s�#83���֖����n�i�5�-]9�.��m����`������.qlޮ/U"��{p�Nr���Ό���S#,���9R�#,9B�շ#.�2��VG_M>a���co+ib.W;N�f�.b-�͚�����S�����n:}��٪শ$�U��፬#8�[G���6	(�.o�Ļ�Ώ��(u��r�Ou5�KE�r#8�(���v�!S'YisΥ����d����~X��u@~��Ϲ��Q�j?��S�u�h�-K�J�5qn�A��B��\e'(�e]�ߵ`��9����8�p9�D��R�4�u>0�~p�`�g�&Q�n�Ix�/H��`�F�d5�k�]%�u �U^�5����������6K#8��u��+;��z\��}�{|�v[U(燫e�Ú1Ѿ�#8>�����P���c=G�N������o���w������u���4�h�����vܘ�`��V�A��\���'s���X�o&���zD0&V֮T��Cf�Qҥ*�WD	׍�8_s�Ot��G��^]g��~���sN$pQW�X�\���M��^E���$��w�@:#,K���%X����#.#,���Ѧb(o�+H��ߌ��^���'��`⩝�|����`�iB��m%th�'UV7U���SDx�`n��{ͅ��9�_:ѝ��+<��qt򭥯�]�H!_-�9����K��'����6�v:_�������+y��O�y�T{xpf�w�ʝC�5/ƪ<��� ����H޺���>�xK�3�k�7zT8�4�V���aD�KfFZ�\ԕUx�wM0H�'\�9�2�S�N�3�`��Է��3�)Q�Ղ��DC�$b7Eo���<��YR����e�|0b(�#���m�M�v�#b��Or���aZұ�	l�J��{�Ҵy���F6�H�b8Q%��<,��kp|�JB�'0��k���5/�jxܷF����6���:E�$CAl�0�[J�5�}�X��KM�Yav���嫘�0�����G\�81h�Y��V�����ٜ���/�t�ç�v6a��k��.A�Nhv�±^�K���M�<��j�e#8��B9�n��C|���ߍ,x����`���l�[��c�n�#.��E�eϲ��Fh��W���A�]��[�6��ZwY]��(�4it,���gY*ζ�s��������?1N��0����)Z#.��#E�Ű7�	�H^�v�ݽ#,�(��g���s&�I�8�u��������;�B�.]�>��X8~ =��{۟�^�1Ł�v��S�)�i�}�,3P+ps�L��qǮ@W��$���CX�/գC���T�.I�����䪈�j�p��#.���`�*�#8(+9�*�_����V�]IoirW���uX�l6l��� ��A��v8J�cE���R�J8���#8l�I��ɧ�.u�L�v��k�n�u�VҨ�9�9�шd�����n����z�e�x����Mc#8\�X��z�k���uhI�C1���K2#�ʳ�iy{ƥ8S�Lys�ێ��㷋�5�9����$4�þ,���,���ƅ�\_d.`�����J;�v�}�kp�pvն�k�'�gҽ��}�F誛#-3]k�mQ%�#�v��g��stwR:b7�U!�S	�����Ϯ���0��W:�T�X��Dҭ���E#8��0��ϓ�mF?7��봘�3�@~O�h�'4��#8F0���; 4�<]L<�όTZz^׿��HH\I7�Q�1Q���WUa��qf��G0���m�4��}����*#,�{�=��}�/g��-Rg|�Z��ٶ.o�@�4�1�r�KM.g�s�9c-mMM�&X��^;^����K�Em����������"&��N�����;�Dv���az�i��#.�P���Դ��6az��oa#8��d��2�"�@5�D\,5�L�7��A'�W�F��#D�8�T���ȝ�x�dyp�v��A�  i��FIȧ�r���rĠ���G:\��]����k|��u�w"��9��m��8�~~���4Lj#,}�.�UU8���z���*ݿ����F�\y۸� T�C�&dk���X-K �`�w�b��4��y]A����9�^rz���p�?�ǹ�_D4j4����luF�6�2ӭm)R�Xh�c�mQ,v���)-#.`��]B�����l؉s:\ዞ"��W��=R�+�Vʫ)����k��饉Gs���NU��Zma3`�_�Ge��.��a�^��C�{���B����G_#.M�V�/��6x���ܖ����������}���dG5�)�^h��w�Ny��*�|N�ZY6��6>�3�k���`Q��l�U�&#.M�'��/<}Х}]�`2+�̖r���D�����<�(����p�c���E`c�֫���'�����7Z��|��I񏺶T^�8��/W�s=�Ձm�3��e�ch�c͍��ZU{H9��|���Xc19ł�����u�:�(x�Q���������iF"B�UU(;F���|5�9�J+�rg���m����C"P��+u[��}�{XKGI�&T���%{��Ol���<e�qL��,���� i����<�.E��&9i��S���e��0kP�L���K�˓����B���F��צ+��yw]Z�p�gr�[SdІ*�������N{W�jHL<`��V;�C#.�"(d�uhql0}�9��B�n��4_��U-(:�,9���>Թ��N��m��b�w��ہo��m�7�;}~8�C�wS�BF�u��(��뛦��2WE��#.V���NQ�kJ.Ȩ5ng4��m}�I��x��z�mT�R<m�xx��<ό$��.�i������Ա�'a(^Ed��m���g�4�ܣy����[�q=Q�]F��mߖ�|6�^��66���(�¡��d��D�������|��l���z�j8��D��I��[��ݾ��:�[H�~�B��	����NO�`[#��q#8Z<��OX�ݞOT�\��&����W��^�gv�z3C|�9o^2E��n�5ң��WҬ�:�	��y����_s�*�r=q�Ėݹ��I�#l�������ܟoB���mU���u�bTt���嵡�p��NA�;�o�$�����|H"<�*�|����r\�r����6#.���[t�����H�L���ߩ��N��掇�S5Jor����o���(W�ʾLo�#b�2���$D��ڷ*�2��I�C��u�M������7���h1^1���\m�O'!V^�Ċ[�	���3�9�?%�	� ��˟I#.�P��F(A�SPdI\�����@k)$������b�|��t�>���z5J�5������JH���_xW��N�G�O��<�t׺�G�䇺:�+1��Ѯ���Y�7�)��kC[��rH�D���Q�+g^��u��8q�iL�۴9�p-��x�3ㄌ�#.�����*��xgrΰ�6z�ڮ#8�N�O{���Fɇ�p�K1�Yt���ܿJ���'Z��9�*v���BG�R��p�uA\,`�x_�Ɣ�޵��j�絡�&E��{��oD���[��"#8OS�d�U�t��K9d2-R2V7��6X#,Ȁ���>'g`�:�7�9�u�\<ڵ����k��ש�LR#80�wa�j~������z#.��sW�*v�@��7�U_v�ilS>�	4!;M�d�Hȹ�KJ���?��⽣ǿ�C�����<�{�@O(WҪx�v�4�Z-�l���6�������t{9����F�#�+T���=�!�����=��ζ���਼���Js�M�d�Gu��ԝ_���򣢦G��#8@�ZX#8�����E��q5"�w�ӖJ(3�~����<r�&f�'��2U��r�Fh	�]@����o�������P�ŦJ�16�t�������\2ͭAH�:x�q�-��4I,�냣9B����b%(���XbRh���@�#,t�B�����W�5�1�7_����|ދ���{�I�3]��Ϭ�|9ss(@>�Z�6����9�����U�*=r����m�g�#VdCSL~�ǻ��b�Y��g��%F��Z��k	u�hsO���'��a�$��}�+��)���ZiT�C_.A���p$Ԉ` y$�B(n��f8lE@�=���w������O����;���) �k	 }Bo��/W�a��6إ�݉Z~#1�]a�Y�9���O6hj�`�6I\�e� /�zQY��}�~?WHH(��������[���h�!����p.Eb	A%Y�5����`�2��l�m9�|�g��<��*�c���@�6�:]�)����@:i����rYG����_;�w��_lC%�w���/F!RQy��_�@s�-j�����-�Q����q��.��fO����B�=��c�H�5# 6���%6.֐��ۆ5� ���]���'�.:�m�"_{�P�iӏyer,���'�~�M�QPj]K�Xژ�ڠct#��Ɏȱ>�����4�����r�@ *�2�5�R�G\tn�t�w���~rV- \J���X��Dp��/zs��	���=vG��r#8�;�;��@8��2�����׌y-��/-Bۗ!����h �|��Z۱/������/;{��	����D���#8dP��T�!ц�'�~�?'�2���t����: �D�q| \�U����z�8�##��c��KF��a�4-'�)!�u$��ɄA�5��#.�z�@#.�С�����^����8�(	� qf;��s8�l��II����MS�t،ğQCM}��I^��L=�^P���{A,2��6��_iww~���o��A��A����1�\˄�?����4s̭J����5d�p�M]���<N��RO�#8b��oz��!��ÚTA�$�����w��^��T��#8�ܫ8w�K�v�oF��dW��˃�5�gK'��=x�#��	��A喐#�}��3�3�k���S(�q$��㏔��jҊ�������by��z�~Bȶ������0a���|��1�}1�I͍z2XA�$�_mF8SR�is��3l"��=���{�s���-E����U3�) K���bL|$�]U2w1���5��=����2����rl�:�6a.�j����.X�������N�Q�D�8����,��!�Լ�����C�w��Y�S��hݑv�[��.H�"e�\ANn�+^Q�ٓ�������צ�<��}6i��90CiQo,]�@1��Ç]�t����r^�{�����y�=�w��z��{�CD)ZN!*P��=�"�8�Ѻ��B��g�t�c�q�&�~v�Dݐ�k#8-3�F�P?/����_3}�#.��L�<�^��GVCT�U�]�B#8NI�h��s�,�f~�`[���_~ۺqJ��#8����0�wbAP�%��W�g�y����k˪�Z�����a������D\4#,5Q%�=S� ���+�%�#8qQ������1���xH���u�ޒ���A~�����\��o��_2+�ǌ4����IãXxJe6�V�:�ie��b���Q0#,�CC��T%.i�q�r��L��y<���.�:�������3s�8y�C_~�p�ϐ�1�ѦK��D�y:F�f,I�nGܮ"���R�^�~!-[��0�ޅ���?׬�n�#./Y/�@�KM<a��:,�7���r�4����c5�A�B�RAon�(����?z���H@��1♛��̵vv��#8s�Ѣpe�Ԧ����Brm��@Γl&%:�dK������lɻjd�+B\@p�[Q�`-B�wgl����H��.�5�����7.�m��j���m)��B��Aek܂�:��90>+��Z�)�'fl��1�#.򓄩�`��Td��P3ސ�,�nlҍ�������xl����cn�ol�Ǣ�1H�{��,9m��6�	#.��#.P�u�.-��?Mz�y���c�]��h�#�.���#8^�/�9�A�s��6VĵB*@!�&`(E��q��R�$�9�>5�m�x��3-��?ӣ2Nr^:9�(й���.D��K�1��{�D(IW�m��P��b���E��O�,Mץ�F�Њ�r³O'��W���?��0mӧ7��c+ǯ�25�;BB+�pi������Fڭ���u[I j�0�'�=}�ۡ�!�@�'I���F�w�0׷�r~w)U�J��\���;��(�M�-��c����3P�[����ڿCp������D�ӵ�Z�8RA�E�AD�,�1G)����#8.)��i�V���ϰe:I���5�*p�۞	�A����}�����#8A���W�g2s�y��}�R�\��e~���%�A�3bI��x�%(K���"{{zj2��Y�I�����]���y�C �:61�h�)�����g�(ݴ~]������#c�{		��=k{b�h�e�=LH������y�N0w�X#8]�HR�g�v.$�2��(�#�]o9��$�b9Ȼ��g1u���!v���<��z["S>{yOg����dF�"�[�&Mn�*I�mRt����0�o�t�+�X+0b�Y��úo��P~�K�՘78��6��4���p���[H�	�7/��T@[Z��;���h��hhP�;wָ�9�XB8��o���DJ4#8~d��|�:\��t-4A5��[1�1����S>�]#.Bcj�r<� �op�Rr!1r�H"���0��$�"eP�o_-��z�ì�l(p��aIC��R�i"4�N���<GNr�jμ���qi��X�}�*(�5��ॎ�sц�Y#�wm�JPdR���#��� l%�!f{�,^��$����c�Ό�DqS���SAU2�f��Ί�������gɏ��g���G)w��5�8�{�`�����ZR�9��8����4FV`�T�����>A�T�=�5���ˮ/�U�A��Qh�=�����>���.>�L�}|��	�O�Oa����~�_�0���z�>9��E��T��?�d�>���E��s �?�8^��H�{}|����s& tR�f�#,�z5*>#,�-�#�|��ĀMr�/z�y���x�p㣋�]uE�}MGϭ=�p�qa�.��"���#�}��vM?_sɞ��$BS���M�#8����`��b��\1���N'ϫ��q듊NL��gѠ��^�)!{�Q�*����]�#8�m��r@�~��e��n����������y(�<?	���ߑ���z�0��%��×�&����2���|{�ͧ��f�'��94��)<����fp�����k�nA��8�^�dĸ��G������Ơ���*����#,J\DJ����NޔN�Q�2�8�����r��3���uLǇ�s'��~^�?7�u�0D��;I�@��툓Û�4���a�UUh�c䂁�u�z#�	Л{�Hix��7>Hm�Ǒ��x#���09 l���Np'�G��C��`#,R��Dh9� sC@Ac�'C�t�5�bJ���Ԉ�ƒs�G��ɤ#.)<LL�!8�G^���tt!��st��]B���G7��Kɡ�$�)�O1y�F�J#.Bn}"#8��_�l��=$���*��v����#�R�qdQ�	E�U!Ń#,�=0s;4?_�f(��68#8�D���?o��������lk��GT�_$�g�|��7���p��T/[F���f#.;������Q͗r}�-���Q�&��ޢ���Oh<�{�g:�����g!�&�#�a����u���	8M?��J#I��)[�O�46#.�ȕ���'9���^�&R#8B�	���C�.�[�ή�'��^���WW�"�OY|���'qXC#g}Zn��,⣀�f�G��V#�#8wV�N�h���V�c#$�z�jȎ�S[�E��!���ҩզ)��Ig�,;�mt;qsSi��㪢�����#8���3�u�d!3�^@�>x3�=(�-i�}�9���!���f�o{'����QB&��l@�8�	@��=��9��2h����W���*D$0�M#.y�w�����d�ᘞ�>�.�t�ǭ��-pq�6��N��`ƑP3Kh����C[r�r�((N���J)�,��bZb�f���ϟN���z>%�53*D�q���u���Cϡxt}�wA!h�!��C,M�lnhm��lI�ӾnO!9��( p�'"�A�Q,��'A`PyWA�Bo!3gM�QׁF����<��>h�?�x�`�,DA��	h���saI. �$8��s�$��"���l�>�1Hi<��D/������JM*�y{zVF,O��&�#,�3�;���K#8J8�w�C�1�\��w�hrC i%F�x�0@��P	�$ !a�5�z-fz�����%��FD����ef��ț�����l�]��#,��R���'�5/z�̜:>�W�r��0<��-F��'�ǉ�'m)/#.��-���į�x����<L'�����uG���l|����Iv+�&���ӥ�kQ�*��6�A晎<ȭ�t�R��m�(�y(M��>�/smdD�- ���%˳�l7����)e4�RBT��j�U���vw��*ɇ��у��u=�("$^8d�M}��:��Φ�aG p�B.@��#,P�b����xԴ4�J�	�#8�Q�d�4^J�u���mx�Iջt��	!5�fg�݁��M/,|���DI�m#��L��޷�W����o(��~���	�-���*��ߞ��7S�=~]d~R,�7.��ڛ�.�4��@B"��\Kl(Y�bP��Ғ҅�I#8�l6#,��A4��[��#,�3�_���B�߀@a�#�(*����Q <5�	�S������Ѿ��6�S+$�#8WR1_w�V��"�ZP���Bdq��r�x+/������ �$��.bN��XLp�R��<ymRF����o��՛�ǜ�Y��2����xx�#�AF:���2����#m<��u٪��I,At71��P�Ӿj/�@{�|��9A�g�wT���`��}���~	�Ӷ�6��b�>��9�f��ƒ�=B���By>��!#8x4m�~`KPC@u�"G�zN�S]Dm�����#8HpR'����#����f޽Y��l��Z}����5Z�f0{���a8G�?Cb�eeaa�/�`+�e�xw����-���,OW�^]�)�)�����o+�ywc'��KBe�	 %��񲓻���Tv7�C�밵�I�A�jM�Y��w���m�Ҿ��C4�Q�_�S#.��76\v�\�et|#.�j�`���(�̕(p���|�]�6�9`�9���B���Nl�g��N��r���#r8�d���}��#.�McE4�O�k�J�UPR�"�.� �K҃��p8��^�z:(��q���9���1��_lD� ��1f�,&#.!����+�A�A0�,Pq2CR�F�w^,��@m�+��O#85rcw]�=I9�z�z�b}��}[l{a��f=�v��]�A��pU ����ʨE��9.��#.���EnA٫<�o<�c#��c�믔���]���6#|��p������^E�ϲ�]��n�Y��㮏|w���#.��us��]V�^�9_|&��Xۏ��'��̽+H'��ﱿ��	�::��Xid$4��#,�O�,A��]��ݛ��}��}н#8�$X���pmBB_���>�Et���T9���$G��e�}�>z	���P��3���ψw!�Iɗ�g�lň�4�.����T�L����U����]�CZrD�\3�8V�B���S�Q��IƘ����a�ܷ�]V�y�b���0�Ȍ��D5O����2ⅇ(���#8~��+9�sY#,��<9�c��(�ǝ��P�%	��d�l��D�V ��i���^&Mu������`��SS�f�X�{E*����A��>�*��u��5u��~��&\O�y���?vj����������Z�RG�4m��[��e�fv	#.���`n�節qi�8�׶�t�<�'	:�d�ϙ�r#8;զګ�#.%蓮�;���lfG�gF����h9lu0�̆d]��*�4�/���\�2����]�6F�%�@�SBjG��n�5�Q�T�2rŉ���7>gBԇ<N�B(�^	�t#.�1�c#,��?*�a���8�/3�LS�S��(����H�O|($��,ە�Zw��Y�(��U���d݅��ѡ#,8�;����N�p�?'�lQ]~��BL܌�����#,lA�HG�1%\�8-)1��M����������Ȥ����ߗ�y����l=h#8� oDH��?mD�� �??���O��<��o�`���O$�JS!��I�Q�V�-��0#,�L>$�������o��O���'~�5���ο|L�l^�j�>bz�y��Z�����A�tӆ|&?s���X�>J=w�M���!�O��Cx�H������*�:�ʜ])v71��$�����à68�=R �ظ�ø/l���g$@Q�S�h�`�7��]ggκ������]��q�~�V #,���r��&AQ*P���`P8�k���3~G	�`b�k6�}�b��\C�;��)#.��0V�Ҭ�io\�q�=�u� �(^5QP?�+�"���H@�8�����F�KuQ��-	#,#,#,0�bP#,#,#,��o�=�����g��/�_5`�����X:���mnf����|"����+}m�ՙ�7�M���#����,�32a#,%�`@�!$o������ ϭq�#����]?/l.�65��$��tbZ�x�o��f��|����gD+���:�!����vn�z�&�#,'瞟�X���s:AE��̆Bf��~�go����ј��qu���Iͅ2�����Ȥ��.��؍�������c�T��|~�z�	-$�?4����#,�*6���M�醍�������P�.��>>ʷ��=1��K���x���"��#,�˨}ݣP��M4�b�'e����LC�?Stt����Na�۳�Peh�:Ugƍ}g�n���X�0@�x]��#,"�#8:08��#,��n���d����x�����+�a#,�������ɽ[�&��)��t���Ҍ������6/x��wfL�A����:>�\}7�f,�k}�7�#.���	~�	 ꌤi`�d#8�#8'�jI�����W���'��㏎0KG�4�d����%wg�z�s���)����4Ocz|�j2i�:��f��?�C�I�S�M�K�R���(�(>�u�v���U�Z�T�4DZIA ��ױ�d�D���}{;E�8�w���?�%��4�#`��1��}^m` �U�X������û�_F���W���;��<�%)�:�G�b(���/%;�X��C�c`y�?�:�",�(]4�Lυ�ۋ�l��ۜ��S?l���#,|���'��3�)4+���o����I��_��"��s��G���?���1��)�#;�;:{��X�n��:�Y�O�eD�;���#8nr���z���w�C�x}5k!s�y�=C�;W^��������?Z�%	C������|nh�w4���1?�G�q|�X5���5L\�(��_������I��?F�J�/�8�8#,P �=���=�-#.xi {�&���<�B��#,d�#8��{p�մlx�;�^�@����R&���~���������-������!�-�((���AŞ�����;4aQȢ �@��Pn����R�=[����6'��@�_V�7m�냍p�x?�Oq}�w���#������Vi��?�Y���f��Ԩd�}qq���l�ӻ������ x�"|��a�	�I�ި'�ENb�hs+�@@yg��J����St�ڨ^�Uʌ��~vo+��8�!m�?]�rӆSZBY��[��hk ���F���l(Y���E�σ��A��h�8�����d��g[��8\f�@�v���s]Rf\���o��������0���(溠�Wc�0'+�9��"#Em#.���jYm!G��~y�˳����v`7�#,7o��� �T��G��9����4�.��4������@�"��#,��x���� 5������9�Q#, �����Hks�N�ۣ��8~,��%97~.jǊ��<��Lf���~����y��#.������#,T�s�7m��In�a����}Bh���R�yG�#.�ꍼ/��	�*(f'�=��|>�~*�k��n�A�,�S���?��1��9��g#.�t7g�q�S��m�9��Q�6��H���d�B"���Q?�s#._a����	r|g����>��y�PG���JH�m|l��3�����Ex��=C#,�9��p�]�_��?"�h?m�9F@���3�k��:�Jsv��S8Û<���>>,�|ei�#.�Ztc[2��ຜظ(8�ə"�����g�m�++ܵ��&��V��uc���������V/8����S*��&��[z�>0o��[!y��K��G��.���]R~���Ew��k9~���3(���ń��;��tiwZ-5�K�^����z�l�hu��A��_%Sw6���u��)�oL����;�^�6�	t�#�L�g��em���_;)o���J"�l�&��|���8���&�D.]�2����)�ƨ��:��S��r[l�־�^2]�A�4��ɃUFA��W��*���P$��G*<�\V���<У(���*9���2��1���bW����Ϲ���T���:�oU�a׼�����F?��w��z�|cU���(��i��g���.s����i������)8d\�/��B鈂�:WQ{�볖���&V�eo�zj��b�x��$ML�����t��A7��IK�)�K ��v��Z4��"�u�+��7�M~6XdE��e�.��i��h%t��c��n:)�D񓢏�����]�m��gE�c��^��|���%G� �0��7�a��Yј���\�zgm����y�1;�!���_��K�(��Mq�Y�k�S���VA�Sy���#8x��:�����݆6���!�� �Q���.��=q�)$�L�9p�j�{��'�)�K�ݴ�zY�y���$��EG�;ym�P�C��8�V���S�jU�,qV�	���M�����Sxl�#��mAC�xmO��ʊmTZ���D'vQ��R�cXb��NTO�?�a{���6v8�ޝ~飊zs�CL���H�%�ȵڮ����N�y�Dgr��]FRٜ�_rv"�����������6UN_D�O������UR�l�?���;�vJ"�lCӼ����5Ӓ�a�2�!��%=�H6�d�e%��[i�(N���j�Y|����-��]�6���3��N���:�',��،�݁�8�v���z�3ӱ^(��������|����!��Jۻ���n�ny�f=x���e��\�%s�9Q��k3�y�k�'�)k���-�&1�E��v�h����b��.W�����`���eΟQ͓EP/m �ܹt���FG�#8�F�n*��d�b6Dˉ7��8n��d��(�z�_����J�u�;��2����U\	P#8�TR�&I�~B��/�!�+��\�.;lN�Z.�y�/�3n?7����M��ZiK����]�V�F=E�yD�����Y�>$E��r|Ύ���I�ck����ʖu�̳Ժ�ݨ���=��Λ��n�#��u{Eu���bnK�Q���7�mj��u�M �%�J�~�^�A��T�����K�%���#85e|��x9�kT75�/����ϗ��|6�#�ܫ�!��G�%X_7��6e�*��#.Vq��z��n�,X����#2v�B���!&�����pV$3�^A�#,�p+�k&����Ɨ�FSR�;����q�/CVANm��6���Ѝ��G�\HKac���G���m�5,B8����Ж_��c���~:�FC���\;+��{�JJE�Gq��c2'v1N#.���)��X�-��OA���X�}�t��;'���5hd��!^ ��z�r��;8�m%�����NGm.���~8�g!�ċ#8g���_WK���?�`��#�(�C�����X��ba�sD�:y]�{�)wwo_p��u騊��.��z�Q:)���/KyNi6�\�r�#.����>P'�g����D1��o�9*8p���0Vϴo?8�t�/]�ؿ|�����$U�=tx�[q��U�a�����h�w8�g:'X2j#8��bX��q2�O'�Gu�.�կ��i�A�s!�=�c=seH�K��*ղ_��c���O���2�ۓ����C�j������/!D�G��r(V#.,�P�3,�a��5d-%�h1e��X�-���{C�w��:��Q^J1T�6�s���P,ӿf;r�j&ɢ�S3^���#,B\� �"DdnF�ҙ'��m�1�0�{#8o#,����Q�%�M0F�����eB���Y[�{�R1#8z��������`��|tZ���&Q@�p�?�ı^��4�ɛ�Q��n2!Έ����<fHO5M�߆���惼i�;89���� ��@^�t��=^l-֮�N������I�f�{T�����-�:����N�i��-N����|S1���9�*@���u7O<�	��h����}���zg@�#8fT?� %��[{~�m9/������V?!�V��kR�����g߇��]���������$E�TSt��-�^��9�(���Q���Ea���#,B���G�J��,�����>/�2jdX���J��`U�#8S�=�R��a	~p�y5OO�?�Қ�;ch��>%����-zD����,{��s���g��Ә�RH1�/s��+��4��H��^����9D��]����*D�R��!�A����a�	��&n�j���q����=����y�?�#.�UDe��s��@�?��q�z<}�<05��?�?�X����ٰ=��|�&���I�a��v|����$������{���z���n�Zu۬x�]%>H��#�����d�R�z:�I����۝W�G��$��	A��_�ρp�tA��V�#�t�#.0��W7��t���G�I��pn��~`dS���dpԨڼC���g*��Z?Ǘ�n�1���L��HMPenQ��A���8yr�ᷟ���@X��\�&%ww�j�� �x�p�Q��v�Bz�����%���P`�B�����,�$0�Wڤ���Ӷ����t�FHg�BN���hi��R�E����<jFf�k��w��]��e�.ğ���-��oi�M~Z(�ژ�|t�q��nm�#,���^��QY�����N�@�'f���'���2�^��>	d�R�kЪk�S�aYV�Ti��b$��97ó�r��џ���<��z֯�T;�ܷ3L�,�f��#g��e;g��E?��{t$>����tcˇ��1��"�04�e�[��{�����:O_-�9����3c���<}w�,JӠw>������8�ЄFx�1���$㒀A7T4JToZ�9l}4�x#,~��n#.���.o���Jk��=m��ïp��ې=�(5��tO����y��-���ȉ�Ք�ͼ�/��tC��,l�zO�QB@���!�}��W���G��ZiTz��P�f\>C���p��$DHS</F�J;��#8��#8�߼.Cz�1C�t�X~��K�a�Ņ'����~߽G�K1�i8b�O��=:������{�w���#8�A@J�=+�E&��Q��6L!4g!��.*;��ز��8��DF��m��R��?~Ɯ��{Q.�{��F#,hK|NgHLW(%�FV�^���r٦�=�R�1L0�\=d]���S���ET�!ꀁ�T�(�K�>���>�A���y��b�SN��D�T8Bc���y��zs�.�GK8S����1�#.dSB>��(	t��'>�(��8F���� ��5�����}�#8��\.S���<E��h�m̒�F��&�i+����"��m �MX�:~���*,��6�!	7V�p߮��_��0π�(6?�ϩ��#.=H4�Ks;K��t����LZ#.��)�MG���3�w���uK���B�,�t��;y-֬C���:vDi��[����Ղ�4y�s�C7[��p���Z�+U�f��t)j�ԩ"�⚒V��+n��������J�WD�/�s�������$�5v]Q��X8�.�o�t�5��>����X��&8:ܱ����A��]�Q\�aK��L�P�\���i`�j��Uz��T�i�u�1��h�C��-�!���{va2Ϳf�;�g(l��R�J��o�ﳋ���zɩ�(D����w�Y�fd"0#,�E���{p _�=�*�}�dܕD�/zu��S=��!��t�qes�Yc�}���r��ܵ�|�}�����G�4A�쾊f��%�Q��bhBR��&mP��\�2�}-p��%�"�+G;L	�!����X��w������wN;̄���L���<M��u�������F�H��5��F�#.��]�]v�#8�tǱ#.���kd�%狛Z������hɚ0W  �m+PSI�릩��8��<N�#.��G��vcL�������=��py-Qu�m�ȏ�������S ��[E�m�\_�\���sIC���ў�	�"�v�{i�Z���%8^�Jr���)�ry|���$��������)#8��6z}�;�Ij(�FBzO7�� A8�y����#,�:�JI<�� #,�p���I���ٶ�@0�����A̪9{��n�[s�mH�G��a|��@h�"�*�EP�A�[>uş��u��k���#,�g��C$g�a:��,�L�u�	�C'�7�R [���)e!$8��#.f��#.?��@�w^6 �i0��]����K��b��~�_�6�������	3�o{T�$Ź�5Ul�T�!�LP��5��4L�8���w|}P��^;���2J�N����NӠ�6����a��k��j{A/�:�����Q�[���StP��<�.̡��JC�)�Dg�Z_�Ֆ��ؿK��f>F�<0ӽ��g����̢VK#8f�J����VQ�#8$TE@��e6��H���m�ut#.���pOx��6*�O`V�vnj���!s(PiP�k37oP���7w#8n�[]f@�Ĥ׾A���2G�OI�0zSy�{RI'끕���l��X#.�!i��c��"�=����R�鍺O�q7(<�c���Ν��ͧ'S�!vn]��J9C�"�~�3Xaz~��W�ٺr>��$���o#8*�����h��c"[�KV��*�o|��j#.t�sr�A>z���:���G�����E��?���>s��m�G�-7�~G�(}�� iW�(rK�PTl����efKנm!��U��|2��~��i�� �p���涣�c��ko�����Ac�Y����6�PHo?i[��~y�l�	6�� ʿ8þv	�x�Zŉ����L�Z��~2�/�a-ur]h�{g׎�(��݋a'9�J�`��0!#.V��D��#,��^8TW��t�Sp�s�SxI>���M�6:�<Ф܌��ѿ����	!�����Z-pv�wD0�κ���كX�DN��;�ψy���z�����dGG[�F�k�d�,5�)��n���9�����^���Qs>���p0 F�a)�l�'�Xf���ԋoBR#.�_�j����1)����m~�xl4(���&~H��!��#8�o/}�	�a^!v#+�6_Y��6樝%��#.����t��6�.#,��-�]W�{0QϾm���clR�5�;F<�������z�gNH��2�nq�c�S2z����?	�-��}ʷ���Ƴe�Y|��3�<%�N�X�m�Yu�	Ap*�����A�.РۀQm�c`��;sM�wd��'�D��,mJԜ+n5�#��x�lE%!���&��E�u��R0����;H��#��W������S0f��G��xE�p�G`'����/��'8B�Z�H�0�������Txj#,�"����#5��E��Bb�-�4������o�xq8�x�@��odD���H�>��w٫�[h�3)�!d1�q���or�.��rx�Q7(#,�4�Ã���YB��#,�����\���>O0�}Z�t ��;_���0� +�أ�Ԩ�?���O��+8N<����їZ���^j��#���B�3�	8l|r-MR����ɍ4����KE��üs#,I�>jڞW9���6�0���}ۗ��,���Y�4�z��]���~����\����~1�;D�e����7'慨�{Y],�ez#8?HЈ���0����ʆG�o�ݖ�������@��V߯d��@}b(^*wo�ÇK�k����P}�����?���N�����������6�`�Ӵ4����5$d��-�Ҡ���=*���~�z��	��lZ6#,�	�Ȱ7���7�K&*��#.�4M��^<�96H0F�����&C���(,���n�bd4��Lo��:�CxB��y�#,0'CȎ'.bW���9}�H�&��=AI�B�����8BW�'�#.���	T�ذ@%���1 �>�3�G�>�:S����<�f>����z��9�Dy���}�B��L�hW������DtE!r��a�<_��ظ>~�x�"�_���q�d��tk[֨�J���x�b_�8��JN�0�g��u�5�ğ\�D��B���|?��Os��ZćXP_���;וQ��8��0bꅻ����#,�(����8��$���͂�^�,�ym�#�\@��J�5�+9�GHG\>��_�ϣ��w�~�����!��v�vg=����|��Dz�O�������&	��wh(7a�-�l���`?�#�7�$1�II=�o����/��a]#.0&(��Ia�%N�C�ʿxwN��d'<�8J�p�#L&.�~�]��ш���#,?tIHm5����E8���0i�����o�g�b���G9�=]��l�_��φ�*�ܴ=��>� ���߰<'�<��;$�w���s�����Ĝ8�]3�7�~���;l-Ȣ#.�M~&�/L�R%o��֎�������ˊa�����5Ũ�!�4!�'y�Qf�՜Yļ��BѪ�[��*�Xv���H0;�ҽ��Cj����@�_W�����!�#8��1>�1�l(g@̈́	ϖ1�ӻ#.��caj��$�|?Eg���~7��I�P�l}&�?ǐA��A�u#.X>���Q��o���b���$3�1H��I1zhb�n�La$��RO����HyT*H�>���@|�����>�Ԥ���Uˍ�����{��Y�l�7z�kx�C7�b�)c�1����0������7@��^s��������7>����n1��������K4�=O/���۠"�aiH��J���x<�	_��������/�.�h�c�d#U�!@����0y�|�6d��g���]�N<k�x�Bǥ�+x%���$H���kU�z,r�\t�b�o�^a�]��L�UU]v��}^\d���sӠb��J\�?���2T=�^©�ԎJ���4Tl�rno�e�[��ѺG�춼U�k��b��zW�8���A���q����EyΫhA �_��~<����y��a�(~҅`�V�.��*�Gˈ�l���h������P��/��0�V_��P\�p	h'�U�Ãٍ�9L��;�����o��s��r�W�z\[`S0ju�+4ILFm�T#.�KOK����Y�Z��X6�?�A�W�#�j�6�h҈��0h��������ϠTZZ�#8��i!D#,�1;N�:�7�����D����{L>�ppND�%g:>�?�����O�7����i_%:�����(>K�/I1�ixֱۥ70B=X>���P8�	����C��s���"�gKﲠ�Ic�N�JϿZːo�-h��U���e��#�d���)Of8qSv<��Nh��;�==�z|=F���rf������z���2#�?����s�u򄝁XG)��j�͡�N�%&�p5�y%��`!�pa2@�8�������`��#8�s@vA�_��m�-��ɞ8!I_�׌,0�'�iaC�T�ތ��z��$H��W��f���똍�얗z��,e3D��6�F�OZ�*r#.��Vi�-��7r6Y���D4Y�y$�I���X��L��Ԗ���y���-z�ޙY��u�.��W�@���z�k,CC[��R��y��uhe�C�{���u�~��+vcU\P|$_�>���M�\���Ҿc��O�-�&�R�ã����s�H�Bx��O���ɨ���%@~�r#8����W��Qb���1G�=��(�����Q��Q;��:�� u-?A�޻F��>ʖM@��$$0��G������ۧ>q�KmH|�5��jd&��["v]��5��B��#8M��L����q�g&��<u�Y�p���p*�m��RD	(�8�1�����Z�,�2����.�O���#8���1� *��޺mwgf���֤|��l�#0�PD�u<�r<N�ï����c#T��R�ھ��v�5�"�]I0T�������Z;��}�������;G�<x���ޯ`�@>����ED]~A����`�m���IF |�_�~������z�|�}@%}�S�=��/�U(�)JEM�m!�<@�;�����#,�4���E�i#,hӀ��E\�6}o�u��z��~��F��c�҂ݝ��;���;���� MM-	�]��Q������(-# �o��a�1C7p�\#,k��?T�Jk`#�/3��7�I@�A������b�P@~��_W�7=X���W����/�s�(Df|?�����W����_D��8y���WNH�����li�||?I�g�_���g�Ya�%�r"v�{'N�"B�H���#�p=��;��a��=���g#,z����'���9��#���������v(x'�}J>�T��sd{#,�}��D�\�����%Hç�z{'C����!,��M�yV�;@��ޮ�V_���=���C�W����hF��h���q8���_�<C`p�1��8��u'������9n�n�d%��C� z09=���~�1�#,��<��ޘu@�'֣��P'IP|��)�MD���Ѓc\D����M��$��	��#8����iN�>�8�d(��5U|P6#,�ؾ@��� ���P�C|=����IJ�<�'�zCݮ���}Q�g��a����3���0�p���R������,�.o�H�{�1��`����a�(��>�Z��p��Cn�z���%��*�����f��b�0�/Xx�C�;���<�;XY>�ѡ�5���z�gw�;�'4`ËN��/����d�"��T|��SGA0��!��"�H�c:���&�v[���ʈ��r8�al��T�g��S��z*��HZ�1M8�y�v�h�sx��/i�n8:Drz��]��|���ǿ�jkR]I'X/�f�s���iZ��%j\�f�o�rx���Ѣ4X��!���|��9�kE�ʒ�}_X�P��0��GЉ��=�#,��W�>H�z;;o�%ګ�:��Dǯ�&�=��^EU93���Kп�~��'���]�3ۼ���ͥ���k��_�~K$�G$�*(�+�K�A��8�bL�����6Ҷ��W.Ihw������z���_G�w���m0�&�; �d����4"z*%���$�P��ja�����/a���?U���?L���WI���S�v֏��Q�&�̠�H���=��~`8~~�BP��A�����1Gg"t�73���ɀ���yޞ+K��W�#,��T&|z�?(�g�Z?��aB��0�P�p�������Z�[*9�a�����ק����f�gCã>��5���2�4k���\ѽ��3ܹ^�[ւ1.?bT�aZ�i&5�q�V�q8����p,�]�80���9�/9h�˲E��lěh�=���%2�#8;Ɇb��DN/�?o#,T;@�M���Sx�=��C���#.��іh{}����S:���,PJ%�:Ŋ� �#,bKbR�m���Oh~�1���9���>=��a��C��B:M�e$'�?��0����c�K*D��:�V#8m�j�Qahf�׈CTh��YP#84Je(��%�m|�5ʯJ�FںCeBb`as#.i�T�c�r���g����ܞ����ܭ��8�p��i���h|��Y����_f�����#,�-m���x�G��H�' h�g��?��p���C��&��Š���L#,�8��.�\�:ҚI�	އ$���ۖ=��\�9	�Szu�y����v��+w�������^��MmpY|	�@57f&Gǜ?��QP{+�H�uCS>8>#,t���%4y� x�l#8��hLQPe�	D����:�6�R!	9RP�/d��G�܄�>��\<�n�3Ӥ���U��[Z�2���#8Q�p`��},�J�y{�=T�a?$�qD��~�~_��c�G�#n��4�>�hU���ޙ0�H^�-b��=�$�$�?=>�#.Ѻfg��ԅ#.-`��h3*Z1�BNR~���������.��,<8$�0�<8<ۏ��/��D>OJ�����js�'����O0(���O�_��R�Ǡyr�	�G��$q7����{=!Qҗꏼ#�#����zP>^?�)��z8��{��?_h2g#,�79��Z�f��G���c@���d�1E��6hn0��ܐ�Le�!�{~�*����N�����)�������?#M\��%O�}'�S�<L�YM`f�(�(9)Uh�<�x�p��O���/�eA��¿$�'j�y�E��	��9�#89�����3���a"3V�8�!AK�W�$���$����P�pW��z�6�ߺA�m�@*#8b�҆��o�~���4z�G4dC�;�#.a� �ߐY���	�v��8�u�D#,�פ��?9��В		�?���6�tD��^G��w�S�<����O)� �<r���Պ� PE��!8#,�	��VT�9�XES�#,0�t�F!]e�Ea�1�Xo�An�m��7o��*|Cx�8��2A�@T%#8 M=X�o���$yERp�dQ����%J��s��i���h��6#�	<#��	�����#8�12N�M��7r�h�`�紐��!�]3Q'u����2��Y�8��M���.��+�f�t~r�#�Ҿ���0�٩bz�6�c}�6w��E�*0�@�`� ��;�N0`7��p��Z�؃%T�u:�����bj>�#8��a�#8�j��@=�Df�Z]O!Bd+�(=X��O�@�,�H`5?#.�mHR{/�A�?-0������]����w�Vn����a��������� �y��;��6�.F8�iF������s���v?J�6�=�����#.���RZ�(L�&f�t�׳˸��GI�Nhİu�`��$~����՘\�"��Bq��s�ک����ǰ}�H|��ܠ�$�����\�H��,R��{vvy�g�@?Z~o���|���`�����,���񑚣?�}!��_@������)�:?��x���v|=L���k��OҥC��Qy�ka� �!�D��?�~�P�}� ��U�������X6v�C��{8}c8�C��~����k[��1�6m���S��	��#��K�:��ݒ��ZY���Xq@�#.�3#.z$G�d���S:0���>��A�����9�C@A�J��'��73m���lw���Ag�J��ҠR�-#��eW�#,r�Dp_Lu��y�	�Ջ�#.���#,zD�	a��x���M��$���?>S$�nK��N���Y�#Փ�w^�bg\dT���q/؎����="zt	��䑲���#�ph֕��g�B��'�i#.e!z��2P�PL&l�~O��٠�����6���`��"����a���XV��$?�cf����1�q���Y����|L�;'<����3pֹ.M_�G�:ݤ������9P^Q��1�S;���Ġ�k�#,В�N���6f�))������jeݗ Kwuӗ<��#(��&&y�Y;��g����5�vO�(���tO�`Ԟ�#,l�ri!�S�|O�;N�a�p'��w����ݘN������t�ɉ�?>�E"��!PR�=��'l��x$đK�������n=@�E���(���5�]�&��N9�X��s?�wi�a�����5ZF�p�1J���$���FX&O�g�Ԕ ,Yk}^c]��ݤ�iR�j��eB����w���;������ȱ��)�?�wD~��~��Ź`�럪�N�,��\��#8k�@Z��9HoL,�}'/k�:x�q>r�#,���|`��#,%#.{b@O�Q<��'#.yOEA��Y��	�@�O���)��E��y�L�O>�=ή������R��q28��s>O?���3�T����c���A��>ˏM��¢�K��#&��1��a���4i"���AAD{%A�q#,��H]����,���0�D	����,I�ϧ�?|~�ǧ��{���@s�\�|��+�*&����%�#.�Hm	�ޭ����@�r���|�hM2O" ����@#ҩ��ݪ\��QU���,T����ӱFR����W/ߚX�6?<��	�:�&ab�Af��-E.�E��7���%��t(Ša#8�a0j?#�/��p$W�'���N�#.`�L�#.�"���&���3��7i�g��pT�5�x�Q��A�1P���DB�[��&4���՜q��5�?mZ��.�Sc3@��Y#8I]�D#8��UܒZ����\`��@�E�D<2 {B����T��?��fÈ	Cٕ��W���?�>�@7�6��Tb�Q�#8���wKԬL�GI::����Ɵ����o������û���N}�N�Zν{�zd�3��s�U�B��d��f��f����CsB������|��Qh���� %���7����w���y��d�%E��9�-�U�9Σ��u�@�bE�9���B�Ҵ�l~a�5��HF�']>];ߘ��i!`֊�AD	!�����P���޿��;#8�t�4��( DӴ#8.A��Ǥ9���&���t[�l�5E|��ˈ~��[�傇���������ϱڪ	i�+��Ӝ�W۪��\�A����,�\�	�i=;5�1K��Tʺ$<�N�N��@>;���~cFn��I�.�=�ב6�8�#,eR��$#8�:��x��z�'��#.�WF�?��ɳu��M�6�m#,����<5:�oוvz\5��SH�W&k�&l.��g:��#8���s(.��������DÔ�ZGs��6�w�)�;�6��)h�#,�A�cA�҇��1�m��g�����"�_�Oa�����@���u�@Ul(?�w��B�<9��@��������'�>)?�ޣ�����#8���?�~Y����t��!'�������# I~�#8�C�p�FdQ�P��3;����yE��tx~*���E8d���_�y��r@�Z��NF����������ƙ��#,�P(�.�2�W/hk��Ha��E!����c��,�:Pe8n��j�$�8��o��v0U������o�����ʒ�p�o튏��×�ώ)��;�����۪�K;�v����� ,�M�Յ�����Y�Q��:��gwȶ���s�̸�����U	�Cĸ:'�������7����$��S������-����5��k(~w�E��M��`��uL:k*2�c.�l#.�/��L�:��z�W���i�)i���CPh��g#,b�5�{]~�ݢp��K�lu�s-�-ط���A��0G��I��nq6�:��z�:V��� ��fx�J�QJ((�����ֱBt�Ƚ�c6�&e�kRl�Ҧ���6����w��<�%��#,�ҏvϥ닋��;$	k��NbK�/����O[���0�E�vd���g	�P���~�W��q��ws�$cr���]�st��ͯ����7h􀪬���*�9UOZ�`�  �F�IT'<%d"��8���f���un�bJaTxwr��Er�~��A��;�T�l(Æ��+��#,4��[��$�D�D8�������.�e�˂:�EE�l�'-k�v=R&b�LG�����r��}�]k�j�]2�Y;�Oz��"�,f���l�!��K�'�x|?M�i?m����y���:���#8���3P�u�ZvK�o���%�\��@�q>*�LS�EyaFy%�2#8�$H�jQn�"�?��뮠�Y㯻	��1H�tߵ3n�9Fz�S��q�<��#.a�Q ��(�(jࣥ��~�胷�٨J}_�;;�Kv�;����#��Ǧ������]r1��pa5ٗ4�k��P����=�2Ex$m r�w�M��e�������o��И�F&t����}|��L"v0�$#8l�����N���M.�z��|X��f1�0�H�/TJܮMmp�Y��HI��ŝ�p�k����X�(T��}����>�F�"�0��9�f�ؙ<�+�v��n��iyAƯ�jSǿ0H��;0��������BDy�	w=�z%��f��3㷦N���݅��W��A���D��b�2�-+��}0)����^y�x�ۘU����={5e���[	e`����E$7tLs�Б�����]VH�s���GD�\#,�u�`�Z�$�t�]L0�K�4`A#�!B~�u���?˃K<(�Oa�����}PO���R��g4j?���>����\{y�!Κ�]?��As�������QP�qDD4;�z�N�##8Ls;�_l�I���2�?v}���-#,ql�0_��	�rx��}a ?vjr��\��h�Ap�bP��b���u����V7�OŐa��lgC#�n�m���	���o�@d�q�s�Pl��è0Cf�?ʹ<�j(����BF�����<b����v�s<���b�IML'���P��C�E�u����C'/=����#,KgI�p�.�dv^y�f��'�|C ��Ó��9ٷ��=�u�2�H#,��緬�s9�eB�Ϯ��,e�f�4n��V��&�y���hi=<.պ��;�����wf�v#��V��7��	�J�Y��|��Q�Ƕ~�����Ul�aeL$�D�(�y�9q�/��jH;,�����:hO2��VP�A<2��u��;+#.p�}��3ez&6Ce���3��5S�$u�_�p�&0�f0�j�`,M�b Dj��`8p|N�=�fѥw�cvq��q3X��#8�v9�ä,��Ğ����#8Bv������ʚ� d�\;#�n^��Ȗ�<�G�zӈ�ʅ#8�@	�����~�B���rk'b����W�[���0����q�G�ww����YݸA�q*�$��#�����315'���aD���+Lm�-�	"!Z�e�Y�Ta����qA��Q�%�x�h?����w!��*�/���X^V6��<�i���`f�����#֟Xb�$;��Wvݛ�<�y�5���@9� �=7gP�6#�X���B���s����Oǰ{;#.��U���n��<��؟py�lJ��(�%9��h���9�,`v�k���m�U�$qCԽx��,B�A���v�<2H#.��8C";��-ũ�AO�$�=���Z43��T~�KyB5e��������@���8>�I��0�#.���I�,��a�������ۺ۽����Cm���_/#,��L������n�6�5&T%.���K�#8�1ܮȗ`~�8�����C�������ˬ`�s��������b�f���S�;�#��Q�e�8^�jk>E���#,�s���xeY�e`����вnM<����6y��^r)�g[�b$Ov(��y7�&�尤�x�y�ܢ�xw�Oi��_n��-JSu��;���'iW#.�ʵ���!�:ل��4BF�q9-r�[sx�d��p�&�p��G�i�3:4����6:Xj=d�#8'dJ�zI�Mc��w�������f�b�˲C��#8!�C�, c�Dd�6k�R#s�`'�<��8�CpIĘ������+�����6��;�G�%�H`�<=� A�qJH�i�(�f�ﶴ�3��e#8�Q*�Q���|5��ɮn�h�#.��)I*$r�UmkW��<A��c8p�3B��E{�R&D.3��֝��f#)0��8�CH\�{�2�"<~[��0�m64��|�"p��ÑΈM��8��V�9G�1���*���&�	�oC��MM���v#��г*�!��fw$,��8����&M�^��LL�	AI��i0����,�5iA����C�yӧ�[94����׫�ۗ�(,�?OJy�y�l]|ݏd�����M�c�;���"�G��`��xF�e����R�ȑ��#8�	�:�����ys�/U��& �����B�#8�A���:゘+n�r.G=�,X�@������39�=N������y"��wT(�z�<���4�z�'&�v7�ڤ�Hu4H��؟��fI�x�06�v��ٶ�R_D�s�TU$�(�5BzgR��v��1��Vj�m꛴��"y�<C�����n�%҇C�*q<���*�Y�`z"��<'��9�u��Ðd���9'G:�n���d�9�ɾJ<�'{���G5xB,��'S-��Ѵ��r�5V�F��zy�M:�Wc�ʍ�:��>�#.fSlU�eǙ�2�ffX�1��2��%X���^���u���qo��s�̒@��(���|�jX5�O��9�+͞�E�^�`���e������F���:@���"��k�T#��{9��Q>����%�:�=\6��&������AdL!#.L��s;�sZ�30 ��pp2�'G�T�XJ<µۮd�4��4N�G`��f4cK��o;�yv%1�Ki]�N"�V2�t�՞�+R5(�������3:IlK��#ٜ��;�bXm�_����lEVș`���zz�Y4��3�h�Zۀx1��@��۵hۙ^bq������+ـ���'�o���$$��m��O=��x�h�-��@�=��hI���-�����d#8�~��ȕ���t���a�p�P��#D������-�E�Q�{�i�č��v,�y0��h�Ba3�F��[�|o��k:JB@G/���z�;Cul�鍙��˨�h��4u�c�c�.\�S��E��l��QG��ZS��(�/S�C\	�3'K�U�'��;Co$]	�I"�8N�i|��h �f1��ɊP������}^rZ�4�MT�=�8q6:�l"�@�hgW�d���T�B7g�Y��`vj]̛�˸B!����(�'���O)8I��`o/ f3���a���r򥢩�hF�ף�#.��RC{"��\#.a#.�$?�]2>ͽ�M)�w6	u���-#8M9��`c�K+�'�\�c��<,��i�ȳ��Xzϯ�E�q�b\��a��d*�t�^j�� Ͷ��"kDS�B�q)({������9��F 6�#,�����l�����.Xm�q��Im�ؖ#	2Ƀ��I�!̴ֵz��(�1�zQ��	l�m�O#x,!ь�S��5Q��8����y�#,�>��v�01�#4>�e)�X�%#.��b��<�DHl�C�x�2�+q#,�@=��p>���J���k�1�8r�!�<N��y���쁡���p,��<|�RK�e|��U�^���]Py�\F���=H�#8�>[By���=w�.t=*_�=<z�!�L�;³�."gYBJ��N�V���Z���75���%q�8K�Y=7��xj�yˍ3d$x�h$k���'B��L�	76U�M��Kp�	P@�)F��a���vL��3?��DڞBi�'S��A��5)0L�4T�m�ٵ���c�}�2La�N��Ct����l9�Bn|\��*�̌#8pU���9�;v�"G������)`p��J�X�>W�JoVri`t�:w}/a��t!��L���q��	@�(�����4ƺfz�~[[����ѩë#,�erؕ4L��H^�.���������izl�.�,���eH�o���<���x��ݽ��=_���a���NZ��n��4�գIK��&����Z�MOiv��ٛ&Q�j�ET�����'��O����	������ 9m����K%IT#.C�V�D��{w�~�n��H�D#,x;v����Q�>���#04 79Wс��46E��Eh���dW�*�Y�Ll;g�co7�_e��	��*(�\��İ�b����'�PK��#,0䀸�>ç#,8��zK��;��vx�nJ4�X���7�t��<®ƍbqO��ߡ*� ��&�#,j\���#.�""�iBd~�>$P�p$yu�[��K0�\��RC�S�<N ��lC�� R�#,�����ba��x����#,��b�w�L�l�k#8"j�d6:Ӻ��CyZ)�Mh�y9��&�2`�0�4�m��:���s�h?hw�8����=�1Xw��:*~`�UC��#.�D�����$�|N'�ZQ:�$]cO�%30ys�&���zk��7�����}W��`�Ft=[T���/��tU����9�wd���#,r��\R	#,:�iC!(!����~@p�w}�4#.(�"@���<D`S�߹��p�ޕ�;�5�'��R&�1��6�3��em�^)؝j���02"d&&"!G��)>L���k�R�cM��Ei0`�0�����n��Ixu�k��������܎�swv�5�ݣ�7��������Vu#,�	W#'�-��]�Fmeg�_<� �&�5շ�~�G�#.�O��#.����:�h�|�"*��{��2{0�/��'o�+�TRI��%�e#.%�4���à��s/ϐw�=;Zb�_�/H��a�<t�_G��{�ڭ� �}�n<�����>����w�9���cl�I��s���\G�����x�Uii�%9B���H#.%ڍ�D3B�/���8������{��}g5�NY&�^*b���?��f�����\F�;��B�b#.Iug[!�)M�<P�{#!�j@x�c�r���4EdF#8�@�"`�i�c/��p7N�#������nx|�&�,���3O��n�����xTH���7sqmH;��C���T3�#,��d��<r�Cx�%�ϝ�������\�:J|���=}��z��~�2C���nړy)x����"%��g?�?҉+�����t���^K�p[J�L!Ⱥӟ˓.�"���iP�0��4C����I��_���L&,�2�q=s�7bv��0,<D���s��x�瀋�@��A�(\A#�i��*0�/�G�{>��tm�UA�j{`�BK�!x��&(�]O���y����cbl�Ϻ��x��d��LbUqM����p�Π�r�y�^�#A�M��#�v���D.��(!HOކ����Z3X����mE�`٫I�D��VZU�M5��M�mIZ�eDA3#,$"�̂�'����������^�l<�<���"{��hQ ��/��#,Ч���BX|������a�j�8!�� `�C��~�s!F����\MTs�����.��7�t��i��H	�#H�56�kF���!�}h��������6�٢m��Dӥ|�nh���p�7'v4J/�[jyg#,. pN*��7�Z쨽���^��L �� �������M/\chboV<��1�n�a�o��x_��{��9�����e��J<9t����(&��,#,�C�H[QCie���\�1%Q�\ۛ\��3aJ�E�0j*Klm!��"�����x���Y��A����s��Z�AB�J�#,�}(�sA�6�;'��I�G�9�����t�K*Qս�M&��z�w��|b��>�X>͙J���Q8�� �C �z�:�F��{<�W������ʈ|���2�c@<p>�<��AAm��d.��'��Uڠ}ܱ@���g#,��Y�0a>5T��<cC�ú� n�t)*;F@�#,�_��M��b��������Hu����~���+��ƓR��Nw~�:�0�n��eц3P<N�c����ϩ��L��J�lY���� �.ߤ�3�dz=��do��<�<�;d,?]�T��p:��a~�jo\�Y�}A��w��T�iyg�����P�(#8�� �4���M!�~�t+���N�m`$���4'd�� ���u6�m�?Mh4O�&�C[enےi��:�O�5�~	Y"8^�*�z��#��:�`�������]x��G@��<I��� A)}O�{�:x̕��B����K��?)�$	Pip���������o�?�Az|�A#,qS�4�O4>}{H=!����m�	M�3�JK��ԘQ�$φ��c'vх(a!�J���!3��#8�P�� NC>+����g\�lM�t�m<�о�1X���6���<���4 D�0�R�OFb���=�����C��A��}���[��]�]J)h,3ä�f��G֠��!�b��>���8��'�0�e$F��'��7��@e<g,�1,�� ���ë��=@u��R�!G�&�0 �JB�Z����	�DN"�	YA=P.��%�^w�Q5C]�b��߮A�Y$#8��>٫�id�O+���;h�C� t2xD����'�%L�#,�xE!�!��3�j����W���+��]�~��(�=6I����"�##,Ŋ1G�T;xD?ZH��ز�\�#8Ƿ,����+�=1�+���8M���h��)�μ私�|��[�;�4)�����y}'�j���.dt.x�K�(\Q-s�+8�$�%,�	e�?vV^�N�M�,��1�V`�Y{�0�j~����eU��ܽgm�p�ܢ�A����G,�=�()����\eKa����A���[���g^M���W@g��_��)ݳ�����۾}�jv���R\��ݞ]6#�^���Vz��3�y�r	{B*j�\B̜��c\�����=���M�~'6zo>�p�&@u<��LhH0ڵOfN�	n�T��B�q��hx�4'����?����R��t�9N<RqF}�#8EJP��M���ѫn�0;��B�ɑ�1Z��Yf%����خ�5�`h�y��Ƿ^��F �.�fH;�HF1}����j����p\���F��"70�͖�;#.�����Z�b�.:ܶ�M!�:Co,#,~ ,l:�0'��I�z���8$#,�ד���t�/�A��lKpA�M��pZ�d�Y�K[?i`�W��X����!!�Ǘq�͹�Bcg8�h;69�r��J��&�%:�"�T�b�0�vvxϫ��"g����|��#c�Me$vA�T�_�S=�������J��0A`�z#,z�#.O���C�{�v��v�b����0U�:{�q�#��;8�h�����kg0oG�d�2,�C�+������q�Ba���%��8��m�����Xh��4/�_��� �|S�}P�u�𚚑�?g������;(D���J��t�`IQ��ýytw�s3���N���h?������5��艝�@!�H��.��#,7{?�b���Q<+w��D���6]T�� 6��nb�F�l��K�5Y��-�FD4�I"c�ѐ�2B �� �VKFB�X�a�.&;L^�����$w^#���=}<�ɰ�L��pG��?*��*��3	�2�����6��D/�Џ`}���n��������?wC���a�^���O��FxY-Q���&���ݫ�d5�g�d{I=V�g�����#,ʌ��C�����h8>��=*��G�"�W"�6�˅&J��ߙ��Yf��f�ؒ�վ!N^��e1��6����ʻB�8xQOW�26�w� '�$��ߨ.N�T��t����9���_ek=#,�ό�}�m�g#�ȇ� {п6爇G����#8�O�FmM�9�P�I�c5����&b�ё�əYi4�	�#��)&�0��GeZ�7@�y#�}��Y��즺6ĘJ��0A�#8�<�N�7�yo�7v�p���ѿ�d漸#.䐘�����XZ�;I�0|�(hm:a��z&η6��6l����.*y���l�x�ɖ���l�iK�6���ɽFf�2L&��v�u�c�<��Y2�43�u���;M����k9bh�#.����1���x�K6�(��|�P�I����n��	A����@EhϒC#.{<9�#.�BpO#,T��#8�b��M��8fy#,.�.%E���#8��ӎf솉��uaL�,�y��l󫤭�b���z�o�C<�#8�2kM|e�����7�C���f�֜鼝z�3Ѭ;�~ո�`�#�W��/�!n�) �"v��\�8^��M���(g3�r��t�?G��o�	��5E �'#.6L�|1�㾐�������u&�S2p����a�UX{���o�yf�� �0��"�᠄�.᲋�!!hl5�V�A[H�1�� p	I���!�y�pl����8%����=#8��7�%�O#8���A�H���\��WÃ>4D5�䆠LH%u��l�7�#,FqS��S�~N��N����P�&�hD��	�L`Ș`�l.,��Z�'�-�<Y��3�ܱ����H<lZk�8�ѳ� �E$HQS��"B�a�X�h�ו� ���t�=X9��#8a���*Q�jC^ȪPs1�z�iCI`r4�ҠK<�	P�f��@���G�I�6I9;��k���t����?Q4�}��W��$1�=��F�#����/�Id�fc�h���F�Y�I��W�#.�]T��}��i	 ���o�����a�#,k����ѿv)Hs싟mx}]�`�9r�lJ��c����'Z�!ф�ơ�a�U��W��?r@�!20|�O$s��=��KٷRpz���6�E��~���l=_��z���ꨤ�}��K���/0�"���h��1e1�V������O��#8@;eг#8P�1�#`ȵ�J"~��UX]5�E�K����]H:b$�7%�71�"]b獫��#,s�XxF(������ ��/D�$�>��^'p��j�"���T�k��[4(ҁ�ߧjm}	�,U�gBB6Ƌ�c�"xZc��!�%����xᢤ��g�H�$vbs������fcȢ7�\L	�4�Ǻ]���ԕ�Z�@x-���vAM���2��0�pg[�Ͼ��~$ᡓ�N2Y��#4S�0��b�3@D#.��vE	�wy�����n)=K���>TL�4B�4c�jɃ��C�$Gf�=i�=���]�M.���m���4�G�}�ƛ��\Cz�#h�R4���}�9�������Mh���������C[����P�#.'#8ވj�e!���5�ZъZ�ZM�!(i#8Q��Z�h� "Sn9�V�g ���NJ�p0�2�,8kB��[A�W���UD�-���B�f��#,�C$	M?l#.<�����8B�A.�.�Z�_���#8��3y:�M:��'ۙ��X�Xh���nH�n��\x'��	��6�͝���n-v�vG		S�n��sCk/����!��bn��>Z���d9��8�Y(t(�p%��1�#@Г"b��B5��*��M���YJ9-U�#81K`;�42_��J@�U&�&��j���aVƺ4h��3L�r��`Y�W�x�Us�C���2�@�b���A���1>�!�����m.[�R>�]��]���!��0��"����J�-#.����B^KBRp9٫�p�0���׻�I�.۹��9�S&sMH��RBH���f5l�U�A����u��Z�'6�A�vA�z�ѣP{�9�t�u�B��H���9<!����sː�"%X�Cd��6�ÂA��#,٧�F��#.(��~�}}�1ף	4���.h���B_4�2B�z���Āt����1l;�a#,˿ƵC�	��70�3����'z�'�������Ϥ�L�e��k�5�Q,�"���+�:��Be�2b�nwN�f�I�J��F���A�m�;���Ь��,�����&z3#.��ap�χ��|8�l�J��?2sZ9���ߞڥ��9�n�KS�� f�m����l�e"�}&�"��Kh�{��u9���̞+z���3�������T�0�TӤ��~�����`�\v)��>�؇Q,DT ��k�#.#"s�li��}���{�H.��XD	Tbj!ɍ2I�#T�&$��#.#8�](�6����56���絚M�J)s�ښ4�J�A�:�ptT�C����L�t��-���#d�k6�O#8�g`����;�/�'z) $�:וuf��گ4z#�#�d�E�{��M�<�ܱts/�䨌^��q2�Zv�js��U�C)N{��f\VV-�k>Nǳ�h ��D�@"�zo>�)����A?	"��_^�F�.x��E��B�B�5Hd���P�d+��#.(BF	v?_oGa{~/b0bA�=�R���7�:_�#,ҖT@�͎�{;�7eX-��\��۱�>��l�B	�2Q1�Jd�L���2J)I����e��N��ZC*&�(d��#8+K���-FLY%L��fLL�2FdQ�E�M�uIdP�)�I��#T&�E�EA2�E��Zb�Ƥ&Q)2S)�2��4�i��4�2PE<8\�<!��w�P���Կi⭐�d��s������c[���&lȏ���ɴ��!C_c���VX	iQӖ2;7Ki�,7���8�͊��e���#,�b3��w��>�bxJ(������1���,�;m�C��P��jfG�rN0�X��֋W���kH�+�6E�f�����{5��I�y��~��#.�J��\1��lM�ၙ\�cF�g����N&�)璨XƦ(��5����XM�bI4Og{:��y�������%$�aS��f}�2r�o78�^��"�$,������]R��k�P[9P�u�n�����g)���?�$�v}Dz���	���>>d����{_~���31q*�wU]�5<�IA˛�_�V�G�M%�XRV�����Y��ϵ���Y$��t�V�B$1Y���P�S�>Yڛ~>ͰS�p�}�����@�ϜQ�!�<}�ƪ��r$��xF��_E�~����bG4����� ѻ�f�C�&��i�#.�I-�۵8~�Q��EJL����B.�E�M��Qf'�3�(m��X_[.����r��PV�Z9�����(j�7�#.�ē_rƍWɭ�`�� L�|�:m��ە�˖�H���,���VP�KsA;��4k�]�mw3�XA\?	�R���=�;S�𒕮H�fj<{�E	\/U�����dDc�y���<5f�P�e�t��D�ҧN��������N5@�O|�<`x4BC�>.�#,�3�˶����#,1T#,�m�J+Q<��B*��������D�a��Z%���]������JT�5�z�җ�������������z��k�b��|h����K~�HX���<�Y�;���o<�[q�����0���K��'&}�#̊	�cHi����j�5�d!l�����݃��Yi���{�{����P�6�2w�#s^��C}��|�9&��v{�s���o�P��������,Hr��;��T΀~fJx�����7O������6f.��c=����YVid�����h���c#8�Z����f[x5ٓTPf��<�d�"��5�6���3#.�s�1crj��)Ϋ�CL�[l��͍i�Fy�jCKFq4h�QSR�Jb�kX�X��am�ΖLWVMC���L��G����g��K��$)�܌C��i���{�B�@ߵ�[i33�p�r�d�I�<>.�"XWS2��KlXh�+����=z˽�)��3�^s�MPan��adX�ځ���Or�f��+%�gQ�M��&މa�f�h��&���32w���a�O�1����5�bD?5�#.�p�5�Ü;5|�[*!�i$L]?a+�a�v.c;�Mݶ���� �����q��":��˛F�x�_�/j��# ���FȌ(!�KKK���#,�1��5�����c{h��ڤ˘!�TЛ>���n���]�(8��aA�����(��O�	����%4�HP��Wbl�X}��s{�����2��-7a{�y��i���Noz����D��"̩�M��G��}<����ۍ�����9W�xÙe�z-�Y��}^�F�{�q\4(d΀t�m�������se�Ǧ�Ʊ�������?3�$'�p�'I�Ra,>�5��Nzc�����$&�Nc=��4��gL$���s�)wH�{���3#.���Y+���ۋ'O��Ɔ��a����C�����f��H'KM�u�tcD$u��XBc�̷�MQ�f��:��v�ʹ��(`��f'YJWB&��2 ֫�$#,�pҔz�(2��`�#8.��ǽ&xH�qD�ZI�iT�z§&�T�U�o���&�w�V�l���!2�(55�66j��<s������L[��ٔ��3L,�	�	r�Ӕ���m1��4�i�&:�=M���L��t 	�2m��9�|zr�&��ɳO�(��q�ñ��`��:mNK�%5�&�G8�N�B��\]p�l/aE�jtSi�8�k��k�5š-m1�f��u٭D���N���!��\('9�=$o	Fe�3��RB#O<��SS�)���*$Ye	�my1ss4t������t4&�E ����1J	%S"�M�L�=B�v��ԙ���)>�4:�3pDk#���\�b�B�ek/�Y�2���	#.��Q����*/H�%\@��")?�/p�����њ����n�MVϿ�)���ne�pOV���RQ9B&P�X��r�O�s5m�i���������f)!Ņ��������z��33����u���le|[�t�<�ۙ#.�LqMe$���<�2�UH���Y��r�㡭1��sYk5Fa[�Y��_LQ�w鉉�C��q�cm"3�QⒷ7���̨.�x��Mdꍕ��p�N\RX[�m��Ӝ�d\r�^rV�p�m5\[Kb�R�#��3uUau�V֕fe�2�ts'�h�t��X<dc�Iâ���I�U��8��%5��B�.�,�yc��Y��,s�pNK"j��*�:H�"0��4����KI��OWۗc�tk��έW᪼[#.�:�uN�|X���vv���,�Ura��EJl���Ã7��j��F�M�8�=��7�"aN�+�a��$�� ��R�`h�����E8(�jf�E����]0�޽KM��;��ٚ���,a�\�1�f3x���<�kO��,�������f�����N��9V��g��6�j���#,A���`hH{ ^K,=MQ��p6�#8$�ץ�-[,���順��8��i6����椨^�p0qjnyb��X�oT;�p�'f�)|0Q}a��:�&R<N�v	�dvl'آ�u�2�)l< �������\8�2u#����g6e�jSL&Ņ�X�wa�V;��V�S��*�F��f���&V��@�#.���e53Al2ȈbiA-���R�r��:V�S�%Ҋf�[y��$��C"�s�i��$��1Ҷg$��m)�����&.#J&�l�f���UVFh��D��[�\ٻ �S�P�πO�JΕbx]�(N��b���D��Ll��K�3�0�6eq��=Fy�\�mC� D�0كi�ɨ/W��gv�Ls�#.�d����x�/����q�r�m�B\���گX٘��9|Ζ�sc�r��DcC#C8-Aon�cF�ӄ9K;J�`V�#:�S��1��/��_��%�cpx��C��j�t���3p&����,��!��:0�ȕ�O#���q���A���Ѫ�<\���a=lg~�4e��u�i�7N���A*�HMN�i�]�s��ީ�Л#.24I1�0b0��[����Ԇx'VD��:jl<H�&�`kU��DU�T��6�^���H[.U���Y�uR1��H�H��%(!һu@�(�U��Ƞhu#.:���ni�`�p�(�1��P�K���"#.,G:z�y��������Y����Ƣlo#���a�u���R"C���Ո��%�r�9��J�2��s99�1^�h�G!�TuNg')P0�#.����N��#.�:{ev+#.!�����h�2\f��$#.�D'[�:3�б8�	����̞4���H6G����P�,�v�L3lp�$�l6Y�oc�i��0�Ȇ4���%�_�z��3ȓh�#�]�ƃ(�e�t�f�C�`v#дt%��S�b�B�&%12�*�������G�ʔ�E:%�=���:�z?�i��Ҙ(29��O�ǂ���#.�]�C�zU�8UIH4����	��Y������#,���'�<G��JS�c}�97�$L��5:���L&���$-!b�G`@R�y�B9'Жжq� t��9|����UI��>�#.>��Z�7�>��Zl9�'����Ӥ�Y�Ũ3��h�(�kF�w��e]ȱvp��߅Êa����!^��$ �;R�ꆰ���0۲�:<~A���+N�h���`Σ��s��f}��;�.�sDMA);!Ï�9w���;#.sOm�d'��ųݱ��R=hv���=p��̓!&�L�#��@�CG@��/g����P;�]�#,@���A�ϧֆ���v^�H��1!Z"�NE�lt]ʄ�\xG����C��S����8ʾ��Q#,:~��!��d~�#3#,�i3��0��� �(����1B<� ��A�� �����"����/�'��zT�A�P���#.�@;Ԏ=�r�!;��1�w�0����J|���,!��?j3�z��������S�p]L�?�qEv�x?���_���1�Ϸ�g�X�5�.ޞ��8<y�pu��I"�$�Dd#,�dD�ڛ6�x�	e���L{�ѯ�m-�ز$M1(�oP*��(�,�H٢X�"��f؍���^�Fǌ�����=��2q��!�g�׷�aLxB1͛kt������_x�i�I)��ض,Z+h�cQ���f��RAH�4�<�G�R}����p�s�h>�3ΧwW��x'#,ས��=0��s="B���%���m����"`��J��$i2r�D��u�'M�pwOk����[���H�d��Z��d��`A�҃���%#Pi~�#8Ѕ��sE����}9`�B�D�;�<�W��� �4B�Ʌ��#Υu�(�`1������!�`���(d&9v#i,m��`�x&4�e*�b	�P5�j^3����	�m�c�w*X�9��#~��-\�{��&�j���󺫆�`_����0ޤ�4�y'n�g�h��<wUbZ��5��{��lLUi���t����Hd��#oZ�.G��u��f6(���l��]�Tt�(�ݜ6�j��L�.!^��#d�&Y�����	�c��{�z{?��=H�=��O��c#.��Z"5	�1`Ѳb�+��h�Ýl&�É�Mi2D����Rq�hA��C����!�����a��m[陏�ї|m�6�J]�w�l63���ʭ�`o�\�*��'*�##	�q��]rg�R�rE0�:��/��6ٿ(���Ħ���.��""��Cz#.H%k��a���!����Ű��m�I�d�f�P���f��,�u9��7��W�08ю�f�67�F�B]���N�'.���N��e[�V�>PZ#8�ߤ�`����L��v�I��>���#.`A�r�H8ʡ5VM=\)�kb9kf�mw�tb�R�`ZF�P����fԻva�o��7Dq�J	�.�q�=�����H�|��oLhH.��46��gC.�d1Ä��K���!SK����Q#.2&H���Ș�$7��@��t j�*��(;=��<�:^}Ύ<�0��@�W��H	 k˯p�q�l�Z��_�̙�+�ӊE'����j�J>��(��?��I�b�� �-&�)��2k�2���6���� �� ����7۽14����+�c�f�����	�?�#844�J1#8�(�B{� a)"���/?#.���{٘p�f�a�\��XSx�z����֊_^+�����+W��8������@-�Õi%r(kɼbz'#.gx���y4�T���K��������vғvn�t0V����j1DI[�#w0c�b�%�#.LE"��s"������'$��ɕ���j#8t���zPⷻ�����ܑ2�M9?�F��#.��7"��p0�Ɉ�eC�D��h�:ڝo���6�3��i����t�6Bb~�8��#.Jw�OXIB����U��8D�F�f�.���I����8t�9��Yu�N�޵T4��<lc��k��s9��.�MR���Y���ΕT�d�%j+t�����f1nQ��ɾ^�t<&��mC�`�{��Y�RP@Å2`X�NgT��J�󍬣�hWX�fDx�p]ka�����j��Q�Z�# �L��Rd�	�{m�rTu�����T�q@�$����#.<�`�A�G�S�CD<$t���f�;�O��8�hX4f�h�)�!_��ɮ��n��i�f�͋�1�q�+V2�S$n�YG���cD��9!�m�h]����	�&D�X��3L�hŢj�A��KA�F!���!��g#��N��a��N���񱔭2�$,�f��6�dT�u-t��$HfYP.��Q!F�0X��[kBTUH �'`_��k��BlB�n;��0� y�1A���.#.�I�����%�M�#,�xD0�\/�G���Q�h>\w�DLl�~���O.�$�r���a�����08N'8��(/�'�لӢ�`��;4zu㥍����]#!��I�*jX��*��I�4�S�����������U�q�N����"�ዾ�&Jي8BFb���i���V�S�#8�v#,Fl�c��┲�s]	a��fs�4_]����dA/?$�	��eH�̀��*�K�w����1w��Wq������1�KP�#,�#,\��f"�dKk�����M�OͿ�K3����V��K�7G��+�?^##8��]꠬4�A�`��-�P�c�"����@�	Q��g�>�z#��p��Yl�ӗ�/'8�.Ф訯�h�3Rs<�V��kZ�	����.cB���~���$��@$T�I@�#,�}����~g��f}g[!>����Q���Z�ګ��*�i����XġA�?��Q��/R�ۭu�aTbfI�m�E�%�!�p��t�)�$��0*ɲ��H�i�eJd�i�l��gޮ��]%�7�f6�Ƙ�h��Km�'8��*$�J�mBo�iv�W��Ɗ���L���6�6Ԗ��F*U~#8�u��ȘƯw6I�(�I���JmKZ��iX�eRMMm��M�Y��Bf�F�R'{�i��xۢ�e����䔫L�溳T��#.�5x�c�Y�m�#m��bJ��V�T�z~e\����T+$�3��k`�V�Ր��_��^�#.��]ͪ�a�zn)�$�(t��Q9Lp>�WE�i1�����.�)c%�4�%�f�ƴc1!@#�V"�U!R�'��3R�i���ѵJL#,�;(�q�N�!ŀ$QE�� Y$N2 a�<�*HӉ�Jd�9�h%p�Z%�iU3�CJJ�C�E9`hG���T�*s%#,(bU!g1D�ʘ��J� �	TIY&Q�D���R�*���0&Z�ʢZJ�R�4��J����5&ll4�e��h�l��&I,��k�Mh**R�M��j��RZ��FԢ�Vm4,�	)1l�I��$�%K5f؍Q�dHڊX��&IZږk&M	D��0(D '��ZVZ�Y"��4�������s㊮�P��2��#,�SfDhU(	�P��$��T�O$�u�/�viӵ�S�I�ؘy!�-SQ�+���ߺh#,D�@@��t��o�as7}q�g���TM��1��V��{}A��ѱ;I���Y%�{��6�/Z��9 ��݌CܝŞ�nz� �(�F+�xwc]:���k(&cͼ�ٶhd�N�(ݤ���R��b]�Ѓ]������5I���1���:R��l2a%�F��Cy#.	��3��$�i�#.rq��b���_��N��=�_���#8o��`'�BOy�|��x�ohb�y�g�z��DO^��t�	�I؁�}�`���}ϻ"Ċb�"C��J�q����vlG�K�R�Z)X���e�,	��B����4u}�CG��V%�s�d�G�Cu�����47���Ȅ���;5JPT_ҡ�r0~5N�KO�*�C(O�lk8mbh`���Vs�wd�j*�S�#8��ps��>�ǻb���&e��*��c�AZvt`��d:;��!#.�а����l���UU,ZH yw#,�l[b�F#.��5w]W!�YV�֪n��6��)�`)+A�NÅ�]�}7����)%ݾ���>.D�ҷ<L(�ƨ�q�!#,�p\��4�{k�w}c��MMSY�>�$���@��l�DD#,R#,�pM�5�P`��P�9u#+��ʈ  ��A0��@M@��n��O$d�b��l#8�i��r��J�t��o]�O�y�L�E�B�vP?���n�[4ܬ�(��YIy���cZb�@���m�Z#.x�jI��Z�ؤ)d��X;N�%8a�h6�ơ��c����A1^XEX�ÍA���Z(�lL2!�10#Cu��Z<���½��q�I����d!�����醇j��L��F;�p��9�#,r7~�=kXy�7h�#,��$��p�v�!«�ig�z@&�͞�yU�%	��*U0͕h��OVO�r`0�H���T%z�l�)�O����^��3pg�#8*#.�`*N�v�oV�@�Nl{�zC�+�]�6ir���>����}*�_G7<�G���d /#<�#���T{��#� <�E��L���c�<��YS�AV��D���$�KU#.-y���o#8�o���u�f���C���5��˰;1CBc��&��%�!�%eK��}o��t�c0��+�Xm	�DB#O��ʄ|3�)X�Ǻ��쮟�;��4�W93l#8Wx��$s��fCRSN�wo	/��C'U�XM7�N��R*��ZO"?ب�k����'���#.��.�����0��͵��J&�613M1"IdL!II����J�P�L�1X�#81�(��3�ѡ�u�֟=���M�����n�`�py������r-���1EA���,�'g}G@Ņ�4��&2qt5d&�.s��j#.�&3�9�)Ε��#8N�~� ��D�=\�Mo�ĨI�j&����JTָ�6q;����� @J�"8�#.k����8J&�&�M1�@eF��B!���sՓo�H�}���s� )���y/�;�#8�h<3)V@�ö���#,�`ԑ�e����+��g���ZNC}8L���R�v5N�e�cȒMtB;Dt������P;qE��qY�����jn ֜��dƬdB���1��hkm��ؑ0���,�01���Zx>l���b�ӆUt#�5š���G����k��q��=�<'�'#.1=Td:6;N�B�<h�rf]��J�!K�u�U�]�C蝩m���F��o�p#.E��$&}��_��;���W��K�u��=��<�T�	�挆�i�i��x#h#���edel%�&d���$�HƛVBI��6���7��پ���`�UQTUT5b�gѲ��l[R3��l\��������O����$�e�6�´G���#�Ǚ��K�yփ���>�z���'WWwn����ՙ��b)U*�Ӷ�w��#[�mp���,g����O����c���ν��F��Z�p�<��J��Ѝ��#,�&ư�tG��R�����++#,%�5ݮw���+��|��#��Q���B�����,����֤&aח�ᯁ#8���C����|C̙�|�:���q��Dvy����ߌϷ�(f��"iF���2��˘_�����@U&j�U,�/�cr��4z�v�,���N�b5�fK�&Ѷd�ݘ�E��Z�ܼ�w�ԛ}#.�Am��Cd0"%�����:D�1#,LccjMJ�x�wn)	��#K�0��"��F�b�� #.&�0n�������z�~f�u���^�O��~���y!�#,{���@�q���)׵�#8���1�#.x`L7("�O��_v�d�l�m��t��3��[��<��d��񘂅Kٙ�<�B�(S�T34m(5j�\����M5+�������E�hB�� �SKE(R� ��#.�hؑMNH0���Ӛ��RVh�,)�h��Ti�43Q3��rPmi��n�i��7��5@���!	ջM\�a	�d�~��l7��IC3��e�� ��7�u CYp�X�2�6���"#8a�����&{#+����@ϟH7#8	a�9�'Wd=�E&�� �Ю)����}�a�ً��5)�d u�t�eQ;UO�5����M"'�5CM �N�n�B���Cb��������nm5��r�i(ƊH��#8#8�Ua���]�rhLjy6�ab�Ѭ�<�#8c��v�o�Thε(E�$��4 �������c����H���"�'�K��AP'�ą�˹���q��'./����#,7An��T�!���7����}�8�#,8ѓp��Y�4�Q��S���ڛ��� ��b�D�"�$�*?����}�x"��n�C������㻧&�g��C5��gH#8	J%�t�/�7e��߃�#M#.��;�xe<�^#8.#.C�~���A@TT�߈�$�<��9��v�T7�Ш]��kǫe�u�~!׷�x4�ފY��&��Q��o�֯��w�/�OJ�@��{�=Ă�P�"zTi���P�X�$L�A�4�b:4�	�#�-H�мV��.�OMq�\q5�1f�֖�fE]�u-��lZZ�e!~x��Pf�������2����Rv� 02���!��>	��`�{NB�h73���;ꠥJ�	%�^F�5>E�U#.�ȫk+��N�u�|�K�R���g����Œp,�qDչ�#8#,��b9ÑȠ-7ځ�7Y��P�Pf�m}�;�Y�J�i�C���g�� �#$�Ab1`N���6��;^#,���1TXUJm����fX~Ha&��=��#.f�Ab��US?�v�(�`R�̐�2�!�s��)Pm:�� `A(�G�����ʺ�X��D )�hNX�"��@^x�p��u��6�l���t�t�`7l8`F%�AFL�+:I��k"X����#s��#x��,s6b�+j�yQ�!�6�dc�d��̜3�m�z'$-`�(P������A��}#,j9iG�147�)�]"F1m�P�PRo:�!#.IK�D��%+�m��D!0!	�-&���[kc++hn��Z@�!0�,o@m�V�Ō8aZ,M��(`N�Y%�G]C[��66�E�ݝۚ�\�J���\�/��bLW��K�.�M����D������5��Q5L2Ӭ�&@Q�ѝH�f�#.2�F�V�ՙ��Ö(\i\��_&Q@ې�#.X�t�0� 8Z�Ԭ��]چ�ガm�@hcB(�ky�|:4Ԝ��C�� �&����`�@��u�^��69'B�;^�v��1bo�qBf��V�0�8`�$���ɯ��g�?Ųl���C�?�ˆ�������]�������j������?�;c��6b�<QG�u�#.�,�#@�R�ݤ�i��Q�*)0^-�mQ�űE�U`@�- 8+�HɺaP�Ҡ������JP�i;z�C�C��4;�s%HѼ�.#�}�q��G��9��*�#,���<h���ä$�T`�bC��E�h�vA#.�3��i!WF�e�D��:%B%���0�(	��x�	*$DOE���}��JG�>���H I�O!�#8�xC��d�-#,nf�8���/�yK%l��R�,�r�R=���b�#8%�lz�Ŋ껪6�5{]ޒ#l`(2@���Ә�,�I3mEZ�ii/o~�m�i�h�#,�UH�B���U�X���SD?�kkL��ʱ�P�T9)�g�8!�I�J8��\@%#.��7��-�(���tJ��x�M�|#,=���N���q����0#q��O���n=#.���]	�/�PHq`�>�S�{8�C۹'~�~���FIFD-I�ΞGæT��moF&*�[��݌	�h�\�~:��p���ik�#8�x\I�����29}��@�8m����v;�lp8�f����zP���#����0���qs(") �)MV6���{��-Y��OR�����YH�2J�_Չ��9������$�%W�sY|9_�� !	WA�����8�\&�4���ߓ)�Ves��w��g�U���gx�n�q�cb&����Ř�CF���`�4N.G|��G1X���[�#,8;e��5JC<7�`�t�ou�H�%gd1�5���i��bw�� ёA8=ɤ���10��� �lh�@i��>��%���ڟ�z�V!UV��x$$'�����Oy�.���d_��u����#^�F�;�f��lə �Q�<$i�I�+,E5!�����4p�l�� s�W��3��������6;�H��M���`ƺ[#��J�t�K�9���յ��1�d��n������}��9I�n&�LPA&�e�8��FQ9��`�Է��繕�`j�[�1cF�}TvL�m� #,��\�Ոge�O{&��h��8�̆$�v��L+;o����kK�&�|<~0���H|���]�Md����A''�#.t��B�����b5e#jJ2Y�����RlV�F!M}�]I�2�ZY��Պ���#eEJV�T�SŶ[YZJmf̵��M[(�����6��4�6�����A���������@�~1'�?I�ٰuZߚD<�]�#,�C��S�rA�D��@B�@L��MT�����6�?JB]�C�O#����	ڠV09�E��E��a���D�%zu���,JC���z�&�C��P͖C�0�!H _�>ApC'ٌ��Aԓ,D��þ�>h]�<�fΥ6�0����qO��?���H�)C	L��#,�r3��t��aM��~rz 0���AL� >�v!mb쒌�>��1s\$���Y�N���mv��`��%�!ugW ���G�w�T����!�7$�=��6�*a�_#&��&K��:���)��3�bd%�#bC>��y�����P�OZ8��>������(�#8�xb�wj2j���r��d$���Α'1#,I�8�I�Ӎސ���Z�����ɘs5��((i.j���V�Y�ǻ	�f1�7Z$���e���i�:�B�0�`��;?���.{�|�~��`�&�V��M��t�U���}�}}#8h^0�mF�i�A�	����5���#8����<mk����H(������7o�����ڒH	�#,�6�2mo�,�L��M�rd����L"�c4&�&�'J�`ȲaO����S�;����]HW�(�+ʓ��^�E�O�;ކ/��Na�I�DhP����ő,�q#,���i�HQ!m�j4@bi�l 6"�0�-���T�	���~ߏ��a��lֽ��bc{�dhzp�r�20�HF���v�A���"A�9��l����(�0Mj��qo'S�s�a�-�6�t�����t�)T8F4����d#���l���#8oխ����o��ynb���N�[�B; Sƣ^y�۵ӧIzRX&)N:�L#���46�2�`%�Dpa5#84MK#,L�f�uN AX�%�PX��q�sD��`��w<O>��$��)��Б�Xؐ&##DH�IІ0 P���4�fD��{O Ohh9��|8z�|6�Ty�@��A2����$��P�@]�X�L�6Ύ��z��}�3ǹ�5�Ú6�`ޘp�'`���aU�!��#,�HCX�<��6	���F�&��`��_p���h�H^#.I��ɲU�sL�jF`}q��<2�P�#8Aa�Z̟L�+�6t�#8R�)��y��މK�:M��fg9	Um��v�"(a~w*�f.�P�7�M�|���"���$D0��B�P�:eݬ#8��:R��#|�-0"`���[?�{"8���%R��rf5��"^�(��I����ܖ���\�ܻ�+�(��*|�"�J�a�FbD���,�EKb�ŭ'�yw��'� �#�s�|M/�3��BÆ�G��D�ῷ���p��c¶��BI��.���#,1jq�3{Pd-��*�E��qc�$F���9$��fE!� ӿ�Q�~O�F%����lt�����d	�C�wh*TtuiM�3f��h�3;#au��&#VE�x�`��KX`�.Ϛ�%��,J~���F���8���ju��#.a��.�Ҳj�#.����m�r�8�pC�Y{L��I0Ke�w�vsX��6��?�������K8J�F� �Vd!�GI�ò�"��L8`I��K �i��ЪA'��pt+������ϳ�����y�*(���ov/����~��V�#,��g�=ga�|I}"H<#.�Ϡ�;R�%@�{�x��ڊG)O^�r�t9Yn�BZ#,�/sA��.����gOO�,����A�OP��Cn Bg���_C��r�N�`�2��"�8a^�`l���&�W�tμ�3V)�D@,J�D��8AH�(h��L��L4w��c��\��ם	d�Ҁ�� γ233	A"��^��'��5)ż�����X�ōcH�M�H1>���-~ΰ���n9�V7t\-2���B���2�ftƤ(P�ti�2j��"�-���(#.ie�ۻ�X���ly4�{H��2�^�\�4�����J[�Z{��#.P��̋�i�%��$�AF6m���H��$��/#,�5�_ѵh����hW�4�1`�E��P�#. �ꌠo�M#8�SB��:v0߭~P��z��S�w)�O��U��KE��E!3�ݺ�����:�շ�����#8�Mn.r����O�a'$|k"��j#,J�^?���X�6�L�z��� ��<��#. {�_D��"#Y+be�b�V��))�� �ݫN��ԁ�d�T��a{_`��ǌ����jǣ�����#,#,ϗ��*]�;�S��w��i�>��ު��h}������'�C�H/\a2�XT�q6���y�aR�8�~�f*�6�Vr��к��a�����a��kgcZ{m��qɷ���G#"���Ph�^/���'�x��_nڃi�k]�i� v��$n{8�P�"�;O���g��3׍M�B#	&M�s>�tc�3�Y�K#	����$ΡӒ	k��#6t#8e��6ߵ�-��h�#8�~E/��������A!~�v7�ۯ�#s�z��v:E���@c<�=)|0�L�qkD��mϮV�o�i(�Ӻtt�z�dHKH���}����t!_��I$/{:xS`O��~�_^/���Ӑd�X��p�,�ѹ.Òѧf{v��7�#8Y=Y	��=��@:�s��y䃉�e��SZ���?/*�>����ߥ���ē���4����6���H��x nv��O�C�è@�fjSɃ#8#,�C���Blo1#.���<kq���L��U����Q �G��t"e�'�N d VkZ�hJ3�rJ"S][��QT��R��q��/x�#���m������T��H/��\��F�w�/ф�)"�(�Ŷ��k�bbRDm+Q�"�ĐH0n�� 'b��L��#.#88H�� �B����A�;�{`�J�F�iќ�NZ��Q����D�7�z��x#.}�粆�l��8���)���$NK�h�2��%0��@:@	Ā:�A�#,+��>xf.8#�\��Lv!��=�퀰G-q���x�����::7��'#.����A��$�T�4��t�����Z��� ��r'����N��>��x��ϱP�]�@�����z���#.�[&�Ly�_�w�x8�a�GE�J5fr�&�U�2�C�1�1��$� �K@��h�VI0���Q�9�ѩ��H*=,0R�� 4*�16#.��xx�C>�?�R�׬�1�f���L��VH$p�ʢ���c�|Rl<3��i>l� ���)�uL���f!`���wK�rp&��w�%���(5A[T����l3��Wcƃa�+��43���@��4j͇���v#.Y�ĊY)A�i�㾃���$|#,̈́3�u��,�#>�� ��v���^#.�OW��H������vu�#,��}��� �N�,�b3�����xUg�J)��v`n�|�ƽG�tB������?ߛ��+0�����n�~z��^LC:���bHG�k�#.ɮ����nmsƚ�P8rI���~��������X���(R��Tk��QlIݍp�������])D9M�ް��9(�"6��0�d!����a�`����5��t=j\���h6#,� ��-���@8�0ޢ�r��Ö�$0�?�KP� UR.���(ABN�~/�M�l�]����:���p��勳���{����9��GR��#.u*�#8+����?#.W�M�IO1R}�����1o��T䈘�L6a���K�μaB!{�HSz��#,|d.yP5,C���&#.���������##,��;��Km�Θ�&4��X�#��v2�on�ɌkJ�G���J�#.;������~gc��^�(�i��N��K�#,�	����Ip�`���JK-�А���7%�D#���[5h�ޥt,d4q�v4�tؖ��C@�I�6��UخOfap��ma�+�`Z4}P�t2H�;i��!>$�߷���aФ�k�괞��"��;���t�~?�9���(�$11#,x3׆DG����8��8���Tߟ��a�)�i�F)�g�1r5)B#.�4�F�mlh�&5Im1#. �d#8�\��L�������#�ߚ�״��bZp	Kx�V(�#8*Do���/�&=Y�X�#,�.z���,��zW�ܐ1Gἓ���<�X~�9s�{}n}Tǽ��ם�v�#8�ڌ&�$$����LwX2H�0q/�1���~�B}G��;���� ��1������!$��DB�@�3���c��<<sO#,tj��o�Z80�����T�%�����/��Y0�d��:�b��k�HR5J���TP;���m�F��[މ�#ݥ��,�ZW����?�j5���D�`~{���S7�;ƛM���(T&n9�5����8G��{}u��G��f��Y!�!g#8#8I�P: ��SV\R�4�0S��гѰC��2��%� �?��J;�� p��Ϟ�_d��M,�M�"uF68�|3xbE�D6Z��*�!Pvg���������u?��9�#.�ve00,�̳�ay�H"@5d"�{�^����ش�rQ�=�+��P��Xr~f��qj��*"a,�$&='��4u���(uUE�׵��wd����zz�b�ҿ�vK4Q��H0B�%��1�b����к�,��T��X	��1��=P8�K�w�9w���8`�/�#��mZL��K}��f1T*��]hف�������3#8ha�nMq�h5(�� �#.I�ǥ܄$CI���)� �N�-a���E.-���n봤V��b�h�bd�ƀ��.~��7�YE�����ELd�Z"1�	FC���8��1�7e-yD�hʞ4,Q�8I11�1�4f	��	HJ#�)��.�5}	��[q[H��H��KF�e-�:�o��ȳd�R�s�����̩ ���킰���F-��F6�LQ4Ylp���(^���F�fH*'}f�Y����kSu��L��MA���ZhS1��RHi�fĖh��L�l���yv�&�ܹW$n��4���ɧY��-`eT�N����87	��$�#8�mF��#.�q*(�2U�]1��S�&�b+"4V	��V�#.#DPh�<OOVaR�C�^[����n��LL6�UZ�,�F4��-�O��A��Ǝ2m6��7#��TͰ]�Yf���c�SH�IQj	#.k��Ki�x� ��̔��X�6`%�Ŷ�-�d��bR#�%��e����7͔��8Jnd�@̓L#i��8�[�Vex���(�LCF܀[K"L��I+,�n`���fэ�8SJŬ1��f;h1�oח8�����݆R7ce�3 �NqC�67v:��V�����#8�`���kckR"����`i�l(A������`�=�mEA�8>���d�:�ի���L��i,k<|�1d�h�q>V%�#.U76��p�u�h8`���p��f7��bU6xbR�`J�Q�/��w��ݤA~��s����)��L8K�f�F�L}W�{���Y��؎�I,��y�a}�\�5}�:x��Һ����cPx�|�XWL�gF*�0���&�T�H`L0�@֒��Y�&�#�8��LJnoY!�&s�Y�l��J��U�*P�SF,�ʖa�Sq�����Mm�a��Rq�#.i?�l6kzt;��C�1���+p���V�o�M���J>�y�#.!M!9DT#.	��D0p�%��R��0�eш��`�`��0���:B��$a�D��	�&V����|;a&�O�<~|PND	��C���s,8����E��iqu#,�TG���/7�̟Eą�X=�)�4L���v�z�������d�Jߔ�.x�s�QlMH����z�s�4<5�����mᩙr�\zoWI�\8���!�������V�x����Wd�2���M�z�zJ���������7f"Hr��ͼ�6o����ۄ�F6q��8hPh�,C�#���ふCd�q��m$G/K�0�"HWUܷ,·�s�o������`�r#.��.�#.k��$��/���9:"Hd���.8=��>��ug^H9�!^h54���6������p}(j��&X&:�D!��z��w�R;c�Po{���~�����pX��#8KKpیSh��8��}��@|�?�����}�{���	�4Д-L�>�[rc	и&�:M#,�H#8Pn��`��^F�#8��(�rI����:-R:���@0��t�I�w��X��N���ʫ�wndNv�[E<2ɱY���-s�����NR��])�.ө�h(Eԉ@	�X0 ���o�M�c�l#�5%�b��ϱ��GP�*1�#,��&##,aSZ@/}BLl������c��&p�*CQQd)��u6&J!`�#.�#.&�O}�φ�qj 0�A���Z�2-H��j��(�13M*-�����lh��-���A�F4�Rl�2�`�U,Q�V@�F��^u�#8{��\���:���>�.*����o���S��[^z�IZ�� "��M/�y�v������{��]������ߺ�9�E��<S��9�]�6uAC��ϙU!��!$�DRuY=Nؕ�W��=�[l��z��l�Y�F�wvu�\�r�r��*6��bdd���8�(����#!AM#,��8~:�G�:�\�cMH�G�E�B��4�&��C%PL�#HD<׫uUP�$r&���=�u����Bb��fy�㘯[�`'d�M�yݦ���+���1��r����J�<}lOvK8.O�����ED.`*�D�TE���7 C�<`l�y�G�g#.k6����������Ws$�P��cH�J�d�4�I4�2G8Q/kJ!�S�̨�q�u?����������J��&5K�5��Ԝ/sے�`*��cȃ[!�'�J�ce�w�ƌ!LY/6s���#�g|�ԡ��!E]���c��ќ;-���D�V2�jCD���M��@ҝ���x*E�IU�߅L�K��#8����6���}N�u�p;v��q�����X��R���L�)�+j�b��I���Xa�C�l�$�E;`~�Q�%�#8@��]�$MI�l����Qع@.���)X��#8�4k��u���Ʉ�������`��#.�@i4 .y՟��^#��Y�L�Fl� Ɇ%�P�+LʸH��D�����#r0����cJnS���n|n�~��6%�*�"=TJ*�D�K*��$��)��x���"�d�i�2���-�4I�e!FN#8s���Z8ʍڊ�&.�6�յ�Z�A�$��aV��آ��L#.�q4��c�j��i3��*���4HaҢrb�}��[kh��f	($��I�!ê��>��t�(��#,x��{=і��p�z"ڧ�Y��r7k�s��R2qeĜ�q9>� o�1�s�n�\���מ���< `	$�p��P*zMQ5UD�'�#.�GpI����g.?��9x��⿟:�C�m��?�=��?���Q?́�ra������k��9a_o��%]�sٺ�p灙F�C)#8"�>�Tw�^c5#��6��:���;7�S6r^5[}��tt���*@��"h�!4KƤ���;����'�D�p��w㍴-�-�B���d8�"#.���Vi�� �C9��@�M�m�mK2��U��cBb�F���Pmg%��&�:a�lm	�T���^v�3�@�[F�ڡ�������&�$2����i6+�S���|��W��û�ϡ����Ѫ��U:sQ�)�k6#.���8C��y������AE �Á��!��0����n�"#J0Kg�O���l}{�`��mE��V�cc5�#.:�?�~3KJA����4�;��c.Z�iG]�/!�)F^n+6l����M�6��Wi�M(�l`�%͹\ۛ����]���G:+��H�o�y*�ie��e��w,�4�c�@%B��`���9Z�5R�-��6e�d�X�ѺsWvgKrE-���\�-F�V��)+�R8B�~�:U^��4*�>0�z`zQ!�(~��`��@y�B���2����e#,��D&��2&�� ����=�*v������ӏm�)���A���;#,>�J@�����g������q���O��S���T�F*���O��'Q�|��#,h#.#3Wӆ@!L�D�C�H(�!&dS'�L�TY�NW��ߥ��e%F�Rj�ڴ)j�Q���$�L��`P}		˗h�#.�v�F��]�K))#8jsؔ�"s�:�&V�H�ڸkZ��sR�#�}&#8'"7�u�l�4E��&I�#.����J���!:�G-)�{P�&��PEAC��¡�(0�qIm���A8�8�A#/#.���s�x��1O�3�{���6HpۻF#,���"�,L�4&O����w>��n8A�Փ�#,P�K%HH$�!*�I	��[�N*��"��V@�eb�ba#8UZ$P�<}ϵ�d��C�A'������l��1V���������c`߁�Y#8�C����Xޜ{�qz�>��xl�CbNg�P��Xq%*�9ϗ�ߎ#,q�c����t�s�uO�_��	�	`�������3�1$�q ���N��`�A(� �U`�7i���)_;Eш�� ؉"��N��Î�p�B��<���3��#8�`����v��#,ZJ���?�CO�h��� ���1��Z(�QF�`�)��i�N�Ph1��30�wʧ8%�" ?�R�n0����F�i&ŭ�*6��%D%u#,V�k�1WvȆ46��S���x�������M�R[#����tH�F�#,Z�7��lV�[���sV�������xT;����u���*i�#,x��d	x�G�� ���W��+@Ѧ�Xi�F���`,�)�X �^�B��H�*#���BR����!��Cv��r��5x#,J�N�!�H��BO�~%0PgZsQ�Mh���O%��2,P�#)P�&�ݨ��`@Hj%"�����ߏK�H?�M�}z򙊃�d����Æ@.(�������>#8��x��I�A2A��X�.@�a�9��Jy�OK$ȮArv<���d�N)�O'}�)��e�b��^=P����4muB��U�ZD[D M�t�g��A�l���i�5G�-fI�$e��!&SMj"m���d��	$i�u��j<jf6ݒR���b��!�ih�C9����w˼�>CQ#8�����#8�i��{NGl����#.�	�@��?0�P���)������I���w�s�&���b@�a�T@JvY?��ttฤ��%��C��y�#,S�F�ߕh�K�æ#.2�����`B��>���s[���KI�&o�#,�"���?o�rr�Ͻ����\H~�BAD��$T5H�4���#�E���H��&��I	#.������>�����8���W��:.�(+���Tl���8~��a�iEYYv�]2ǘ`�ɍ�43����8G#,�Hh�Twء�[�r���昵u+���z#.�y7���{6�9�8�}s�Lo�#��/�z�i���f��3`���b�h҃�ĸԽ#,�DpĖ���#,��(�ajY�j����$�Ӝ���o�!��B����>a���jĢQ>���,��6bwqB��pn��0�Y�G'.��y�Y��q�-9nalU:��a~�ʪ�٘D��y~*������q'�؈i#.�:�v��m�ÒlVk'ͫ��59���	($"H9�M��c�鐲9d4�i�d�<�$I7�b����k���=i4b��c��E��Aٟd�y5���#.;�~�\(tBd�ѼU��e�&f�R����vi�Δ�K��޴�l����:���s`k���R8���݃)�铇,�O��ϯ9@Ѽ#.3]6�x��ԁ�m�X�ݥ�]�>��ɮ[i�������-M�Cv�NC<؎���yk#.�gFa��Ş�	��C�c���&e�F���F�t6�����r�'H�H��<J�#�T�Bҽ�lKȎ������=��>���ѩ��r}��q����^i%�I���5��$�����r�P��܌��2!�._gѯ�	����TF/���'��#.`r@�ڡ@��hW�I"0/��K�A�z�P��L�����lX�,�0��%��=�/X�4�#N�b�R!�zN�1O/nE�Տa�!��t��P�Z�vi�vr�cr���<Y6Y�u��>L���F���I5���1j�šF/�֛�e�bҎı�L#P�f�͆-)gV\���j�W��!=s�r�cn�-f)�	����&�u��������<�^҂�>/>���f3�6&��d��re�f��n��|��Ƞ�e�#8�n�{9�48�+:0WJF��iF]B,0bPJ#8��`c"oF�ӳ��5R�=qU��@��#��S�M�ioϰ?~3��]#89�#�|C��H����%y��9N#8�Lɹ��q{�`��D�ߣZFN�h�P���!*	���?���I$��v�����#8� %3�A@6玱R���J�{��@?5�_����C��w���ӗ����#.�d���	i���H? �A�����#8ó�$TJV��i$���6A�A��;�2�>z��>�8#.���%�T���p}��#����������l�=�4<1�}$		��<;I3�	���z'�C�8�[�g�#,<��� ���9����9٫j��e�:��4�1����#8);P���+A���'�**����ϯ�3�E��u�"ӊ�k@r��A>��l��g��y��n��~D�W܄�g����I�p��=5"��#�=��C:��m���t�a&��@uo֙���FV�$��#,cM+	�.1k_.��}����L-Q�a�1�o�m��-C�E�V���_�~�PlH@�#hy:��=��;_^	���Bz�G������WI�[o�߅4k3>�Vg\6���ѩ�Cq����(/�W9���p��M��ʸ�C�=�:�xd���;a�2 ����1����o�_��:�P��l;�RV��Ф�wC��|2!�D��}X����	8��H���x�<p��i!�Ĭb��b���a+�c��U�o��b؀L$d�l�V#,��H��;���		���ES��#,��/�]bU��^w��s��q��&�8 ��h�b5�~5���ط�Q�H;9-�t�X�̆�LMy"%�f%�!!%q������هI�(mI�dCB:a�萱�g�˨ܝg#.�~%FA}�����_�a�z��/	��ˏ9���-�	)�cL^mʻ���ڢ(�J�-����B�!J�z������g4�~GBu��������w��F4�C�9�Z������b/��:<��3(ʒ"��Y��R�15A�I��"4Ҥd�hRRl�6$f!?2�t�#.�x���䇜�{�wᴟ�7�s���~ğ�)I&��jPrcl4&L7)����5�,k7�yRi�:P84N���/<���1�Ԧ׃M<��Rہ6�����TEY��y#.�Y����-q뭏���'T�1,���$#8�_�bf7���6���T�!�uE'������Çc'@�szv���^��}J0Ki�	�IvO;�?I���v*�Pʅ"2���ƾ��COXj�l8����������L���_;����!Pv�O� F�D	E��%S)J�M8Ҏ 0g	b�GI�BP�)�}f�w<jz��ڋW6w\���۴乮����y�D��[JQ�6"3��(�j�c"��@�H�#,��0Za�$O����}#8��H�%�#,#W��UDh����e�ʼmʨ�%$j�C#,#,�ce�|C٦��a��ˆ����u�D�.�!@:���D\3F�T�Z��e'F\�\1HM3M�L+�?iz�,����8�t�D3� ���NS���/�:�k��z)\Q��2J5Vن@s1;�n�VӨ_	�p74:�q2�L��5*&וrf�2�t�EEj�I6B*н-��"@#��j��H�-I&�#8~✔�B�����pb,���v�f��3Np��ُ#A�����$�A�,#8ʆ��6�Pj�N�UiҒ��J�Z���c��L-9�V@J�p���c����i��6T���0�Lx7����&j��0#Uo`��L:{�R	J�E�`���z��d[t��1c�ltji�1m�fE�w�{��F1�Ng��lc0�㛌mćb�)J�V��V�,�!Y$vS ����>��)5�i�mφ�-c&]��T�'�D�b�#�)�V��G,5k0-X�D#.���WK1a#ډd�3Lp��xc$���Ԕ��*q�f˺6Ɖ�˞�K��%�r#�J�0+��:���81`KV��Q���M*-й�(����	s|�r�6��n�m�#,�5�����B�`�kH�gT�Nr�H4&�)b�vFqV�����֡��"L�"�["�8o�R�(6�2�d�X!��X���-�����8`'}U��fs���ث�A�<1#.�d���N"���Y&4���r��m�1At���9����`��:UD���n,f���zM�ͅ�A���J���@�!��s(�4��[T�Cd|E=5��W�����a�yQ��]�}n���XP����%����!�K�oX�ETBb8Oer{|�k��1�@��l@m2"i��j�c�wN��ޛ�����#,#.(F��:�SDD4��b�#8�s�P��#8$,IQAdT�0��1Cp#.c�w )JCtp1��4�1��_[���;���xw#8���~����%�����o�'���;�%g7����R�@AP���,11 ���#8�D?H���?�;�g�ޝ}W#�!�Lz��l�~�o����U%�P����r��(#.��������H�ߨ���d!��7'	�}�T���D�@��#*a�z�D��G-�>U�,��<�������GJYPRU�)��l�@�s��Q%�y&R�Re��Aأ�VHRR'��,��3���01�4aY��% g�HQ���6LlN֠1̪�ѥ�CZ�F�P� �0'�[(��ד���V�sz��ѐk[�(�N0g#,>��#.���}iKU"�`<ɚV[fe��K�.i!ۗ�f�񷆷��}�#.�/=���I�E�f�U���J�Q�@��vڄ��=m�ɾ�S��ƌ@2�_q�>[���|�HW"|����d�B��9O�׉���e�x(S�P'�gg�Ȭ��|OZ�j�'	��~�?��r��}$d�hxC	�dJ �W���^gu?�8��ʌ�^X���<t�}�>m�ΕB#,!�D�����:Xt��`�D�-7�Ʊ?؈����G)>X���q�X��V�O��1	��L�;�%0R!�_�<��k���R��C�i�<��C�����rH�h�`��񙲞>����#8d!�$�Zp�p�y��T�<�~��z���:�P��5,��xX��!#zh$�b�>�GI����(QeT��Z\�*{�i���q��F$�̤5sUHa]���k<��ntc��B��A��Bд�u�*�,:�;�_��%�WH���i{~m��7,�bT���&����U~�[Ƽ\��G7�p�"�ir%L��22P�E���&E#.+�SAH��h�?��ki7���e-��Y�!.K��<Hl���筧�)�|�����R^J�@X��	C�DQ�#,=���ء����	M�n�O_fg���Nx�fc ���/���^'�T?���)пe����c��<�/]L�EQ�!`,-O���q�1�(��IBH�L"�3#,����>�#,ul#2��A���!#,h@�T�E��S%���jM���Nl���du�I*��:��i5�4[m���_�=��P�ra*� ����>>���!�4h�<i@�P�7�4��v�xt�w0jN�6#,��:~��?�	C$����ԙ�x^�x�<L�2����t��(�#H�$��~��ym_����3d�R��h��h�ll�ڒ�Q���%$�4��R�P)Q�P�P��L�(�i�6����i$Ю�W���cl���)�#8Rک#8�x0b�*�O*�A�78c�x��܃#,�F�F��*"4�2H�i�c�0�#8��؛#�+#,m1�Z�D*�F�т��n�%���(�8��@"#,!��n�a�yT,��ło��|t ���SQ!j�諦���ݘ�:���zٌ#�CU�	"F��iY�c��B��������$���h~�m�<��xK�~��V�<�QJ����#,�(HC���������O�P�P;l�M�?���ˋD`K�C 7&1��\�ܢX�h���%D)����YwY�c�if��#.����u瘮���?4�OB���O;�In��#����˩R��/��OU����!Y�Q�8&�9�v�6;�����,��T��Vc�cH�#.�3)$�Ϸ�^^����i|�����{Y�W�;�����*$��s{��Ϻ6Z��#.��6���(}�S�U�HEt�/#8j���a�x�4gN?glr;H���������8g6q��4#8d{��B��6!���lk��V��#.k��Bv4~x#�g��K�w8%bP�S~54�>�O�������:�O� >�0��<��<v,��֌��uS��M�I�Ls��j�<4��τd�)��	�ҵ�:SJ-��^|xX͆qM����d�UK7/�m��|m�#,0�7�s���]g>��u8~8�]?���4wO�#����:e���G�.�?���}��N���G���j���5�j�?(�ډ*��f�OIT/-B=�7��A��Kj���bM,/%Ѻ1�	#.;���hu҆��+� ��TN��˸q��PM���W`�BD��:�Kd��,�F#8��Xd�u�/(E�	[X�� @���i�p��E#%'��`R��Ǘ��#8�b���R�����ܨY��#,թ$w0��iQE��௏��\s�=�)�؋k1(�-\K�� ���/�4[J��t"�E�:q�P���ڊ��n��K8��%K����G�=!�q,�4;�#.=Y��"��7O�bi+��FAD7�}��9�ĐR 6�Q(#5Gӊ,l�=���GP8�����V�s��Ĺ�����W5+���i�ųXɄ�tL�Fۜ@��#.xzk}"r?�˷`���z��x�c���ʰc�����$e�	�<��*����>gˌ����x 79�R`�g�:��1LN��.M�7���o�/+6�k�Si�Ѿd��h���1�0N8���μ3Ŵb+2��ȓz�Fy��� �h�e�%m~��)"��ヴ.^#8)�vx��G�4�i�/I_l׆1r!����u!�!�mi9�����@y�"�ݣj�n=�P:���m���DR�]��:�1rĠ��Z�&|F�d�:j��\��i�)�z^`�qq�d��̶��Rg\��`���fdwq=�OY�zz^R��xR���<�䁦�^��8ζ�<�K�h��t�<(,K�R�|(�u0y���W�jBN#�������{�����g�su,3\^���Ҧ����^�h]����{���_�ʶ��yrvuc��_t��f3���ǭz<|~�̉g�v"����r�%v��d%�m�(��!�&�ݚY\�J�&v���^(mF��m<��9�2l7BZQ�<�ه;�<x�CC#�(Q(ioY|V�1�fJ��eީ�t���r����F���{��h�5�I�Cݬ�f7IƑAwB�I'C����_������^z��#.��M܎S7��ρ&#7�9���@��������F4�+�k�u�]�҅Tnh��@�i��8��y�D���#5�4$�N�s�&@Cig��u�`}¶�ك!�nt�t��<���Ǔ��<�w�����*� tҲ0?m�/*�a����76t�p�$��l�=��?b�O��P�	���a(�	��SX�_~��q�#8����z]����L6�4���w#ǰ߁��e��3��S��Ḅ��@��>KP���勁�������U�N���/tt]ч���܂������R#8h���X�!���<�W��^ݗ�*i�j��qa�d�����R,(�?Z�L��~9�R�p�Yϻ8.Ќ�-��;�M�u)Iaߗ!����[ɝ���꟞f:*F��׺)��h�QB(��J"�ji���QAE���LM=��n#z�� ����+}�i2�0��6��n�#8�vG�S��v�ߞ�y1E~P��|����H�$Q�cg"kh���|��W|�A|�ToMZ��-M����]JkZ-8h��Q:�9�̥�>�'�}�Vm_e��<�Eq̱(�p�U��I29��s�8�3B�8����e+��#.�l{0>b��t�D��G������ a��1t!b�P��+y� �Xg��x	1��(�G	�$K�֢��8v�in=h�Y������R�9�x��#.�?{s�_z��;F�`os\W����i�I�Uҟ�_P`���ު|�57����u�%�8�`���yo�f�x�s����$�#.ՠ�#.Ƣ)���=]�4 �ʔ�/SK�#,}���2ad�7����gQӡMW���^S�@l��g#8����" 1PBI���7,�h��ty�;7~�Ǻ�G�vk$G�>���xݴ$O[&Q�^�ɣ�(*#,T΃j@be #.��C[م�q�W>��b��w#8&D�O��M���#.�F�A��ݟ�z�#,��6(4�U�UN�O���$c��Da��<�i��gHt�Y�J��no<�1�4!�#.�"�x���_�M�@#�KB�\Q4u�DN�׍��q;j��=���:���h2�`�1#,៫Y�Fw {K�Ti��YI�KQ#,}M@����E;;A#.�+3#"����!���.݇ܠ���5f�����������A�u}.�j�#.+`�A`�)՛"5�������;_���M�1ʏϘ|��/&�5�~�a�)�U���0��B�sb��/�/ԃ9x�N��c���s�34�?;*��>�7�6j��Z	2h��涋�M�\���KII���X��I@��H6��S J�c#,ƒ&6�U��N��^.�<�l�CF�*j�@�[��X�i�Gh��(Q�E�#.�X�֙H� �`k����#.@1Q�4��(�TQ���3��`oo3�q'4-�ؑ�A ���h��-˶������AQOc͢�Ֆeөu�YҤ�	�)Q)��U�)#,�")v�֩1�ʎ���q�fs���5�ǎ[-N����U�1��K+tPd��/�����i�;k��7Z1���ًD��(����/�S����gMiƌ��q<5���ׅ�&�DZ��HRU�e!�)T(�|��Ԏ�T�0�"D�L�*�f��6�!���]�3��ME�I��+���r��y���8�܍<#m�[o\v��ȭ��Ql���(�PCii#M.R�C�]!����pb��V�p#81���Ǐ��5)�V��s��or3SF���Ik�Z֩�nˏ$�a�X�:��5l��ɀ��Llf�fhh�8����r"�b���@��C�[em��i�4FL16�,��[l2L�-~[�Z�9�ٻ��	�Ҍch޵o�����F[I���꼺]7hNrdק��u�Z�ڤ-T�}m�B�R#��ժs��[�#.+&J^�h�8��7	�R������ ��v�Z�ґ'`�N�7N8���W�a�C�NRd���B���L���*�ljq^Ts���kB�i�J�cjm��UJa�h�Jhp�M6����ţo7�L�Y]�9�f��n]>t��#.�R��ux1��qkd��5�4Ea�j�nĽ�=]q���,h�k�a��xpJ�^��{B¡�aM�\z����$�*7Į�{¦��km��&3#.�NF4�R+��(e�JV4�U5yp�(�DV�U�q�c��hZ�9�rb��3�j����:w��k��ś�ıq�ɦ3�N�Um!4@������;�F��Z��y��2��>��E�J=ȴa#��L{��A�V#pk�Xc�M�� AN�x��e)���$�Ռ�鶖�����\d#�3��$d6���f�n%Dh4pɪLA2puV,�����&rTѶd�BF�Ĉ�|S9X���:)�#.@���jA���CYg!y�t���e���ڪ)��6����������m�1�Y"#8��;��k�$��5��F9����@�7g@�	����/��ܰDWzbQ��e,��F���,�"aӫ�ҔC���|�i�<sD�-��g-h)���Uq��QJ���4֡�7���eӜf�?�Ҽg�V�a!��#,C���e^�&�)�����(v �~�G�͇��gXQ������]Vz�<� �S�������U0���{���s��ƈٕR�<�yk�θ�mm��𑍡�9'&��]���ݛ7w=���ш�<����v���O{G��� xt#.8ЏB��[�HポQH���������y�˶����LA�����n����NE"�*D���$L#R����3�C��y{8��G���qׯN}^����}0Ѣ1����U�chd�11�"j%IB�3V)��l�%Z�%ĕ��#8)��h�3hSM��&�(�e$$��i�ED�%�$)�,��J��-$�l(l�%(I1�h �k���>J�n�b#,��u�bhuI0�Nzļ9����R=:�79��v����x�7�{J�n�y�@�Y.�˾#8k���`�>���jG.�#,U��	>��z�����M,��^�&%�#.ь�H)#.���ۤ�s>�r����ל�(%T)���N�z��s)=^p16$��E�>��#8�`!�p��~����$'����<=ja�5"���qy'�:���a4��*@[��`|<	B#8ĥb5Ik>�j�+65(Rj4cV#>�ڹ�hB4`�f#����l������xL�Lp�0�����}4�j'>3.o�.��=��p���I*b\C��������j��r�]��J�82V)�#����h��`���=0&��Vi ��F�#&[D���;,�������4f8TE��o�#.2SLc.��FH��4�F(��,�I� �����@+p�`vs!��V�#8U(����X�"B!y�����6��Y��i>�	&|���-���ݖ�| �+ٺ���T�.�8�F(�HR��:���f`�h~3b3���ԌR���,=$4.�R'}�D[���^�0|@��eh!��U)F�#8(�(�4Ҡ=��!�`��$�06f�M�UT��#,ODC������N|�p���.�:�����S��[���#8�<ޢ#,�vn�&d$F*�� b��aZL��5&�b���������}^��� ٣8��:ޅ	UDߖ�����B�di7M�1]k��8�}��d }�N�J��`��^�Z���"y�vgV~>8ʢ���sS%U�f����؆|O+�����!�N��K�Y�շ�`�8X�瑥�����GB��L�J�BT8�9�7��A�(xH�XK�����<Q(�&Lqb#8'O@�`&Pg����X#,/bx'��,:>׈�g�����tQH���h�{�Qm�͖�d:<DډPj#,K�!<g?���I�*�U#8��Y�a?ڙ�O3Î����:zN!~�H	#8#.��#.O��C���(�����1�Xr�#8���g���/M�;�#�nn_o���J�Og��;�#��R�5%#,E}Q�/����1/��5�TPԇ��txa)����=�?Nq�4���\Y�8���6o��^�,�WM�1���t�0v;#���!��%���A�1�u��>��?���|=�=��������.����N傆1(������p�f%P� I�s��s�s���ǩѐ�nd[wof�R!������I��x�H��]��vutD��1<+���;Kѱ"��Y�0�Sb�!#8�E�R:�M���#,�T/�UhX2	тJ����fA�4i��#�},��P��P��Xe�w9�.�O���H�w���;=�o.�;!�#8n�9xh5݈�Fl��lq��L���v�a�v�=����ѳ�N�:4��#$d�B�<z�5#.Ǖ#8�JD�I���9'$���W#,��D����s$� �@�='���C#.�1��hH���SZ��`g#.�YS@�@�^��>[9�>�Ici%�Csjl�|x�NA���JI#8�� CAt^>&�Nر,D2�5����Ʒ5�[gM��iƠP'd���(�� <c0l�}+6�d���� ���9���5q��Ok�W#,���H�����g7.�Y���p��)���������i"�erL<.�;b����*�q���wk��&S6cJ:��-v��.	Kζ�)3��>=Í�`�&�j���ĥe@�x唆�|�!��p�0���a�E�5+aA�ƀ�H��"h&�ؒLb8�#,#.06�x��*t�ZBB<b��xM*R�QQ�h��usGn++��2��2<x1�Η��W	4�"�똎s�XvWd�@�a=�U��x���Ē"�m�je3ZL��0r[Nd�v��`�;�4�Ӥ�b[OA�9SZl��GKΚFu�#,A�m���L\�ST u\�(�fBRV�ݥ�=N�˘g�n&M���	ų�LG,��8q)�i#.&��ˍ@V���$l��J�����o�iw)�f�̄��Kn�IĖ;&v��t���[�!m��i嬹�8�C�#8�}���j#��;��ϴ�;��#8��.�����LU��D<��jl���$�3*���g�[4`Iџ,�E��dhF�z<Jy��X�a���8�\��Xl[wO� 9W��4&�='N�����:��h�5e�.W*0����ٸL�K�<j@���G@:B"�Y��r-����Y��b1OKvv&�?gr�v��r�E]Mt�@��b�(�n�H�&l����3���yt�ҥ���g5Ie��ȱր�{Ct�c,��N�5�i����!�>Y��p�}v�×r#8{g�7FS�.�$xr8p��)P�]v��6��*�,E%�T`ɲ��w@�t�%��o��&!j�$NT�U�����#��,䷹t[�;I+���0�M�DC����z�����s�˙�r1#.C����]��(vi�a���1IE�$���[`�����xw4m'ɋGAu3i#4~�~�9�&0�sN�B�1-��y�j?W��u[yX}D�&C@�!�ly�������y,<u�Ȃ���Ϲ�t��cf)>p��L�kg�Y�ie;���e�/AR�/�6XZLS&��3m͖!$td,��j�Å�m�0�}���V���:��<���u��#,ݕ���V�Kn��j&IE`+���d�{�HI[:�lC��s8!�-�e��uV������R�!iێ$4�8'3��:t�0o��0�N�G	�y��{���h��#8���,LM�M4X��&!��U2\�.�U�3�v.uJb��.wd��O>L���AF��"�=!eۣ��C8L�(���錄�]Ko*%��ɜ4����ps��&�o�%�8�9��ؖ�қ-�/N.��])�r�7Ù�1�� �ٱq<���D�(#8ha�x����g8#.&�t5�$bbf}�G#.2H��QB${��*�xPQ���*�5Md����n���Z2�3�09,6�c��A��Q���M#����a�P �74�j.ѪhM{��4����;�0�Ix���8V��co��5��l�ːa��Tѵ����5`#�3,UD����E�!�$�D�P�#��D��S*��vB]���%"#8�#���7�e����#aVň0�l�@��odAP0��7ۺ����XZEW-�rhg"�Bb0�u���u4��0�U�F`�u���PPW�&0�͸襌J�"�89玽�q�`����y�3b<ΑSk�n�h4@�������γ���H�*��~���w�~F��T�"���0�"��vD�T(�����r�OHJhwi G�;�#,�"�;�2C�B�.��Vx@h�ZU��B��Q�����)��i}�Ln�tPi�c�Z0T�1`aKw2���[[<�I�h�GuЮ����m��Dxj�f��yv��a���M	48~0�_��| �P�qۍdj��k	��h�l�3炭#,��)�<>��0�4T#�D;uڇ�Y�巂i���h\QQ'{Q��ʑ8r�Ag24��T�,�M1�vd��V�}&�2w��v���sV�<z;�G�ss��"'8����+��' ��}����y��׌6揭�s���k9lQK[�\5����o�*���g�~*!�>�#.:��a��w��tXiZ��ߋ=}H ��HZC��p�>�\�	D�� QO;3#,+�4��,p��\	�OY�]�-@����T�R�d��ޮjzR���[�$2IE�MN�[�ݡ�J�.�Lp��d!1�qь��HU2C�������.�w6��G#���H{�PS�E�����*�k�5$��KL�a�*vmP�`�<��;�	���{�����}>Џ�7���gGZ��@~E��	�8���^NW���FF�oA��M:F�d6�#�s#.fdD3B�#.J�1�a^����$��P�~�@�����O��(���w�6�S�bN��s�d4hꨚ2���1eW�d/��?q�"p3��B��`8M�ň%�,0��yI��jFoe�f��h�ftJi����}�������;�.�^v�s0h�<`��������E7�����/RQ��}��I݋���7��h�&z(��Ř�ۿ�m�Z��te��Y�DI�J>�Y��ס�3�u�v81T&!3B�9��j$��6�Ґ���{p"V!!#8@�7^#8H#,�^pP�Cj��#.�9h#,�#8A�J��J�`BH��"y��A/��p��M��h#._�Z#,�#,'�s�������gÐWm�������t�=z��#8{#.�c�R��X���)(���Ç�Ǽ���9:G��K�V��T?�a#,(�A�Nk�-��OS͂�狤Q��`X$�P�@�7FnO6����������kd�B�;��h�nlnp4Q��#�$�F 6��U��Lb��&F�M4���8*�����r ��R14�$�4i��Bӈ��`���LH7���6	�u�H�aCZW:v8`x�����'��|'q��N�YE�Y�x��kP�53�i�kH�	"Ҍ��!�L�C��17GOP��:N��z�P6=��%� @]��t������9�$$ڲ~)�r�X�Д\q2&�Q�owhL�JG�݆���-�a��š89	�J��������̰�p�{���W�W�1��!p`�円�º��Dy���`�nn8g�%q�p�g��O����$�K���[��7�n,���jR��؅c[F^6�6y�z��������xv��!ӎ�A������o��c����O�{�J�>�t��Px{66�Me��f�jL�e�1�JPZ���a�&Ċ*[1��6oδ�֢l�#8���)��{��؞�fʮ�#.@�����BS������Hl@=G؇#����^>�d���l��	K@����q�c�p�����<�@�3���A>�J�3��Q9�#8�"��#.�6��הUc��x����w��a���|+���2�LY5[�#,�7�ʛh�mNCM��;h��ь;;�&p�ؙۅ�57M'M�HƬ�r�K�DM��U�A���U��J,pw�$H�I4io#.�q3�y���f8Ci� u��&�����m���ה�J�D ���!����J�afC�Z�#,��S�]X&h҇Z9#e���]c��;_Z��A4�	���شiZ��L�� ��TkA�ҭh`�kZR��������l����-6>�`n9Hd<��3�&�粋�5෯����Hz�"�l�#�"�D�ԁ�#8�g��y�h���pw���Ja�d�}�PR#,+,�#,y"(=�S�>&���sO���g�����m%V��<"�O�BQ�Vh�Q+�蝞#,�ذ�(d�CP�A�*x����^�W���N�9��3��l��^7�p�S��D�"38X�����m�V#%G��+���#,��{�';w�?�@��U�����jx���#,� %��֣)�O��M.���"�H-�ɀu, <��P0��:ٯ��ϗUR�/�4D	#&3#��TF4i2�$"�n��WߘJV��4��qT�!R$��CQ����w5��"ɱ�j�nk���׍��J�d(����#�*q��%;`�q���>���$���~�}F������f�o� f�|�wyxx2(J�J���#8��>��@N_tZ%K#8������E0D�,���B����L�Qb��j��YPL#8y�,J"�u'�K��H���,\��d�l�l���ЧT#ՑD=�����A�NcdScXV�X��F̌V2�S(�X1=y�-�$BP�3��eD Kڃ��@z?���N������͞~��Z�����B�'�=���N#.Jw��#,~\p	q��#�.��E�RDz��ځ��Ax8z6	�>��|x��I���fP�BDb�P�Y?"�ް�<��>�bH����ar�0���C�͓��؝G�O�`�Chs�̃С������)�\ ((_�E8�\��5��S�v6�j�YHBX88�&�Ss���A���|mx��j���Zs����]Tv`����MJ�@D�1q�<NF����D���/82C��L9ڜ���\#8��4�zs8�8�1ĸ&�gvjZ:��RϞ���\�LZ��.#8;�@N#,]�r���̽xF�?��8��}Ę9/�9���lx��'��U�0�`{U�I}�3�e�)��&Ȩ�����ڤ�a��z�_�Ch���JV$�*��_��ۣ���FԔ�aL_9��P,�P)	�i��BЭ�N��u#8 DA�u@x��~3˵{:�����@%S�����mF5��(j�	��)F�B�!���:6���7�߽���)��?�����Z2#,r�Dޚ���@���%�1��gv��}��Q�9h+J[O����G[�3"I�*bc;�ֆ�����(�:\J�0�X<���54R��eB�iݕ��+Rf�#,����2 (t�Y��̪뛶��v���m^]��D�����i*A0A-#��t�ka��N#8U��" �Q���Q�"��^\E�SKe5&L�&�5�5-)2L#&�3!��p���0aB!I#8��t��M����2P��ԉ�6��G�,����aM	�>�]n��j�7m�T�2@��%CY�W��[Fh���L��*���&i���I#.NhTr��hE����d��<�'��?�C�#,�|�s;�g�>Y��n�������7��6��)�uF����[�q!n�|xxO�-21&=H���8�_	ѝb�5�i�(���L�=r�0�6�2Eq\���K���^���sU���7 �(Ba04����3U�w�X{(��#.r# P3>`Ӝ.rp|�M�p�:� �"ؓ�HN \��Ja�w�& �bͿ�sn�������d"S�Jju)L�1�_#8��q���#,����2��デq�T8c���{��:y���!/��Z�F���xy��"{���D�qf󂛔�kLZ��I-��������ӓ!�q>��	үlP���Ą���p�B�M#.d�>>��<�|t�"�9�I����[�����_@�Ռ_�X{]�GG �����Ղ]��l�~�u��>	�E�#.#.�{�����d����`��( ��Z� ^��D��h}8�|L �2~�K��"�=�!;'b�Uj[͵�p�C'��Y�Ѣ�pi+�_i�V�o�7#8��^,Lw#."������+iK��c�/�E�p��w:��B/}�ش����+�`�'�1G���rh�w6�������L#.�`Cs�2u�4h�S�%9�A�Qg���"E�<�x�#.�����OQ���h!�ji��B�4��x߹6z�K��2�l@�`v�$�#,��Db�LP_�'GA}���#,�<��6��"<gN	w HO�"?"��5ٯ~�n@��O��D����?���#.���`�33@ �f#,#,�������>��������c�����������������?�����k�~����>/�g��=������?�����������������O��?����{��O����O?�؟ڿ��ð~O����T~UO�P<�}��Dy���(� ����p.l��zE;�z�p���'E��?����l��F��$�Ψ�ōy�"�y����Ws���$"&f���\��М��l3#,���0zf�#.����4�9�A�F����Νqd��TP��<���N���6�b�y���׋�z�A��08��oѥ�R����3�J�1�C�-_;��<bǰ	���%*���W)��:�x�dD'�������=�C���O�gˤJ�����p������h���#.˟�`�����Q&ü#.����\,�	���܇ӥo2��٬��n��7�*jH���F�����65�48�Ce�C��*`ƌ6v�!�T�o{x�覑2��x�@'gtn��eĕÄ��!uD�tC��h��E�5k�<|9fٹ+D�q��U��X:������.6��&Р�VK�ɽ�	&kP�j���U�Nq����kd���dr�k�M�o�u�'T�:s9�?6��>��,{�̻FV�CFE|Z��/!������H?,t!��fw�Y��=W�0�+<S3x"S��#.�v!����hcǶ�y���x[z��32a�_�%��d�HbO3����T�x$���c`ؘ�Ğ���3݄�p�����e��<��#.�a�x�һ�	)XzO���vt�+��F�<��3PEATV*AB�9wt�!�=\���&���	����K�NR��" �ѪD�=��zѿ��#8*#,#8I�I#��lC��L�x�a�T1A�p��}	�bfp����핓>p6ܗ�#.���##,I��F �l#���k��΋_��ssIkiA&5#8�n���-ثM&U�lk3X��"d�)�����<!P��~��!x����l���e�Ru�$Dji{k�ol���}�o`�v{������!��{8#*��JP9x-"#A���=��=����	K�!�~�::��nI�!Z���W,��7Qn仨2��F��x����3;{ �#9c�v`��N֦���y�@li���#,�1���˥OL�Ë�x�?�g�4Ι,�,lU4xgx��٨టU���G�癪�>����n?~�z�x3�ô�7��A`�ْ|�ƼkI��nb�h�#8�M�]��7��(�(J��d o:��3mhۭˡ`���nE��	#.#.!�!A?�!�=�!بL���5��y���{ƢZX�K"hǞD�}Z�}l����}.���!>?�����#8�^������"���>���{��=b�O�����;�>����YUe������\+2Y@b&I0��C�B�e"O1���ڵ�dQ�oJ��l�v��B%#�?����=�����N�H�&�>������4�3/�����8���{���O�O��#.'��~����xw~���x�T�������a��߸�B%-4���0J��J��XU#���O��'����'�����з���a�H����^G������}+�y!�a�w)�Ωgt��<����c�R��'�=>`�9	G�K�^��9$���~�������������O�N�����O�h[k����v`�#.��ߵ���7�P�����7B���_���;�pʠ=�vb��kʗ��P��\�����һx�UL���ڸ\e����|�!���t��tYX���+����X߇�h�TK^V�9������9+�!�j��������E��w#.A�J;e��1	�o�Q����#,j�H)�KU?�s��|b\Q�$�B	�@+k���!b{��0��?Ȉ��.�p�!qS�
+#<==
diff -ruN MUMPS_5.1.2/waftools/ext_aster.py mumps-5.1.2-aster7/waftools/ext_aster.py
--- MUMPS_5.1.2/waftools/ext_aster.py	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/waftools/ext_aster.py	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,172 @@
+# coding=utf-8
+# --------------------------------------------------------------------
+# Copyright (C) 1991 - 2017 - EDF R&D - www.code-aster.org
+# This file is part of code_aster.
+#
+# code_aster is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# code_aster is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
+# --------------------------------------------------------------------
+
+import os.path as osp
+from waflib import Configure, Logs
+
+###############################################################################
+# Add OPTLIB_FLAGS support
+from waflib.Tools import fc, c, cxx, ccroot
+# original run_str command line is store as hcode
+for lang in ('c', 'cxx', 'fc'):
+    for feature in ('', 'program', 'shlib'):
+        ccroot.USELIB_VARS[lang + feature].add('OPTLIB_FLAGS')
+
+class fcprogram(fc.fcprogram):
+    """Link object files into a fortran program, add optional OPTLIB_FLAGS at the end"""
+    run_str = fc.fcprogram.hcode.decode() + ' ${OPTLIB_FLAGS}'
+
+class cprogram(c.cprogram):
+    """Link object files into a C program, add optional OPTLIB_FLAGS at the end"""
+    run_str = c.cprogram.hcode.decode() + ' ${OPTLIB_FLAGS}'
+
+class cxxprogram(cxx.cxxprogram):
+    """Link object files into a C program, add optional OPTLIB_FLAGS at the end"""
+    run_str = cxx.cxxprogram.hcode.decode() + ' ${OPTLIB_FLAGS}'
+
+###############################################################################
+def customize_configure_output():
+    """Customize the output of configure"""
+    from waflib.Context import Context
+    def start_msg40(self, *k, **kw):
+        """Force output on 40 columns. See :py:meth:`waflib.Context.Context.msg`"""
+        if kw.get('quiet', None):
+            return
+
+        msg = kw.get('msg', None) or k[0]
+        try:
+            if self.in_msg:
+                self.in_msg += 1
+                return
+        except AttributeError:
+            self.in_msg = 0
+        self.in_msg += 1
+
+        self.line_just = 40 # <--- here is the change
+        for x in (self.line_just * '-', msg):
+            self.to_log(x)
+        Logs.pprint('NORMAL', "%s :" % msg.ljust(self.line_just), sep='')
+    Context.start_msg = start_msg40
+
+customize_configure_output()
+###############################################################################
+from waflib.Task import Task, CRASHED, MISSING
+
+SRCWIDTH = 120
+def format_error(self):
+    """Write task details into a file. Print only the first line in console.
+    See :py:meth:`waflib.Task.Task.format_error`"""
+    text = Task.format_error(self)
+    if self.hasrun == CRASHED:
+        msg = getattr(self, 'last_cmd', '')
+        name = getattr(self.generator, 'name', '')
+        bldlog = osp.join(self.generator.bld.path.get_bld().abspath(), '%s.log' % name)
+        slog = ''
+        try:
+            open(bldlog, 'wb').write('task: %r\nlast command:\n%r\n' % (self, msg))
+        except (OSError, IOError) as exc:
+            slog = '\ncan not write the log file: %s' % str(exc)
+        text = text.splitlines()[0] \
+             + '\n    task details in: {0}{1}'.format(bldlog, slog)
+    return text
+
+#cprogram.format_error = format_error
+#cxxprogram.format_error = format_error
+#fcprogram.format_error = format_error
+
+###############################################################################
+# support for the "dynamic_source" attribute
+from waflib import Build, Utils, TaskGen
+
+@TaskGen.feature('c', 'cxx')
+@TaskGen.before('process_source', 'process_rule')
+def dynamic_post(self):
+    """
+    bld(dynamic_source='*.c', ...)
+        will search for source files to add to the attribute 'source'.
+
+    bld(dynamic_source='*.c', dynamic_incpaths='include', ...)
+        will search for 'include' in the parent of every new source and
+        add it in INCLUDES paths.
+    """
+    if not getattr(self, 'dynamic_source', None):
+        return
+    self.source = Utils.to_list(self.source)
+    get_srcs = self.path.get_bld().ant_glob
+    added = get_srcs(self.dynamic_source, remove=False, quiet=True)
+    self.source.extend(added)
+    for node in added:
+        node.sig = Utils.h_file(node.abspath())
+        if getattr(self, 'dynamic_incpaths', None):
+            incpath = node.parent.find_node(self.dynamic_incpaths)
+            if incpath:
+                incpath.sig = incpath.abspath()
+                self.env.append_value('INCLUDES', [incpath.abspath()])
+                incs = incpath.get_bld().ant_glob('**/*.h*', quiet=True)
+                for node in incs:
+                    node.sig = Utils.h_file(node.abspath())
+
+###############################################################################
+@Configure.conf
+def safe_remove(self, var, value):
+    """Remove 'value' from the variable, remove duplicates"""
+    self.env[var] = self.remove_duplicates(self.env[var])
+    while value in self.env[var]:
+        self.env[var].remove(value)
+
+@Configure.conf
+def remove_duplicates(self, list_in):
+    """Return the list by removing the duplicated elements
+    and by keeping the order"""
+    dset = set()
+    # relies on the fact that dset.add() always returns None.
+    return [ l for l in list_in if
+             l not in dset and not dset.add(l) ]
+
+# Force static libs
+CHECK = '_check'
+
+@Configure.conf
+def _force_stlib(self, *args, **kwargs):
+    """Always use 'stlib' keyword argument"""
+    kwargs = kwargs.copy()
+    stlib = kwargs.get('stlib') or kwargs.get('lib')
+    if stlib:
+        kwargs['stlib'] = stlib
+    try:
+        del kwargs['lib']
+    except KeyError:
+        pass
+    return getattr(self, CHECK)(*args, **kwargs)
+
+@Configure.conf
+def static_lib_pref(self):
+    """Change temporarly the 'check' method"""
+    if not self.options.embed_all:
+        return
+    if getattr(self, CHECK, None) is None:
+        setattr(self, CHECK, self.check)
+    self.check = self._force_stlib
+
+@Configure.conf
+def revert_lib_pref(self):
+    """Restore original method"""
+    if not self.options.embed_all:
+        return
+    self._force_stlib = getattr(self, CHECK)
diff -ruN MUMPS_5.1.2/waftools/mathematics.py mumps-5.1.2-aster7/waftools/mathematics.py
--- MUMPS_5.1.2/waftools/mathematics.py	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/waftools/mathematics.py	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,384 @@
+# coding=utf-8
+# --------------------------------------------------------------------
+# Copyright (C) 1991 - 2017 - EDF R&D - www.code-aster.org
+# This file is part of code_aster.
+#
+# code_aster is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# code_aster is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
+# --------------------------------------------------------------------
+
+import os
+import os.path as osp
+from itertools import product, takewhile
+from functools import partial
+from subprocess import Popen, PIPE
+from waflib import Options, Configure, Errors, Logs, Utils
+
+BLAS = ('openblas', 'blas')
+BLACS = ('blacs', )
+LAPACK = ('lapack', )
+SCALAPACK = ('scalapack', )
+OPTIONAL_DEPS = ('cblas', )
+
+def options(self):
+    group = self.add_option_group("Mathematics  libraries options")
+    group.add_option('--maths-libs', type='string',
+                    dest='maths_libs', default=None,
+                    help='Math librairies to link with like blas and lapack. '
+                         'Use None or "auto" to search them automatically.')
+    group.add_option('--embed-maths', dest='embed_math',
+                    default=False, action='store_true',
+                    help='Embed math libraries as static library')
+
+def configure(self):
+    # always check for libpthread, libm (never in static)
+    self.check_cc(uselib_store='MATH', lib='pthread')
+    self.check_cc(uselib_store='MATH', lib='m')
+    self.check_number_cores()
+    if self.options.maths_libs in (None, 'auto'):
+        # try MKL first, then automatic blas/lapack
+        if not self.detect_mkl():
+            self.detect_math_lib()
+    elif self.options.maths_libs:
+        self.check_opts_math_lib()
+    self.check_libm_after_files()
+    self.check_math_libs_call()
+
+###############################################################################
+@Configure.conf
+def check_opts_math_lib(self):
+    opts = self.options
+    embed = opts.embed_math or opts.embed_all
+    check_lib = lambda lib: self.check_cc(**{
+        'mandatory':True, 'uselib_store':'MATH', 'use':'MPI',
+        ('st' * embed + 'lib'):lib})
+
+    for lib in Utils.to_list(opts.maths_libs):
+        check_lib(lib)
+
+@Configure.conf
+def check_sizeof_blas_int(self):
+    """Check size of blas integers"""
+    self.set_define_from_env('BLAS_INT_SIZE',
+                             'Setting size of blas/lapack integers',
+                             'unexpected value for blas int: %(size)s',
+                             into=(4, 8), default=4)
+
+@Configure.conf
+def check_libm_after_files(self):
+    """Avoid warning #10315: specifying -lm before files may supercede the
+    Intel(R) math library and affect performance"""
+    self.start_msg('Setting libm after files')
+    flags = self.env.LINKFLAGS_CLIB
+    if '-lm' in flags:
+        while True:
+            try:
+                flags.remove('-lm')
+            except ValueError:
+                break
+        self.end_msg('yes ("-lm" removed from LINKFLAGS_CLIB)')
+        self.env.LINKFLAGS_CLIB = flags
+    else:
+        self.end_msg('nothing done')
+
+@Configure.conf
+def detect_mkl(self):
+    """Try to use MKL if ifort was detected"""
+    var = 'OPTLIB_FLAGS_MATH'
+    opts = self.options
+    embed = opts.embed_math or opts.embed_all
+    if 'ifort' not in self.env.FC_NAME.lower():
+        return
+    self.start_msg('Detecting MKL libraries')
+    suffix = '_lp64' if self.env.DEST_CPU.endswith('64') else ''
+    # first: out of the box (OPTLIB_FLAGS as provided)
+    totest = ['']
+    # http://software.intel.com/en-us/articles/intel-mkl-link-line-advisor/
+    if self.get_define('HAVE_MPI'):
+        totest.append('-mkl=parallel')
+        scalapack = ['-lmkl_scalapack' + suffix or '_core', '-lmkl_intel' + suffix]   # ia32: mkl_scalapack_core
+        blacs = ['-lmkl_intel_thread', '-lmkl_blacs_intelmpi' + suffix] + ['-lmkl_lapack95' + suffix]
+    else:
+        scalapack = []
+        blacs = []
+    interf = 'mkl_intel' + suffix
+    for typ in ('parallel', 'sequential'):
+        totest.append('-mkl=' + typ)
+        thread = 'mkl_sequential' if typ == 'sequential' else 'mkl_intel_thread'
+        core = 'mkl_core'
+        optional = []
+        if typ == 'parallel':
+            optional.append('iomp5')
+        libs = ['-l%s' % name for name in [interf, thread, core] + optional]
+        libs = ['-Wl,--start-group'] + scalapack + libs + blacs + ['-Wl,--end-group']
+        totest.append(libs)
+        libs = ['-mkl=' + typ ] +  libs
+        totest.append(libs)
+    Logs.debug("\ntest: %r" % totest)
+    while totest:
+        self.env.stash()
+        opts = totest.pop(0)
+        if opts:
+            self.env.append_value(var, opts)
+        try:
+            self.check_math_libs_call(color='YELLOW')
+        except:
+            self.env.revert()
+            continue
+        else:
+            self.end_msg(self.env[var])
+            self.define('_USE_MKL', 1)
+            return True
+    self.end_msg('no', color='YELLOW')
+    return False
+
+@Configure.conf
+def detect_math_lib(self):
+    opts = self.options
+    embed = opts.embed_math or (opts.embed_all and not self.get_define('HAVE_MPI'))
+    varlib = ('ST' if embed else '') + 'LIB_MATH'
+
+    # blas
+    blaslibs, lapacklibs = self.get_mathlib_from_numpy()
+    self.check_math_libs('blas', list(BLAS) + blaslibs, embed)
+    # lapack
+    opt_lapack = False
+    if 'openblas' in self.env.get_flat(varlib):
+        try:
+            self.check_math_libs_call(color='YELLOW')
+            opt_lapack = True
+        except:
+            pass
+    if not opt_lapack:
+        self.check_math_libs('lapack', list(LAPACK) + lapacklibs, embed)
+
+    def _scalapack():
+        """Check scalapack"""
+        libs = list(SCALAPACK)
+        libs = libs + [''.join(n) for n in product(libs, ['mpi', '-mpi', 'openmpi', '-openmpi'])]
+        return self.check_math_libs('scalapack', libs, embed)
+
+    def _blacs():
+        """Check blacs"""
+        libs = list(BLACS)
+        libs = libs + \
+               [''.join(n) for n in product(libs, ['mpi', '-mpi', 'openmpi', '-openmpi'])] \
+             + [''.join(n) for n in product(['mpi', 'mpi-', 'openmpi', 'openmpi-'], libs)] \
+        # check the 3 blacs libs together: Cinit, F77init, ''
+        ins = []
+        for i in libs:
+            ins.append([l.replace('blacs', 'blacs' + n) for l, n in \
+                        product([i], ['Cinit', 'F77init', ''])])
+        libs = ins + libs
+        return self.check_math_libs('blacs', libs, embed)
+
+    def _optional():
+        """Check optional dependencies"""
+        self.check_math_libs('optional', OPTIONAL_DEPS, embed, optional=True)
+
+    # parallel
+    if self.get_define('HAVE_MPI'):
+        self.env.stash()
+        try:
+            _blacs() and _scalapack()
+            _optional()
+            self.check_math_libs_call()
+        except:
+            self.env.revert()
+            _scalapack() and _blacs()
+            _optional()
+            self.check_math_libs_call()
+
+    self.start_msg('Detected math libraries')
+    self.end_msg(self.env[varlib])
+    if self.get_define('HAVE_MPI') and embed:
+        msg = "WARNING:\n"\
+              "    Static link with MPI libraries is not recommended.\n"\
+              "    Remove the option --embed-maths in case of link error.\n"\
+              "    See http://www.open-mpi.org/faq/?category=mpi-apps#static-mpi-apps"
+        Logs.warn(msg)
+    if 'openblas' in self.env[varlib]:
+        self.define('_USE_OPENBLAS', 1)
+
+@Configure.conf
+def check_math_libs(self, name, libs, embed, optional=False):
+    """Check for library 'name', stop on first found"""
+    check_maths = partial(self.check_cc, uselib_store='MATH', use='MATH MPI',
+                          mandatory=False)
+    if embed:
+        check_lib = lambda lib: check_maths(stlib=lib)
+    else:
+        check_lib = lambda lib: check_maths(lib=lib)
+    self.start_msg('Checking library %s' % name)
+    found = None
+    for lib in libs:
+        if check_lib(lib=lib):
+            self.end_msg('yes (%s)' % lib)
+            found = lib
+            break
+    else:
+        if not optional:
+            self.fatal('Missing the %s library' % name)
+        self.end_msg('not found', 'YELLOW')
+    return found
+
+@Configure.conf
+def check_number_cores(self):
+    """Check for the number of available cores."""
+    self.start_msg('Checking for number of cores')
+    try:
+        self.find_program('nproc')
+        try:
+            res = self.cmd_and_log(['nproc'])
+            nproc = int(res)
+        except Errors.WafError:
+            raise Errors.ConfigurationError
+    except Errors.ConfigurationError:
+        nproc = 1
+    else:
+        self.end_msg(nproc)
+    self.env['NPROC'] = nproc
+
+@Configure.conf
+def get_mathlib_from_numpy(self):
+    '''The idea is that numpy shall be linked to blas and lapack.
+    So we will try to get then using ldd if available'''
+    libblas = []
+    pathblas = []
+    liblapack = []
+    pathlapack = []
+
+    self.load('python')
+
+    self.check_python_module('numpy')
+    pymodule_path = self.get_python_variables(
+        ['lapack_lite.__file__'],
+        ['from numpy.linalg import lapack_lite'])[0]
+
+    self.find_program('ldd')
+    ldd_env = {'LD_LIBRARY_PATH': ':'.join(self.env.LIBPATH)}
+    cmd = self.env.LDD + [pymodule_path]
+    out = Popen(cmd, stdout=PIPE, env=ldd_env).communicate()[0].decode()
+
+    for line in out.split('\n'):
+        lib = _detect_libnames_in_ldd_line(line, LAPACK)
+        if lib:
+            liblapack.append(lib)
+            continue
+        lib = _detect_libnames_in_ldd_line(line, BLAS)
+        if lib:
+            libblas.append(lib)
+    return libblas, liblapack
+
+def _detect_libnames_in_ldd_line(line, libnames):
+    if not list(filter(line.__contains__, libnames)):
+        return None
+    lib = line.split()[0].split('.', 1)[0]
+    return lib[3:]
+
+@Configure.conf
+def check_math_libs_call(self, color='RED'):
+    """Compile and run a small blas/lapack program"""
+    self.start_msg('Checking for a program using blas/lapack')
+    try:
+        ret = self.check_fc(fragment=blas_lapack_fragment, use='MATH OPENMP MPI',
+                            mandatory=False, execute=True, define_ret=True)
+        values = list(map(float, ret and ret.split() or []))
+        ref = [10.0, 5.0]
+        if list(values) != ref:
+            raise Errors.ConfigurationError('invalid result: %r (expecting %r)' % (values, ref))
+    except Exception as exc:
+        # the message must be closed
+        self.end_msg('no', color=color)
+        raise Errors.ConfigurationError(str(exc))
+    else:
+        self.end_msg('yes')
+
+    if self.get_define('HAVE_MPI'):
+        self.start_msg('Checking for a program using blacs')
+        try:
+            ret = self.check_fc(fragment=blacs_fragment, use='MATH OPENMP MPI',
+                                mandatory=True)
+        except Exception as exc:
+            # the message must be closed
+            self.end_msg('no', color=color)
+            raise Errors.ConfigurationError(str(exc))
+        else:
+            self.end_msg('yes')
+
+    self.start_msg('Checking for a program using omp thread')
+    try:
+        ret = self.check_fc(fragment=omp_thread_fragment, use='MATH OPENMP MPI',
+                            mandatory=True, execute=True, define_ret=True)
+        nbThreads = int((ret and ret.split() or [])[-1])
+        refe = min(self.env['NPROC'], 2) if self.env.BUILD_OPENMP else 1
+        if nbThreads < refe:
+            raise ValueError("expected at least {0} thread(s)".format(nbThreads))
+    except Exception as exc:
+        # the message must be closed
+        self.end_msg('no', color=color)
+        raise Errors.ConfigurationError(str(exc))
+    else:
+        self.end_msg('yes (on {0} threads)'.format(nbThreads))
+
+# program testing a blas and a lapack call, output is 10.0 and 5.0
+blas_lapack_fragment = r"""
+subroutine test(res, res2)
+    implicit none
+    real(kind=8), intent(out) :: res, res2
+!
+    real(kind=8) :: ddot, dlapy2
+    real(kind=8) :: a1(2), a2(2)
+    integer  i
+!
+    do i = 1, 2
+        a1(i) = 1.d0 * i
+        a2(i) = 2.d0 * i
+    end do
+    res = ddot(2, a1, 1, a2,1)
+    res2 = dlapy2(3.d0, 4.d0)
+end subroutine test
+
+program main
+    real(kind=8) :: a, b
+    call test(a, b)
+    print *, a
+    print *, b
+end program main
+"""
+
+# program testing a blacs call, output is 0 and 1
+blacs_fragment = r"""
+program test_blacs
+    integer iam, nprocs
+    call blacs_pinfo (iam, nprocs)
+    print *,iam
+    print *,nprocs
+end program test_blacs
+"""
+
+# program testing openmp theads
+omp_thread_fragment = r"""
+program hello
+!$ use omp_lib
+    integer total, thid
+    total = 1
+    thid = 0
+!$omp parallel private(thid) shared(total)
+!$ total = omp_get_num_threads()
+!$ thid = omp_get_thread_num()
+    print *, "Thread ", thid, "of ", total, "childs"
+!$omp end parallel
+    print *, total
+end program hello
+"""
diff -ruN MUMPS_5.1.2/waftools/metis.py mumps-5.1.2-aster7/waftools/metis.py
--- MUMPS_5.1.2/waftools/metis.py	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/waftools/metis.py	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,122 @@
+# coding=utf-8
+# --------------------------------------------------------------------
+# Copyright (C) 1991 - 2017 - EDF R&D - www.code-aster.org
+# This file is part of code_aster.
+#
+# code_aster is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# code_aster is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
+# --------------------------------------------------------------------
+
+import os.path as osp
+import re
+from functools import partial
+from waflib import Options, Configure, Logs, Utils, Errors
+
+def options(self):
+    group = self.add_option_group('Metis library options')
+    group.add_option('--disable-metis', action='store_false', default=None,
+                    dest='enable_metis', help='Disable METIS support')
+    group.add_option('--enable-metis', action='store_true', default=None,
+                    dest='enable_metis', help='Force METIS support')
+    group.add_option('--metis-libs', type='string', dest='metis_libs',
+                    default=None,
+                    help='metis librairies to use when linking')
+    group.add_option('--embed-metis', dest='embed_metis',
+                    default=False, action='store_true',
+                    help='Embed METIS libraries as static library')
+
+def configure(self):
+    try:
+        self.check_metis()
+    except Errors.ConfigurationError:
+        self.define('_DISABLE_METIS', 1)
+        self.undefine('HAVE_METIS')
+        if self.options.enable_metis == True:
+            raise
+    else:
+        self.define('_HAVE_METIS', 1)
+        self.define('HAVE_METIS', 1)
+
+###############################################################################
+@Configure.conf
+def check_metis(self):
+    opts = self.options
+    if opts.enable_metis == False:
+        raise Errors.ConfigurationError('METIS disabled')
+    if opts.metis_libs is None:
+        opts.metis_libs = 'metis'
+    if opts.metis_libs:
+        self.check_metis_libs()
+    self.check_metis_headers()
+    self.check_metis_version()
+
+@Configure.conf
+def check_metis_libs(self):
+    opts = self.options
+    check_metis = partial(self.check_cc, uselib_store='METIS', mandatory=True)
+    if opts.embed_all or opts.embed_metis:
+        check = lambda lib: check_metis(stlib=lib)
+    else:
+        check = lambda lib: check_metis(lib=lib)
+    for lib in Utils.to_list(opts.metis_libs):
+        check(lib)
+
+@Configure.conf
+def check_metis_headers(self):
+    check = partial(self.check_cc, header_name='metis.h', uselib_store='METIS', use='METIS')
+    self.start_msg('Checking for header metis.h')
+    try:
+        if not check(mandatory=False):
+            if not check(includes=[osp.join(self.env.INCLUDEDIR, 'metis')], mandatory=False):
+                check(includes=[osp.join(self.env.OLDINCLUDEDIR, 'metis')], mandatory=True)
+    except:
+        self.end_msg('no', 'YELLOW')
+        raise
+    else:
+        self.end_msg('yes')
+
+@Configure.conf
+def check_metis_version(self):
+    fragment = r'''
+#include <stdio.h>
+#include <metis.h>
+int main(void){
+#ifdef METISTITLE
+/* metis 4 */
+    printf("METISTITLE: %s", METISTITLE);
+    return 0;
+#endif
+#if defined(METIS_VER_MAJOR) && defined(METIS_VER_MINOR) && defined(METIS_VER_SUBMINOR)
+    printf("METISVER: %d.%d.%d", METIS_VER_MAJOR, METIS_VER_MINOR, METIS_VER_SUBMINOR);
+    return 0;
+#endif
+/* unexpected */
+    return 1;
+}'''
+    self.start_msg('Checking metis version')
+    try:
+        ret = self.check_cc(fragment=fragment, use='METIS',
+                            mandatory=True, execute=True, define_ret=True)
+        mat4 = re.search('METISTITLE: *METIS *(?P<vers>[0-9]+\.[0-9]+\.\w+) ', ret)
+        mat5 = re.search('METISVER: *(?P<vers>[0-9]+\.[0-9]+\.\w+)', ret)
+        vers = (mat4 and mat4.group('vers')) or (mat5 and mat5.group('vers'))
+        major = int(vers.split('.')[0])
+        if major != 5:
+            self.end_msg('unsupported metis version: %s' % vers, 'RED')
+            raise Errors.ConfigurationError
+        self.env.METIS_ORDERING = 'metis'
+    except:
+        self.end_msg('can not get version', 'RED')
+        raise
+    else:
+        self.end_msg(vers)
diff -ruN MUMPS_5.1.2/waftools/parallel.py mumps-5.1.2-aster7/waftools/parallel.py
--- MUMPS_5.1.2/waftools/parallel.py	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/waftools/parallel.py	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,121 @@
+# coding=utf-8
+# --------------------------------------------------------------------
+# Copyright (C) 1991 - 2017 - EDF R&D - www.code-aster.org
+# This file is part of code_aster.
+#
+# code_aster is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# code_aster is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
+# --------------------------------------------------------------------
+
+import os
+import os.path as osp
+from functools import partial
+from waflib import Options, Configure, Errors, Logs, Utils
+
+
+def options(self):
+    self.load('compiler_c')
+    self.load('compiler_cxx')
+    self.load('compiler_fc')
+
+    group = self.get_option_group("Global options")
+    group.add_option('--enable-mpi', dest='parallel', action='store_true',
+                     help='Build a parallel version with mpi')
+    group.add_option('--enable-openmp', dest='openmp', action='store_true',
+                     help='Build a parallel version supporting OpenMP')
+    group.add_option('--disable-openmp', dest='openmp', action='store_false',
+                     help='Disable OpenMP')
+
+def configure(self):
+    opts = self.options
+    if opts.parallel:
+        # Configure.find_program uses first self.environ, then os.environ
+        self.environ.setdefault('CC', 'mpicc')
+        self.environ.setdefault('CXX', 'mpicxx')
+        self.environ.setdefault('FC', 'mpif90')
+    self.load_compilers()
+    self.check_compilers_version()
+    self.check_fortran_verbose_flag()
+    self.check_openmp()
+    self.check_fortran_clib()
+
+###############################################################################
+
+@Configure.conf
+def check_compilers_version(self):
+    self.start_msg('Checking for C compiler version')
+    self.end_msg(self.env.CC_NAME.lower() + ' ' + \
+                 '.'.join(Utils.to_list(self.env.CC_VERSION)))
+    # CXX_VERSION does not exist, c++ == c
+    self.start_msg('Checking for Fortran compiler version')
+    self.end_msg(self.env.FC_NAME.lower() + ' ' + \
+                 '.'.join(Utils.to_list(self.env.FC_VERSION)))
+
+@Configure.conf
+def load_compilers(self):
+    self.load('compiler_c')
+    self.load('compiler_cxx')
+    self.load('compiler_fc')
+    if self.options.parallel:
+        cc = self.env.CC[0]
+        cxx = self.env.CXX[0]
+        fc = self.env.FC[0]
+        check = partial(self.check_cfg, args='--showme:compile --showme:link -show',
+                        package='', uselib_store='MPI', mandatory=False)
+        # do not add flags given by cxx linker
+        if check(path=cc) and check(path=fc):
+            self.check_mpi()
+        if not self.get_define('HAVE_MPI'):
+            self.fatal("Unable to configure the parallel environment")
+        self.env.BUILD_PARALLEL = 1
+
+@Configure.conf
+def check_mpi(self):
+    self.check_cc(header_name='mpi.h', use='MPI', define_name='_USE_MPI')
+    if self.get_define('_USE_MPI'):
+        self.define('HAVE_MPI', 1)
+
+@Configure.conf
+def check_openmp(self):
+    opts = self.options
+    if opts.openmp is False:
+        self.msg('Checking for OpenMP flag', 'no', color='YELLOW')
+        return
+    try:
+        self.detect_openmp()
+    except (Errors.ConfigurationError, Errors.BuildError):
+        if opts.openmp is True:
+            raise
+        self.env.append_value('FCFLAGS_OPENMP', ['-fopenmp'])
+        self.env.append_value('FCLINKFLAGS_OPENMP', ['-fopenmp'])
+    if self.env.FCFLAGS_OPENMP:
+        self.env.BUILD_OPENMP = 1
+        self.define('_USE_OPENMP', 1)
+
+@Configure.conf
+def check_sizeof_mpi_int(self):
+    """Check size of MPI_Fint"""
+    if self.get_define('HAVE_MPI'):
+        fragment = '\n'.join([
+            '#include <stdio.h>',
+            '#include "mpi.h"',
+            'int main(void){',
+            '    MPI_Fint var;',
+            '    printf("%d", (int)sizeof(var));',
+            '    return 0;',
+            '}',
+            ''])
+        self.code_checker('MPI_INT_SIZE', self.check_cc, fragment,
+                          'Checking size of MPI_Fint integers',
+                          'unexpected value for sizeof(MPI_Fint): %(size)s',
+                          into=(4, 8), use='MPI')
diff -ruN MUMPS_5.1.2/waftools/parmetis.py mumps-5.1.2-aster7/waftools/parmetis.py
--- MUMPS_5.1.2/waftools/parmetis.py	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/waftools/parmetis.py	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,101 @@
+# coding=utf-8
+
+import os.path as osp
+import re
+from functools import partial
+from waflib import Options, Configure, Logs, Utils, Errors
+
+def options(self):
+    group = self.add_option_group('Parmetis library options')
+    group.add_option('--disable-parmetis', action='store_false', default=None,
+                    dest='enable_parmetis', help='Disable PARMETIS support')
+    group.add_option('--enable-parmetis', action='store_true', default=None,
+                    dest='enable_parmetis', help='Force PARMETIS support')
+    group.add_option('--parmetis-libs', type='string', dest='parmetis_libs',
+                    default=None,
+                    help='parmetis librairies to use when linking')
+    group.add_option('--embed-parmetis', dest='embed_parmetis',
+                    default=False, action='store_true',
+                    help='Embed PARMETIS libraries as static library')
+
+def configure(self):
+    try:
+        self.check_parmetis()
+    except Errors.ConfigurationError:
+        self.define('_DISABLE_PARMETIS', 1)
+        self.undefine('HAVE_PARMETIS')
+        if self.options.enable_parmetis == True:
+            raise
+    else:
+        self.define('_HAVE_PARMETIS', 1)
+        self.define('HAVE_PARMETIS', 1)
+
+###############################################################################
+@Configure.conf
+def check_parmetis(self):
+    opts = self.options
+    if opts.enable_parmetis == False:
+        raise Errors.ConfigurationError('PARMETIS disabled')
+    if opts.parmetis_libs is None:
+        opts.parmetis_libs = 'parmetis'
+    if opts.parmetis_libs:
+        self.check_parmetis_libs()
+    self.check_parmetis_headers()
+    self.check_parmetis_version()
+
+@Configure.conf
+def check_parmetis_libs(self):
+    opts = self.options
+    check_parmetis = partial(self.check_cc, uselib_store='PARMETIS', mandatory=True)
+    if opts.embed_all or opts.embed_parmetis:
+        check = lambda lib: check_parmetis(stlib=lib)
+    else:
+        check = lambda lib: check_parmetis(lib=lib)
+    for lib in Utils.to_list(opts.parmetis_libs):
+        check(lib)
+
+@Configure.conf
+def check_parmetis_headers(self):
+    check = partial(self.check_cc, header_name='parmetis.h', uselib_store='PARMETIS', use='PARMETIS')
+    self.start_msg('Checking for header parmetis.h')
+    try:
+        if not check(mandatory=False):
+            if not check(includes=[osp.join(self.env.INCLUDEDIR, 'parmetis')], mandatory=False):
+                check(includes=[osp.join(self.env.OLDINCLUDEDIR, 'parmetis')], mandatory=True)
+    except:
+        self.end_msg('no', 'YELLOW')
+        raise
+    else:
+        self.end_msg('yes')
+
+@Configure.conf
+def check_parmetis_version(self):
+    fragment = r'''
+#include <stdio.h>
+#include <parmetis.h>
+#include <metis.h>
+int main(void){
+#if defined(PARMETIS_MAJOR_VERSION) && defined(PARMETIS_MINOR_VERSION) && defined(PARMETIS_SUBMINOR_VERSION)
+    printf("PARMETISVER: %d.%d.%d", PARMETIS_MAJOR_VERSION, PARMETIS_MINOR_VERSION, PARMETIS_SUBMINOR_VERSION);
+    return 0;
+#endif
+/* unexpected */
+    return 1;
+}'''
+    self.start_msg('Checking parmetis version')
+    try:
+        ret = self.check_cc(fragment=fragment, use='PARMETIS',
+                            mandatory=True, execute=True, define_ret=True)
+        mat5 = re.search('PARMETISVER: *(?P<vers>[0-9]+\.[0-9]+\.\w+)', ret)
+        vers = (mat5 and mat5.group('vers'))
+        major = int(vers.split('.')[0])
+        if major not in (4,):
+            self.end_msg('unsupported metis version: %s' % vers, 'RED')
+            raise Errors.ConfigurationError
+        if major == 4:
+            self.env.PARMETIS_ORDERING = 'parmetis'
+    except:
+        self.end_msg('can not get version', 'RED')
+        raise
+    else:
+        self.end_msg(vers)
diff -ruN MUMPS_5.1.2/waftools/scotch.py mumps-5.1.2-aster7/waftools/scotch.py
--- MUMPS_5.1.2/waftools/scotch.py	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/waftools/scotch.py	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,128 @@
+# coding=utf-8
+# --------------------------------------------------------------------
+# Copyright (C) 1991 - 2017 - EDF R&D - www.code-aster.org
+# This file is part of code_aster.
+#
+# code_aster is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# code_aster is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
+# --------------------------------------------------------------------
+
+import os.path as osp
+from functools import partial
+from waflib import Options, Configure, Logs, Utils, Errors
+
+def options(self):
+    group = self.add_option_group("Scotch library options")
+    group.add_option('--disable-scotch', action='store_false', default=None,
+                   dest='enable_scotch', help='Disable SCOTCH support')
+    group.add_option('--enable-scotch', action='store_true', default=None,
+                   dest='enable_scotch', help='Force scotch support')
+    group.add_option('--scotch-libs', type='string',
+                   dest='scotch_libs', default=None,
+                   help='scotch librairies used when linking')
+    group.add_option('--embed-scotch', dest='embed_scotch',
+                    default=False, action='store_true',
+                    help='Embed SCOTCH libraries as static library')
+
+def configure(self):
+    try:
+        self.check_scotch()
+    except Errors.ConfigurationError:
+        self.define('_DISABLE_SCOTCH', 1)
+        self.undefine('HAVE_SCOTCH')
+        if self.options.enable_scotch == True:
+            raise
+    else:
+        self.define('HAVE_SCOTCH', 1)
+        self.undefine('_DISABLE_SCOTCH')
+
+###############################################################################
+
+@Configure.conf
+def check_scotch(self):
+    opts = self.options
+    if opts.enable_scotch == False:
+        raise Errors.ConfigurationError('SCOTCH disabled')
+
+    self.check_scotch_headers()
+    self.check_scotch_version()
+
+    if opts.scotch_libs is None:
+        if self.env.SCOTCH_VERSION and self.env.SCOTCH_VERSION[0] < 5:
+            opts.scotch_libs = 'scotch scotcherr scotcherrexit'
+        else:
+            # default or SCOTCH_VERSION >= 5
+            if self.env.HAVE_MPI:
+               opts.scotch_libs = 'esmumps ptscotch ptscotcherr ptscotcherrexit scotch scotcherr scotcherrexit'
+            else :
+               opts.scotch_libs = 'esmumps scotch scotcherr'
+
+    # code_aster v11.0.1: FICHE 016627
+    if 'scotchmetis' in opts.scotch_libs:
+        raise Errors.ConfigurationError('scotchmetis variant library is not compatible with code_aster')
+
+    if opts.scotch_libs:
+        self.check_scotch_libs()
+
+
+@Configure.conf
+def check_scotch_libs(self):
+    opts = self.options
+    check_scotch = partial(self.check_cc, mandatory=True, uselib_store='SCOTCH', use='MPI')
+    if opts.embed_all or opts.embed_scotch:
+        check_lib = lambda lib: check_scotch(stlib=lib)
+    else:
+        check_lib = lambda lib: check_scotch(lib=lib)
+    for lib in Utils.to_list(opts.scotch_libs):
+        check_lib(lib)
+
+@Configure.conf
+def check_scotch_headers(self):
+    self.start_msg('Checking for header scotch.h')
+    headers = 'stdio.h stdlib.h sys/types.h scotch.h'
+    try:
+        check = partial(self.check, header_name=headers,
+                        uselib_store='SCOTCH', uselib='SCOTCH MPI')
+
+        if not check(mandatory=False):
+            if not check(includes=[osp.join(self.env.INCLUDEDIR, 'scotch')], mandatory=False):
+                check(includes=[osp.join(self.env.OLDINCLUDEDIR, 'scotch')], mandatory=True)
+    except:
+        self.end_msg('no', 'YELLOW')
+        raise
+    else:
+        self.end_msg('yes')
+
+@Configure.conf
+def check_scotch_version(self):
+    # scotch.h may use int64_t without including <sys/types.h>
+    fragment = r'''
+#include <stdio.h>
+#include <sys/types.h>
+#include "scotch.h"
+
+int main(void){
+    printf("(%d, %d, %d)", (int)SCOTCH_VERSION, (int)SCOTCH_RELEASE,
+           (int)SCOTCH_PATCHLEVEL);
+    return 0;
+}'''
+    self.start_msg('Checking scotch version')
+    try:
+        ret = self.check_cc(fragment=fragment, use='SCOTCH', uselib_store='SCOTCH',
+                            mandatory=True, execute=True, define_ret=True)
+        self.env.append_value('SCOTCH_VERSION', eval(ret))
+    except:
+        self.end_msg('no', 'YELLOW')
+        raise
+    else:
+        self.end_msg( '.'.join([str(i) for i in eval(ret)]) )
diff -ruN MUMPS_5.1.2/wscript mumps-5.1.2-aster7/wscript
--- MUMPS_5.1.2/wscript	1970-01-01 01:00:00.000000000 +0100
+++ mumps-5.1.2-aster7/wscript	2020-10-23 11:16:48.000000000 +0200
@@ -0,0 +1,267 @@
+# coding=utf-8
+
+"""
+The waf scripts have been added by the Code_Aster team to configure the
+Makefile.inc of Mumps.
+
+See http://www.code-aster.org and https://code.google.com/p/waf for more informations.
+"""
+
+top = '.'
+out = 'build'
+
+import os
+import os.path as osp
+import sys
+import platform
+from itertools import chain
+from waflib import Configure, Utils, Logs
+
+def options(self):
+    ori_get_usage = self.parser.get_usage
+    def _usage():
+        return ori_get_usage() + os.linesep.join((
+        '',
+        'Environment variables:',
+        '  INCLUDES       : space separated list of directories extending the include'
+        ' path',
+        '  CC             : C compiler',
+        '  FC             : Fortran compiler',
+        '  INCLUDES       : extra include paths',
+        '  DEFINES        : extra preprocessor defines',
+        '  LINKFLAGS      : extra C linker options',
+        '  LIBPATH        : extra paths where to find libraries',
+        '  OPTLIB_FLAGS   : extra linker flags inserted after static libs '
+        '(for example when -Wl,start-group options are necessary)',
+        '  CFLAGS         : extra C compilation options',
+        '  FCFLAGS        : extra Fortran compilation options',
+        '  PREFIX         : default installation prefix to be used, '
+        'if no --prefix option is given.',
+        '',))
+    self.parser.get_usage = _usage
+
+    self.load('gnu_dirs')
+    self.load('python')
+
+    group = self.add_option_group('Global options')
+
+    self.load('parallel', tooldir='waftools')
+    self.load('mathematics', tooldir='waftools')
+    self.load('metis', tooldir='waftools')
+    self.load('parmetis', tooldir='waftools')
+    self.load('scotch', tooldir='waftools')
+
+    group.add_option('-E', '--embed-all', dest='embed_all',
+                    action='store_true', default=False,
+                    help='activate all embed-* options')
+    group.add_option('--install-tests', dest='install_tests',
+                    action='store_true', default=False,
+                    help='build and install the testcases files')
+
+def configure(self):
+    opts = self.options
+    self.env.install_tests = opts.install_tests
+    self.load('gnu_dirs')
+    self.add_os_flags('FLAGS')
+    self.add_os_flags('CFLAGS')
+    self.add_os_flags('FCFLAGS')
+    self.add_os_flags('LINKFLAGS')
+    self.add_os_flags('LIB')
+    self.add_os_flags('LIBPATH')
+    self.add_os_flags('STLIB')
+    self.add_os_flags('STLIBPATH')
+    self.add_os_flags('INCLUDES')
+    self.add_os_flags('DEFINES')
+    self.add_os_flags('OPTLIB_FLAGS')
+
+    # Add *LIBPATH paths to LD_LIBRARY_PATH
+    libpaths = list(chain(*[Utils.to_list(self.env[key]) for key in self.env.table
+                            if 'libpath' in key.lower()]))
+    ldpaths = [p for p in os.environ.get('LD_LIBRARY_PATH', '').split(os.pathsep)]
+    paths =  libpaths + ldpaths
+    os.environ['LD_LIBRARY_PATH'] = os.pathsep.join(p for p in paths if p)
+
+    self.load('ext_aster', tooldir='waftools')
+    self.load('parallel', tooldir='waftools')
+    self.load('mathematics', tooldir='waftools')
+    self.load('metis', tooldir='waftools')
+    if self.env.HAVE_MPI:
+       self.load('parmetis', tooldir='waftools')
+    self.load('scotch', tooldir='waftools')
+
+    self.check_linkflags()
+    self.check_cflags()
+    self.check_fcflags()
+
+    self.check_cc(uselib_store='SYS', lib='dl')
+    self.check_cc(uselib_store='SYS', lib='util')
+    self.check_cc(uselib_store='SYS', lib='pthread')
+    if not self.env.HAVE_MPI:
+        self.env.INCS = '$(INCSEQ)'
+        self.env.LIBS = '$(LIBSEQ)'
+        self.env.LIBSEQNEEDED = 'libseqneeded'
+    else:
+        self.env.INCS = '$(INCPAR)'
+        self.env.LIBS = '$(LIBPAR)'
+    self.env.append_value('ORDERINGS', 'pord')
+    if self.env.LIB_METIS:
+        self.env.append_unique('ORDERINGS', [self.env.METIS_ORDERING])
+        self.env.append_unique('DEFINES', [self.env.METIS_ORDERING])
+    if self.env.HAVE_MPI:
+        if self.env.LIB_PARMETIS:
+           self.env.append_unique('ORDERINGS', [self.env.PARMETIS_ORDERING])
+           self.env.append_unique('DEFINES', [self.env.PARMETIS_ORDERING])
+    if self.env.LIB_SCOTCH:
+        self.env.append_value('ORDERINGS', 'scotch')
+        if self.env.HAVE_MPI:
+           self.env.append_value('ORDERINGS', 'ptscotch')
+
+@Configure.conf
+def check_cflags(self):
+    self.start_msg('Getting C compiler flags')
+    if platform.machine() in 'x86_64' :
+       self.env.append_unique('CFLAGS', ['-fPIC', '-O'])
+    else:
+       self.env.append_unique('CFLAGS', ['-fPIC', '-O', '-DINTSIZE32'])
+    self.end_msg(self.env['CFLAGS'])
+
+@Configure.conf
+def check_fcflags(self):
+    self.check_fortran()
+    self.check_fortran_dummy_main()
+    if 'MAIN_' in self.env.FC_MAIN:
+        # for examples/c_example unittest
+        self.env.append_unique('CFLAGS', ['-DMAIN_COMP'])
+    self.check_fortran_mangling()
+    if self.env.FORTRAN_MANGLING:
+        underscore = self.env.FORTRAN_MANGLING[0] + self.env.FORTRAN_MANGLING[1]
+        if underscore:
+            self.env.append_value('DEFINES', 'Add' + underscore)
+        if self.env.FORTRAN_MANGLING[2] == 'upper':
+            self.env.append_value('DEFINES', 'UPPER')
+    self.start_msg('Getting Fortran compiler flags')
+    if platform.machine() in 'x86_64' :
+       self.env.append_unique('FCFLAGS', ['-fPIC', '-O', '-DPORD_INTSIZE64'])
+    else:
+       self.env.append_unique('FCFLAGS', ['-fPIC', '-O'])
+    self.end_msg(self.env['FCFLAGS'])
+
+@Configure.conf
+def check_linkflags(self):
+    opts = self.options
+    if sys.platform != 'darwin':
+        self.env.append_unique('LINKFLAGS', ['-Wl,--export-dynamic'])
+    else:
+        # '--export-dynamic' is '-export_dynamic' in OS X linker
+        # http://stackoverflow.com/questions/21279036/what-is-clangs-equivalent-to-rdynamic-gcc-flag
+        self.env.append_unique('LINKFLAGS', ['-Wl,-export_dynamic'])
+
+    if 'ifort' in self.env.FC_NAME.lower():
+        self.env.append_value('LINKFLAGS_fcprogram', ['-nofor_main'])
+        if opts.embed_all:
+            self.env.append_value('LINKFLAGS_fcprogram', ['-static-intel'])
+            if self.get_define('HAVE_MPI'):
+                self.env.append_value('LINKFLAGS_fcprogram', ['-static_mpi'])
+
+################################################################################
+def build(self):
+    self.load('ext_aster', tooldir='waftools')
+    if self.cmd == 'clean':
+        return clean(self)
+    mkn = self.path.make_node
+    makeinc = mkn('Makefile.inc')
+    self(
+        name   = 'create_makefile_inc',
+        rule   = build_makefile,
+        vars   = ['AR', 'ARFLAGS',
+                  'DEFINES', 'INCLUDES',
+                  'CC', 'CFLAGS', 'FC', 'FCFLAGS', 'FCFLAGS_OPENMP',
+                  'LINK_FC', 'LINKFLAGS', 'LINKFLAGS_OPENMP', 'LINKFLAGS_CLIB',
+                  'LIBPATH',
+                  'LIB_SCOTCH', 'LIB_METIS', 'LIB_PARMETIS', 'LIB_MATH', 'LIB_SYS',
+                  'STLIB_SCOTCH', 'STLIB_METIS', 'STLIB_PARMETIS', 'STLIB_MATH', 'STLIB_SYS',
+                  'OPTLIB_FLAGS', 'OPTLIB_FLAGS_MATH',
+                  # Makefile variables
+                  'INCS', 'LIBS', 'LIB_SCALAPACK',
+                  'LIBSEQNEEDED', 'ORDERINGS'],
+        source = 'Makefile.inc.in',
+        target = makeinc,
+        always = True,
+        update_outputs = True,  # because target is written in src
+    )
+    libs = [mkn('lib/lib%s.a' % i) for i in \
+            ('smumps', 'dmumps', 'cmumps', 'zmumps', 'mumps_common', 'pord')]
+    if not self.env.HAVE_MPI:
+        libs.append(mkn('libseq/libmpiseq.a'))
+    bins = []
+    datas = []
+    if self.env.install_tests:
+        bins = [mkn('examples/%ssimpletest' % i) for i in 'sdcz']
+        bins.append(mkn('examples/c_example'))
+        datas = [mkn(i) for i in ('examples/input_simpletest_cmplx',
+                                  'examples/input_simpletest_real',
+                                  'examples/README')]
+    self(
+        name   = 'make_mumps_libs',
+        rule   = call_make,
+        source = makeinc,
+        target = libs + bins + datas,
+        update_outputs = True,  # because targets are built in src
+        after  = 'create_makefile_inc',
+    )
+    self.install_files('${PREFIX}/lib', libs)
+    if self.env.install_tests:
+        self.install_files('${PREFIX}/share/examples', bins, chmod=Utils.O755)
+        self.install_files('${PREFIX}/share/examples', datas)
+    get_srcs = self.path.get_src().ant_glob
+    self.install_files('${PREFIX}/include', get_srcs('include/*.h'))
+    self.install_files('${PREFIX}/include_seq', get_srcs('libseq/mpi*.h'))
+
+def build_makefile(self):
+    """Change variables to be inserted in the Makefile.inc.in template,
+    change text and write Makefile.inc"""
+    content = self.inputs[0].read()
+    Logs.debug("changing '%s'..." % self.inputs[0])
+    for varn in self.vars:
+        fmt = None
+        prefix = None
+        if varn in ('DEFINES', 'ORDERINGS'):
+            fmt = self.env.DEFINES_ST
+        elif varn == 'INCLUDES':
+            fmt = self.env.CPPPATH_ST
+        elif varn == 'LIBPATH':
+            fmt = self.env.LIBPATH_ST
+        elif varn.startswith('LIB_'):
+            fmt = self.env.LIB_ST
+            prefix = self.env.SHLIB_MARKER
+        elif varn.startswith('STLIB_'):
+            fmt = self.env.LIB_ST
+            prefix = self.env.STLIB_MARKER
+        if fmt:
+            value = ' '.join([fmt % i for i in self.env[varn]])
+        else:
+            value = self.env.get_flat(varn)
+        if prefix and value.strip():
+            value = prefix + ' ' + value
+        #print("%s=%r" % (varn, value))
+        content = content.replace("?%s?" % varn, value)
+    #assert '?' not in content
+    Logs.debug("writing '%s'" % self.outputs[0])
+    self.outputs[0].write(content)
+    return 0
+
+def call_make(self):
+    """Call the standard Mumps build"""
+    from waflib.Options import options as opts
+    inc = self.inputs[0]
+    path = osp.dirname(inc.get_src().abspath())
+    cmd = "cd %s ; make all -j %s" % (path, opts.jobs)
+    ret = self.exec_command(cmd)
+    return ret
+
+def clean(self):
+    root = self.path.abspath()
+    inc = osp.join(root, 'Makefile.inc')
+    if osp.isfile(inc):
+        self.exec_command('make clean')
+        os.remove(inc)
