{% set name = "libmed" %}
{% set version = "4.1.1.6" %}
{% set build = 0 %}
{% set sha256 = "d22900603b69947553afe17416569edc41a95e69f989552e44c5143e4bb6025a" %}

# ensure mpi is defined (needed for conda-smithy recipe-lint)
{% set mpi = mpi or 'nompi' %}

{% if mpi == 'nompi' %}
# prioritize nompi variant via build number
{% set build = build + 100 %}
{% endif %}

# prioritize release over debug
{% if build_type == 'release' %}
{% set build = build + 200 %}
{% endif %}

# Per https://conda-forge.org/docs/maintainer/knowledge_base.html#preferring-a-provider-usually-nompi
# add build string so packages can depend on
# mpi or nompi variants explicitly:
# `pkg * mpi_mpich_*` for mpich
# `pkg * mpi_*` for any mpi
# `pkg * nompi_*` for no mpi
{% if mpi != 'nompi' %}
{% set mpi_prefix = "mpi_" + mpi %}
{% else %}
{% set mpi_prefix = "nompi" %}
{% endif %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: https://github.com/Krande/med-copy/archive/refs/tags/{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: {{ build }}
  skip: true  # [(osx or win) and mpi != "nompi"]
  string: "py{{ CONDA_PY }}_{{ mpi_prefix }}_{{ build_type }}_h{{ PKG_HASH }}_{{ build }}"
  run_exports:
    - {{ pin_subpackage(name, 'x.x') }}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}  # [not win]
    - swig >=4.0.2
    - cmake
    - ninja                               # [win]
    - make                                # [unix]
    - python                              # [build_platform != target_platform]
    - cross-python_{{ target_platform }}  # [build_platform != target_platform]
  host:
    - python
    - hdf5 {{ hdf5 }} {{ mpi_prefix }}*{{ build_type }}*
    - zlib
    - {{ mpi }}  # [mpi != "nompi"]
  run:
    - python
    - {{ mpi }}  # [mpi != "nompi"]
    - {{ pin_compatible('hdf5', max_pin='x.x') }}

test:
  requires:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
  files:
    - tests/test_symbols.bat  # [win]
    - tests/test1             # [win]
  imports:
    - med
  commands:
    - test -f ${PREFIX}/lib/libmed${SHLIB_EXT}                   # [unix]
    - nm ${PREFIX}/lib/libmedC.so | grep MEDlibraryNumVersion    # [linux]
    - nm ${PREFIX}/lib/libmedfwrap.so | grep mlcnlc_             # [linux]
    - tests/test_symbols.bat                                     # [win]
    - tests/test1/build.bat                                      # [win]

about:
  home: https://www.salome-platform.org/user-section/about/med
  license: LGPL-3.0-only
  license_family: LGPL
  license_file: COPYING
  summary: 'MED - interoperable format for data interchange between mesh based solvers.'
  description: |
    The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.
  doc_url: http://www.salome-platform.org/
  dev_url: https://git.salome-platform.org/gitweb/?p=modules/med.git;a=summary

extra:
  recipe-maintainers:
    - Krande
    - ldallolio
    - looooo
    - ldallolio-irt
