{% set name = "libmed" %}
{% set version = "4.1.1" %}
{% set build = 12 %}
{% set sha256 = "fe1e80c836150ff27049b291fe2f9a11eda9ef9831311df9e39ba16a63c392a0" %}

# ensure mpi is defined (needed for conda-smithy recipe-lint)
{% set mpi = mpi or 'nompi' %}

{% if mpi == 'nompi' %}
# prioritize nompi variant via build number
{% set build = build + 100 %}
{% endif %}

# prioritize release over debug
{% if build_type == 'release' %}
{% set build = build + 200 %}
{% endif %}

package:
  name: {{ name }}
  version: {{ version }}

source:
 # url: https://files.salome-platform.org/Salome/medfile/med-{{ version }}.tar.gz # blacklisting conda forge
  url: https://github.com/Krande/med-copy/archive/refs/tags/{{ version }}.tar.gz
  sha256: {{ sha256 }}
  patches:
    # Part of this patch is required to add a few system definitions which
    # should indicate that they are using the 1.10 API not the 1.6 API
    # https://github.com/HDFGroup/hdf5/issues/3797
    - patches/ignore-hdf5-bounds-check-cmake.patch
    - patches/ignore-hdf5-bounds-check-source.patch
#    - patches/disable-fortran.patch  # [win]
    - patches/do_not_modify_windows_path.patch
    - patches/install-in-runtime-and_archive.patch
    # without this patch, OSX finds the system python since it is a newer version
    # I (hmaarrfk) am about 90% sure it is because SWIG + CMake 3.12 FindPython + OSX
    # has some bugs... so for OSX (and linux), we just fallback to the standard
    # build process
    - patches/cmake-modern-python.patch  # [win]
    - patches/do-not-make-symlinks-on-windows.patch
    - patches/link-privately.patch
    - patches/fix_flang_fortran.patch     # [win]
    - patches/fix_medfwrap_symbols.patch  # [win]

build:
  number: {{ build }}
  skip: true  # [(osx or win) and mpi != "nompi"]
  # Per https://conda-forge.org/docs/maintainer/knowledge_base.html#preferring-a-provider-usually-nompi
  # add build string so packages can depend on
  # mpi or nompi variants explicitly:
  # `pkg * mpi_mpich_*` for mpich
  # `pkg * mpi_*` for any mpi
  # `pkg * nompi_*` for no mpi

  {% if mpi != 'nompi' %}
  {% set mpi_prefix = "mpi_" + mpi %}
  {% else %}
  {% set mpi_prefix = "nompi" %}
  {% endif %}
  string: "py{{ CONDA_PY }}_{{ mpi_prefix }}_{{ build_type }}_h{{ PKG_HASH }}_{{ build }}"
  run_exports:
    - {{ pin_subpackage(name, 'x.x') }} *{{ mpi_prefix }}*{{ build_type}}*

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}  # [not win]
    - swig >=4.0.2
    - cmake
    - ninja                               # [win]
    - make                                # [unix]
    - python                              # [build_platform != target_platform]
    - cross-python_{{ target_platform }}  # [build_platform != target_platform]
  host:
    - python
    - hdf5 {{ hdf5 }} {{ mpi_prefix }}*{{ build_type }}*
    - zlib
    - {{ mpi }}  # [mpi != "nompi"]
  run:
    - python
    - {{ mpi }}  # [mpi != "nompi"]
    - {{ pin_compatible('hdf5', max_pin='x.x') }}

test:
  requires:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
  files:
    - test_symbols.bat  # [win]
  imports:
    - med
  commands:
    - test -f ${PREFIX}/lib/libmed${SHLIB_EXT}                   # [unix]
    - nm ${PREFIX}/lib/libmedC.so | grep MEDlibraryNumVersion    # [linux]
    - test_symbols.bat                                           # [win]

about:
  home: https://www.salome-platform.org/user-section/about/med
  license: LGPL-3.0-only
  license_family: LGPL
  license_file: COPYING
  summary: 'MED : interoperable format for data interchange between mesh based solvers.'
  description: |
    The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.
  doc_url: http://www.salome-platform.org/
  dev_url: https://git.salome-platform.org/gitweb/?p=modules/med.git;a=summary

extra:
  recipe-maintainers:
    - Krande
    - ldallolio
    - looooo
    - ldallolio-irt
