context:
  version: 4.1.1
  name: libmed
  sha256: fe1e80c836150ff27049b291fe2f9a11eda9ef9831311df9e39ba16a63c392a0

package:
  name: "${{ name }}"
  version: "${{ version }}"

source:
  - file_name: "${{ name }}_${{ version }}.tar.gz"
    url: https://github.com/Krande/med-copy/archive/refs/tags/${{ version }}.tar.gz
    sha256: ${{ sha256 }}
    patches:
      # Part of this patch is required to add a few system definitions which
      # should indicate that they are using the 1.10 API not the 1.6 API
      # https://github.com/HDFGroup/hdf5/issues/3797
      - patches/ignore-hdf5-bounds-check-cmake.patch
      - patches/ignore-hdf5-bounds-check-source.patch
      - patches/disable-fortran.patch  # [win]
      - patches/do_not_modify_windows_path.patch
      - patches/install-in-runtime-and_archive.patch
      # without this patch, OSX finds the system python since it is a newer version
      # I (hmaarrfk) am about 90% sure it is because SWIG + CMake 3.12 FindPython + OSX
      # has some bugs... so for OSX (and linux), we just fallback to the standard
      # build process
      - patches/cmake-modern-python.patch  # [win]
      - patches/do-not-make-symlinks-on-windows.patch


build:
  number: 6
  string: aster_py${{ CONDA_PY }}_mpi_${{mpi}}_np{{CONDA_NPY}}h${{ PKG_HASH }}_${{ PKG_BUILDNUM }} # [mpi != "nompi"]
  string: aster_py${{ CONDA_PY }}_nompi_np${{CONDA_NPY}}h${{ PKG_HASH }}_${{ PKG_BUILDNUM }}     # [mpi == "nompi"]


requirements:
  build:
    - ${{ compiler('c') }}
    - ${{ compiler('cxx') }}
    - if: not win
      then:
        - ${{ compiler('fortran') }}
        - make
    - if: win
      then: ninja
    - cmake >=3.8
    - swig >=4.0.2

  host:
    - python
    - "hdf5 ${{ hdf5 }} *${{ mpi }}*"
    - astor
    - pybind11-stubgen
    - zlib
    - if: cmp(mpi, "nompi") == 0
      then:
        - "${{ mpi }}"

  run:
    - python
    - hdf5 ${{ hdf5 }} *${{ mpi }}*
    - zlib
    - "${{ mpi }}"                 # [mpi != "nompi"]

tests:
  - if: unix
    then:
      - script:
        - test -f ${PREFIX}/lib/libmed${SHLIB_EXT}
  - if: linux
    then:
      - script:
        - nm ${PREFIX}/lib/libmed.so | grep MEDlibraryNumVersion
  - python:
      imports:
        - med


about:
  homepage: https://www.salome-platform.org/user-section/about/med
  license: LGPL-3.0-only
  license_family: LGPL
  license_file: LICENSE.txt
  summary: 'MED : interoperable format for data interchange between mesh based solvers.'
  description: |
    The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.
  documentation: http://www.salome-platform.org/
  repository: https://git.salome-platform.org/gitweb/?p=modules/med.git;a=summary

extra:
  recipe-maintainers:
    - ldallolio
    - looooo
    - ldallolio-irt