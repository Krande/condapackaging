schema_version: 1

context:
  name: libmed
  version: 4.1.1.6
  build_base: 0
  mpi_num: ${{ 100 if mpi == 'nompi' else 0 }}
  build: ${{ (200 if build_type == 'release' else 0) + int_type|int + mpi_num|int + build_base|int }}
  mpi_prefix: nompi

package:
  name: ${{ name }}
  version: ${{ version }}

source:
  url: https://github.com/Krande/med-copy/archive/refs/tags/${{ version }}.tar.gz
  sha256: d22900603b69947553afe17416569edc41a95e69f989552e44c5143e4bb6025a

build:
  number: ${{ build }}
  script: bld.bat
  string: py${{ python | replace('.', '') }}_${{ mpi_prefix }}_${{ build_type }}_INT${{ int_type }}_h${{ hash }}_${{ build }}

requirements:
  build:
    - ${{ compiler('c') }}
    - ${{ compiler('cxx') }}
    - if: not win
      then: ${{ compiler('fortran') }}
    - swig ==4.2.1  # SWIG 4.3 is not ABI compatible. See https://github.com/conda-forge/libmed-feedstock/issues/74
    - cmake
    - if: win
      then: ninja
    - if: unix
      then: make
    - if: build_platform != target_platform
      then: python
    - if: build_platform != target_platform
      then: cross-python_${{ target_platform }}
  host:
    - python
    - hdf5 * ${{ mpi_prefix }}_${{ build_type }}*
    - zlib
    - if: "mpi != \"nompi\""
      then: ${{ mpi }}
  run:
    - python
    - if: "mpi != \"nompi\""
      then: ${{ mpi }}
    - ${{ pin_compatible('hdf5', upper_bound='x.x') }}
  run_exports:
    - ${{ pin_subpackage(name, upper_bound='x.x') }}

tests:
  - python:
      imports:
        - med
      pip_check: false
  - files:
      recipe:
        - if: win
          then: tests/
    requirements:
      run:
        - ${{ compiler('c') }}
        - ${{ compiler('cxx') }}
    script:
      - if: unix
        then: test -f ${PREFIX}/lib/libmed${SHLIB_EXT}
      - if: linux
        then: nm ${PREFIX}/lib/libmedC.so | grep MEDlibraryNumVersion
      - if: win
        then: tests/test_symbols.bat

about:
  license: LGPL-3.0-only
  license_file: COPYING
  summary: MED - interoperable format for data interchange between mesh based solvers.
  description: |
    The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.
  homepage: https://www.salome-platform.org/user-section/about/med
  repository: https://git.salome-platform.org/gitweb/?p=modules/med.git;a=summary
  documentation: http://www.salome-platform.org/

extra:
  recipe-maintainers:
    - Krande
    - ldallolio
    - looooo
    - ldallolio-irt
