schema_version: 1

context:
  name: libmed
  version: 4.1.1.6
  build_base: 0
  mpi_num: ${{ 100 if mpi == 'nompi' else 0 }}
  build: ${{ (200 if build_type == 'release' else 0) + int_type|int + mpi_num|int + build_base|int }}
  mpi_prefix: nompi

package:
  name: ${{ name }}
  version: ${{ version }}

source:
  url: https://github.com/Krande/med-copy/archive/refs/tags/${{ version }}.tar.gz
  sha256: d22900603b69947553afe17416569edc41a95e69f989552e44c5143e4bb6025a
#  sha256: fe1e80c836150ff27049b291fe2f9a11eda9ef9831311df9e39ba16a63c392a0
#  patches:
#    # Part of this patch is required to add a few system definitions which
#    # should indicate that they are using the 1.10 API not the 1.6 API
#    # https://github.com/HDFGroup/hdf5/issues/3797
#    - patches/ignore-hdf5-bounds-check-cmake.patch
#    - patches/ignore-hdf5-bounds-check-source.patch
#    - patches/disable-fortran.patch  # [win]
#    - patches/do_not_modify_windows_path.patch
#    - patches/install-in-runtime-and_archive.patch
#    # without this patch, OSX finds the system python since it is a newer version
#    # I (hmaarrfk) am about 90% sure it is because SWIG + CMake 3.12 FindPython + OSX
#    # has some bugs... so for OSX (and linux), we just fallback to the standard
#    # build process
#    - patches/cmake-modern-python.patch  # [win]
#    - patches/do-not-make-symlinks-on-windows.patch
#    - patches/link-privately.patch

build:
  number: ${{ build }}
  string: py${{ python | replace('.', '') }}_${{ mpi_prefix }}_${{ build_type }}_INT${{ int_type }}_h${{ hash }}_${{ build }}

requirements:
  build:
    - ${{ compiler('c') }}
    - ${{ compiler('cxx') }}
    - ${{ compiler('fortran') }}
    - swig ==4.2.1  # SWIG 4.3 is not ABI compatible. See https://github.com/conda-forge/libmed-feedstock/issues/74
    - cmake
    - if: win
      then: ninja
    - if: unix
      then: make
    - if: build_platform != target_platform
      then: python
    - if: build_platform != target_platform
      then: cross-python_${{ target_platform }}
  host:
    - python
    - hdf5 * ${{ mpi_prefix }}_${{ build_type }}*
    - zlib
    - if: "mpi != \"nompi\""
      then: ${{ mpi }}
  run:
    - python
    - if: "mpi != \"nompi\""
      then: ${{ mpi }}
    - ${{ pin_compatible('hdf5', upper_bound='x.x') }}
  run_exports:
    - ${{ pin_subpackage(name, upper_bound='x.x') }}

tests:
  - python:
      imports:
        - med
      pip_check: false
  - script:
      file: run_win_test.bat
      env:
        INT_TYPE: ${{ int_type }}
    files:
      recipe:
        - tests/
        - run_win_test.bat
    requirements:
      run:
        - ${{ compiler('c') }}
        - ${{ compiler('cxx') }}
        - python
  - script:
      - if: unix
        then: test -f ${PREFIX}/lib/libmed${SHLIB_EXT}
      - if: linux
        then: nm ${PREFIX}/lib/libmedC.so | grep MEDlibraryNumVersion


about:
  license: LGPL-3.0-only
  license_file: COPYING
  summary: MED - interoperable format for data interchange between mesh based solvers.
  description: |
    The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.
  homepage: https://www.salome-platform.org/user-section/about/med
  repository: https://git.salome-platform.org/gitweb/?p=modules/med.git;a=summary
  documentation: http://www.salome-platform.org/

extra:
  recipe-maintainers:
    - Krande
    - ldallolio
    - looooo
    - ldallolio-irt
