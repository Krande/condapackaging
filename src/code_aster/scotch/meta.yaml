{% set name = "scotch" %}
{% set version = "7.0.4" %}

{% set build = 2 %}

# recipe-lint fails if mpi is undefined
{% set mpi = mpi or 'nompi' %}
{% if mpi == "nompi" %}
# prioritize nompi via build number
{% set build = build + 100 %}
{% endif %}

# prioritize release over debug
{% if build_type == 'release' %}
{% set build = build + 200 %}
{% endif %}

{% if mpi != "nompi" %}
{% set mpi_prefix = "mpi_" + mpi %}
{% else %}
{% set mpi_prefix = "nompi" %}
{% endif %}

{% set build = build|int + int_type|int %}


package:
  name: {{ name }}-pkgs
  version: {{ version }}

source:
  fn: {{ name }}-v{{ version }}.tar.gz
  url: https://gitlab.inria.fr/scotch/scotch/-/archive/v{{ version }}/scotch-v{{ version }}.tar.gz
  sha256: 8ef4719d6a3356e9c4ca7fefd7e2ac40deb69779a5c116f44da75d13b3d2c2c3
  patches:
    - patches/0001-Remove-unconditional-testing.patch
    - patches/0002-add-COMPONENT-labels-for-easier-split-installation.patch
    - patches/0003-put-metis-headers-in-include-scotch.patch
    - patches/0004-fix-language-requirement.patch
    - patches/0005-use-external-dummysizes.patch
    - patches/0006-fix-ptesmumps.h.patch
    - patches/0007-fix-empty-union.patch
    - patches/0008-win-fix-ssize_t.patch
    - patches/0009-win-fix-context.c.patch  # [win]
    - patches/0010-win-fix-flex.patch
    - patches/0011-win-do-not-link-m.patch
    - patches/0012-win-fix-threads.patch
    - patches/0013-win-fix-graph-match-scan.patch
    - patches/0014-win-disable-fortran-test.patch
    - patches/0015-win-fix-unistd-time-include.patch

build:
  number: {{ build }}

outputs:
  - name: libscotch
    build:
      script: ${RECIPE_DIR}/build-scotch.sh  # [unix]
      script: "%RECIPE_DIR%\\bld-scotch.bat"  # [win]
      string: aster_{{ mpi_prefix }}_{{build_type}}_INT{{ int_type }}_h{{ PKG_HASH }}_{{ build }}
      run_exports:
        - {{ pin_subpackage('libscotch', max_pin='x.x.x') }} *{{ build_type}}*{{ int_type }}*
      ignore_run_exports:
        - {{ mpi }}       # [mpi != 'nompi']
        - llvm-openmp  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
        - {{ compiler('fortran') }}  # [not win]
        - clang                      # [win]
        - cmake
        - make          # [unix]
        - ninja         # [win]
        - {{ mpi }}     # [build_platform != target_platform and mpi != 'nompi']
        - bison <3.8    # [unix]
        - flex          # [unix]
        - winflexbison  # [win]
      host:
        - zlib
        - bzip2
        - xz
        - {{ mpi }}       # [mpi != 'nompi']
        - pthreads-win32  # [win]
      run:
        - zlib
        - pthreads-win32  # [win]

  - name: libptscotch
    build:
      skip: True  # [mpi == 'nompi']
      string: aster_{{ mpi_prefix }}_INT{{ int_type }}_h{{ PKG_HASH }}_{{ build }}
      script:
        - cmake --install ./build --component=libptscotch
      run_exports:
        - {{ pin_subpackage('libptscotch', max_pin='x.x.x') }}
    requirements:
      build:
        - cmake
        - {{ mpi }}  # [mpi == 'openmpi' and build_platform != target_platform and mpi != 'nompi']
      host:
        - {{ mpi }}       # [mpi != 'nompi']
      run:
        - {{ pin_subpackage("libscotch", exact=True) }}

    about:
      summary: 'PT-SCOTCH - (Parallel) Static Mapping, Graph, Mesh and Hypergraph Partitioning, and Parallel and Sequential Sparse Matrix Ordering Package'

  - name: scotch
    build:
      script: cmake --install ./build --component=scotch
      string: aster_{{ mpi_prefix }}_{{build_type}}_INT{{ int_type }}_h{{ PKG_HASH }}_{{ build }}
      run_exports:
        - {{ pin_subpackage('scotch', max_pin='x.x.x') }} *{{ build_type}}*{{ int_type }}*
      ignore_run_exports:
        - {{ mpi }}       # [mpi != 'nompi']
    requirements:
      build:
        - cmake
      host:
        # This is needed to get the correct package hash
        - {{ mpi }}       # [mpi != 'nompi']
      run:
        - {{ pin_subpackage('libscotch', exact=True) }}
    test:
      commands:
        - test -f "${PREFIX}/bin/gord"                                       # [unix]
        - if exist %PREFIX%\\Library\\bin\\gord.exe (exit 0) else (exit 1)   # [win]
        - test ! -f "${PREFIX}/bin/dgord"                                    # [unix]
        - if exist %PREFIX%\\Library\\bin\\dgord.exe (exit 1) else (exit 0)  # [win]

  - name: ptscotch
    build:
      skip: True  # [mpi == 'nompi']
      script: cmake --install ./build --component=ptscotch
      string: aster_{{ mpi_prefix }}_INT{{ int_type }}_h{{ PKG_HASH }}_{{ build }}
      run_exports:
        - {{ pin_subpackage('ptscotch', max_pin='x.x.x') }}
    requirements:
      build:
        - cmake
      host:
        # This is needed to get the correct package hash
        - {{ mpi }}       # [mpi != 'nompi']
      run:
        - {{ pin_subpackage('libptscotch', exact=True) }}
        - {{ pin_subpackage('scotch', exact=True) }}
    test:
      commands:
        - test -f "${PREFIX}/bin/gord"                                       # [unix]
        - if exist %PREFIX%\\Library\\bin\\gord.exe (exit 0) else (exit 1)   # [win]
        - test -f "${PREFIX}/bin/dgord"                                      # [unix]
        - if exist %PREFIX%\\Library\\bin\\dgord.exe (exit 0) else (exit 1)  # [win]
    about:
      summary: 'PT-SCOTCH - (Parallel) Static Mapping, Graph, Mesh and Hypergraph Partitioning, and Parallel and Sequential Sparse Matrix Ordering Package'

about:
  home: https://www.labri.fr/perso/pelegrin/scotch/
  license: CECILL-C
  license_file: doc/CeCILL-C_V1-en.txt
  summary: 'SCOTCH - Static Mapping, Graph, Mesh and Hypergraph Partitioning, and Parallel and Sequential Sparse Matrix Ordering Package'
  description: |
    Software package and libraries for sequential and parallel
    graph partitioning, static mapping and clustering, sequential
    mesh and hypergraph partitioning, and sequential and parallel
    sparse matrix block ordering.
  doc_url: http://gforge.inria.fr/docman/?group_id=248&dirid=326
  dev_url: https://gitlab.inria.fr/scotch/scotch

extra:
  recipe-maintainers:
    - basnijholt
    - dalcinl
    - minrk
    - davidbrochart
    - SylvainCorlay
    - Tobias-Fischer
    - matthiasdiener