name: ci-code-aster-batch

# bump 1
on:
  workflow_call:
    inputs:
      package_name:
        description: 'package name'
        type: string
        required: true
      boa:
        description: 'use boa'
        type: boolean
        required: false
        default: false
      debug_build:
        description: 'should produce a debug build'
        type: string
        required: false
        default: "False"
      pkg_dir:
        description: 'work dir'
        type: string
        required: false
        default: src
      work_dir:
        description: 'work dir'
        type: string
        required: false
        default: /home/runner/work
      conda_label:
        description: 'conda label'
        type: string
        required: true
      conda_user:
        description: 'conda user'
        type: string
        required: true
      conda_upstream_label:
        description: 'conda upstream label'
        type: string
        required: false
        default: None
      conda_upstream_user:
        description: 'conda upstream user'
        type: string
        required: false
        default: None
      python_versions:
        description: 'matrix type'
        type: string
        required: false
        default: "3.9,3.10,3.11"
      platforms:
        description: 'matrix type'
        type: string
        required: false
        default: "windows-latest,ubuntu-latest,macos-latest"
      variants:
        description: 'Variants compiled in parallel; <variant1_key>=<variant1_value>,<variant2_key>=<variant2_value>'
        type: string
        required: false
      use_quetz:
        description: 'use quetz server'
        type: string
        required: false
        default: False
      extra_build_args:
        description: 'extra build args'
        type: string
        required: false
        default: ""
      description:
        description: 'Package channel description (if using quetz)'
        type: string
        required: false
        default: "CondaPackaging Temp Channel"

env:
  PKG_DEBUG: ${{ inputs.debug_build }}
  CONDA_DIR: ${{ inputs.pkg_dir }}/${{ inputs.package_name }}
  WORK_DIR: ${{ inputs.work_dir }}
  ARTIFACTS_DIR: ${{ inputs.work_dir }}/artifacts
  CROOT_DIR: ${{ inputs.work_dir }}/build
  CLICOLOR_FORCE: "1"
  VARIANT_STR: ""
  CONDA_CHANNEL: ""

jobs:
  # run a preceding job to get the matrix only if matrix_str is None
  build_prep:
    uses: ./.github/workflows/conda-build-prep.yml
    with:
      python_versions: ${{ inputs.python_versions }}
      platforms: ${{ inputs.platforms }}
      variants: ${{ inputs.variants }}
      conda_label: ${{ inputs.conda_label }}
      conda_user: ${{ inputs.conda_user }}
      conda_upstream_label: ${{ inputs.conda_upstream_label }}
      conda_upstream_user: ${{ inputs.conda_upstream_user }}
      use_quetz: ${{ inputs.use_quetz }}
      description: ${{ inputs.description }}
    secrets: inherit

  build_conda:
    needs: [ build_prep ]
    name: ${{ inputs.package_name }}-${{ matrix.platform.short }}-${{ matrix.pyver }}-${{ matrix.variants.key }}=${{ matrix.variants.value }}
    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build_prep.outputs.final_matrix) }}
    steps:
      - uses: actions/checkout@v3

      - name: create variant_str (if exists)
        if: ${{ inputs.variants }}
        run: |
          python3 <<EOF
          import base64
          import os
          
          env_file = os.environ.get("GITHUB_ENV", None)
          decoded_bytes = base64.b64decode("${{ matrix.variants.var_str }}")
          decoded_str = decoded_bytes.decode("utf-8")
          
          with open(env_file, "a") as my_file:
            my_file.write(f"VARIANT_STR={decoded_str}\n")
          EOF

      - name: Download and extract MacOSX SDK
        if: ${{ runner.os == 'macOS' }}
        run: |
          curl -L https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX10.15.sdk.tar.xz | tar -xvJf - -C /Users/runner/work/

      - name: set ENV WORK_DIR
        run: |
          pwd
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "PKG_DIR=win-64" >> $GITHUB_ENV
            echo "WORK_DIR=D:/a/" >> $GITHUB_ENV
            echo "ARTIFACTS_DIR=D:/a/artifacts" >> $GITHUB_ENV
            echo "CROOT_DIR=D:/a/build" >> $GITHUB_ENV
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "PKG_DIR=osx-64" >> $GITHUB_ENV
            echo "WORK_DIR=/Users/runner/work" >> $GITHUB_ENV
            echo "ARTIFACTS_DIR=/Users/runner/work/artifacts" >> $GITHUB_ENV
            echo "CROOT_DIR=/Users/runner/work/build" >> $GITHUB_ENV
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "PKG_DIR=linux-64" >> $GITHUB_ENV
          fi

      - name: set quetz channel if using quetz or anaconda
        run: |
          if [[ ${{ inputs.use_quetz }} == 'True' ]]; then
            echo "CONDA_CHANNEL=${{ secrets.QUETZ_URL }}/get/${{ inputs.conda_label }}" >> $GITHUB_ENV
          else
            echo "CONDA_CHANNEL=${{ needs.build_prep.outputs.conda_channel }}" >> $GITHUB_ENV
          fi

      - uses: mamba-org/setup-micromamba@v1 # https://github.com/mamba-org/setup-micromamba
        with:
          environment-name: build-env
          cache-environment: true
          condarc: |
            remote_max_retries: 5
            remote_backoff_factor: 5
            conda-build:
              root-dir: ${{ env.CROOT_DIR }}
              output_folder: ${{ env.ARTIFACTS_DIR }}
              pkg_format: 2
              zstd_compression_level: 19
            channel_priority: strict
            channels:
              - ${{ env.CONDA_CHANNEL }}
              - conda-forge
          create-args: >-
            python=${{ matrix.pyver }}
            anaconda-client
            boa
            python-dotenv
            typer
            quetz-client
            conda-build=3.25

      - name: Install cpack-actions
        run: |
          python -m pip install .
        working-directory: src/cpack

      - name: try to remove swig on linux
        if: ${{ runner.os == 'Linux' }} # https://docs.github.com/en/actions/learn-github-actions/contexts#runner-context
        continue-on-error: true
        run: |
          sudo apt remove swig make
          sudo rm -r /usr/bin/swig4.0
          sudo rm -rf /usr/share/miniconda

      - name: make dirs
        run: |
          mkdir -p ${{ env.ARTIFACTS_DIR }}
          mkdir -p ${{ env.CROOT_DIR }}

      - name: build local packages
        run: |
          if [[ ${{ inputs.boa }} == true ]]; then
            boa build . --python ${{ matrix.pyver }} --croot ${{ env.CROOT_DIR }} --output-folder ${{ env.ARTIFACTS_DIR }} --pkg-format=2${{ inputs.extra_build_args }}
          else
            conda mambabuild . --python ${{ matrix.pyver }}${{ env.VARIANT_STR }}${{ inputs.extra_build_args }}
          fi
        working-directory: ${{ env.CONDA_DIR }}
        env:
          QUETZ_URL: ${{ secrets.QUETZ_URL }}

      - name: Upload packages to Quetz Server
        if: ${{ inputs.use_quetz == 'True' }}
        run: |
          cpack-quetz upload ${{ env.ARTIFACTS_DIR }} ${{ inputs.conda_label }}
        env:
          QUETZ_URL: ${{ secrets.QUETZ_URL }}
          QUETZ_API_KEY: ${{ secrets.QUETZ_API_KEY }}

      - name: upload to anaconda
        if: ${{ inputs.boa == false }}
        run: |
          pkg_dir="${{ env.ARTIFACTS_DIR }}/${{ env.PKG_DIR }}"
          noarch_dir="${{ env.ARTIFACTS_DIR }}/noarch"

          # Check if the regular directory exists
          if [ -d "$pkg_dir" ]; then
              # Check if there are any .conda files to upload in the regular directory
              if ls "$pkg_dir"/*.conda 1> /dev/null 2>&1; then
                  path="${pkg_dir}/*.conda"
                  anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload --force --user ${{ inputs.conda_user }} --label ${{ inputs.conda_label }} $path
              else
                  echo "No .conda files found in $pkg_dir, skipping upload."
              fi
          else
              echo "Regular directory does not exist, skipping upload."
          fi

          # Check if the noarch directory exists
          if [ -d "$noarch_dir" ]; then
              # Check if there are any .conda files to upload in the noarch directory
              if ls "$noarch_dir"/*.conda 1> /dev/null 2>&1; then
                  path="${noarch_dir}/*.conda"
                  anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload --force --user ${{ inputs.conda_user }} --label ${{ inputs.conda_label }} $path
              else
                  echo "No .conda files found in $noarch_dir, skipping upload."
              fi
          else
              echo "Noarch directory does not exist, skipping upload."
          fi
