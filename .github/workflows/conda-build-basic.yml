name: ci-code-aster-batch

# bump 1
on:
  workflow_call:
    inputs:
      package_name:
        description: 'package name'
        type: string
        required: true
      job_name:
        description: 'Name of job'
        type: string
        required: false
        default: ""
      arg_data:
        description: 'A base64 serialized dictionary with all relevant build args. Local build args will always override these.'
        type: string
        required: false
        default: ""
      pkg_dir:
        description: 'work dir'
        type: string
        required: false
        default: src
      work_dir:
        description: 'work dir'
        type: string
        required: false
        default: /home/runner/work
      conda_label:
        description: 'conda label'
        type: string
        required: true
      conda_user:
        description: 'conda user'
        type: string
        required: false
      conda_upstream_label:
        description: 'conda upstream label'
        type: string
        required: false
        default: None
      conda_upstream_user:
        description: 'conda upstream user'
        type: string
        required: false
        default: None
      python_versions:
        description: 'matrix type'
        type: string
        required: false
        default: "3.11"
      platforms:
        description: 'matrix type'
        type: string
        required: false
        default: "windows-latest,ubuntu-latest,macos-latest"
      variants:
        description: 'Variants compiled in parallel; <variant1_key>=<variant1_value>,<variant2_key>=<variant2_value>'
        type: string
        required: false
      use_quetz:
        description: 'use quetz server'
        type: string
        required: false
        default: False
      extra_build_args:
        description: 'extra build args'
        type: string
        required: false
        default: ""
      description:
        description: 'Package channel description (if using quetz)'
        type: string
        required: false
        default: "CondaPackaging Temp Channel"
      prep_script:
        description: 'script to run before build'
        type: string
        required: false
        default: ""
      use_intel_fortran:
        description: 'Install intel fortran'
        type: string
        required: false
        default: False
      build_selection:
        description: 'A comma separated list of jobs'
        type: string
        required: false
        default: ""
      env_vars:
        description: 'A comma separated list of env vars'
        type: string
        required: false
        default: ""
      use_devtools:
        description: 'Use devtools channel'
        type: string
        required: false
        default: False
env:
  CONDA_DIR: ${{ inputs.pkg_dir }}/${{ inputs.package_name }}
  WORK_DIR: ${{ inputs.work_dir }}
  ARTIFACTS_DIR: ${{ inputs.work_dir }}/artifacts
  CROOT_DIR: ${{ inputs.work_dir }}/build
  CLICOLOR_FORCE: "1"
  VARIANT_STR: ""
  CONDA_CHANNEL: ""
  EXTRA_BUILD_ARGS: ""
  CONDA_BUILD_DIR: ""
  SHELL_NAME: bash

jobs:
  should_run:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.evaluate_job.outputs.should_run }}
    steps:
      - name: Evaluate job
        id: evaluate_job
        shell: python
        env:
          BUILD_SELECTION: ${{ inputs.build_selection }}
          JOB_NAME: ${{ inputs.job_name }}
        run: |
          import os
          
          
          def set_output(name, value):
            with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                print(f'{name}={value}', file=fh)
          
          job_name = os.getenv('JOB_NAME', None)
          build_selection = os.getenv('BUILD_SELECTION', None)
          
          print(f'{job_name=}')
          
          if not build_selection:
              set_output("should_run", "true")
              exit(0)
          
          job_list = build_selection.split(',')
          print(f'{build_selection=}')
          print(f'{job_list=}')
          if "all" in job_list:
              if len(job_list) == 1:
                  print('job_list is 1')
                  set_output("should_run", "true")
                  exit(0)
              
              if f'!{job_name}' in job_list:
                  print(f'Job {job_name} is skipped')
                  set_output("should_run", "false")
                  exit(0)
              
              set_output("should_run", "true")
              exit(0)
              
          print('all at the bottom')
          if job_name in job_list:
              set_output("should_run", "true")
          else:
              set_output("should_run", "false")
              

  # run a preceding job to get the matrix only if matrix_str is None
  build_prep:
    needs: should_run
    if: ${{ needs.should_run.outputs.should_run == 'true' }}
    uses: ./.github/workflows/conda-build-prep.yml
    with:
      python_versions: ${{ inputs.python_versions }}
      platforms: ${{ inputs.platforms }}
      variants: ${{ inputs.variants }}
      conda_label: ${{ inputs.conda_label }}
      conda_user: ${{ inputs.conda_user }}
      conda_upstream_label: ${{ inputs.conda_upstream_label }}
      conda_upstream_user: ${{ inputs.conda_upstream_user }}
      use_quetz: ${{ inputs.use_quetz }}
      description: ${{ inputs.description }}
    secrets: inherit

  build_conda:
    needs: [ build_prep ]
    name: ${{ inputs.package_name }}-${{ matrix.platform.short }}-${{ matrix.pyver }}-${{ matrix.variants.value }}
    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build_prep.outputs.final_matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: pre script
        if: ${{ inputs.prep_script }}
        continue-on-error: true
        run: |
          ${{ inputs.prep_script }}

      - uses: awvwgk/setup-fortran@main # https://github.com/awvwgk/setup-fortran
        if: ${{ inputs.use_intel_fortran == 'True' }}
        id: setup-fortran
        with:
          compiler: intel
          version: '2024.1'

      - name: create variant_str (if exists)
        if: ${{ inputs.variants }}
        env:
          ENV_VARS_INPUT: ${{ inputs.env_vars }}
        run: |
          python3 <<EOF
          import base64
          import os
          
          env_file = os.environ.get("GITHUB_ENV", None)
          decoded_bytes = base64.b64decode("${{ matrix.variants.var_str }}")
          decoded_str = decoded_bytes.decode("utf-8")
          
          with open(env_file, "a") as my_file:
            my_file.write(f"VARIANT_STR={decoded_str}\n")
          
          input_env_vars = os.environ.get("ENV_VARS_INPUT", None)
          if input_env_vars:
            input_env_vars = input_env_vars.split(",")
            for env_var in input_env_vars:
              env_var = env_var.strip()
              if env_var:
                env_var_name, env_var_value = env_var.split("=")
                env_var_value = env_var_value.replace("__root__", os.environ["GITHUB_WORKSPACE"])
                with open(env_file, "a") as my_file:
                  my_file.write(f"{env_var_name}={env_var_value}\n")
          EOF

      - name: Evaluate Extra Build Args
        env:
          EXTRA_ARGS: ${{ inputs.extra_build_args }}
          WORKSPACE: ${{ github.workspace}}
        shell: python
        run: |
          import os
          import platform
          import pathlib
          
          
          def set_env(name, value):
              with open(os.environ['GITHUB_ENV'], 'a') as fh:
                  print(f'{name}={value}', file=fh)
          
          
          workspace_dir = pathlib.Path(os.getenv("WORKSPACE"))
          extra_args = os.getenv("EXTRA_ARGS")
          
          # Substitute __root__ with github workspace
          if extra_args != "":
              if platform.system() == "Windows":
                  new_args = []
                  for arg in extra_args.split(' '):
                        if "__root__" in arg:
                            # if it's a path, and it is using single quotes, replace with double quotes
                            new_args.append(arg.replace("'", '"'))
                        else:
                            new_args.append(arg)
                  extra_args = ' '.join(new_args)
              
              extra_args_str = extra_args.replace('__root__', workspace_dir.as_posix())
              set_env('EXTRA_BUILD_ARGS', extra_args_str)

      - name: Download and extract MacOSX SDK
        if: ${{ runner.os == 'macOS' }}
        run: |
          curl -L https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX10.15.sdk.tar.xz | tar -xvJf - -C /Users/runner/work/

      - name: Update SHELL_NAME if running windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo "SHELL_NAME=bash cmd.exe" >> $GITHUB_ENV

      - name: set ENV vars
        run: |
          pwd
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "PKG_DIR=win-64" >> $GITHUB_ENV
            echo "WORK_DIR=D:/a/" >> $GITHUB_ENV
            echo "ARTIFACTS_DIR=D:/a/artifacts" >> $GITHUB_ENV
            echo "CROOT_DIR=D:/a/build" >> $GITHUB_ENV
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "PKG_DIR=osx-64" >> $GITHUB_ENV
            echo "WORK_DIR=/Users/runner/work" >> $GITHUB_ENV
            echo "ARTIFACTS_DIR=/Users/runner/work/artifacts" >> $GITHUB_ENV
            echo "CROOT_DIR=/Users/runner/work/build" >> $GITHUB_ENV
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "PKG_DIR=linux-64" >> $GITHUB_ENV
          fi
          
          if [[ "${{ inputs.use_intel_fortran }}" == "True" ]]; then
            echo "USE_INTEL=True" >> $GITHUB_ENV
          fi

      - name: set quetz channel if using quetz or anaconda
        run: |
          if [[ ${{ inputs.use_quetz }} == 'True' ]]; then
            echo "CONDA_CHANNEL=${{ secrets.QUETZ_URL }}/get/${{ needs.build_prep.outputs.conda_upstream_label }}" >> $GITHUB_ENV
          else
            echo "CONDA_CHANNEL=${{ needs.build_prep.outputs.conda_channel }}" >> $GITHUB_ENV
          fi

      - name: use devtools channel
        if: ${{ inputs.use_devtools == 'True' }}
        run: |
          echo "EXTRA_CHANNEL=${{ secrets.QUETZ_URL }}/get/devtools" >> $GITHUB_ENV

      - uses: mamba-org/setup-micromamba@v1 # https://github.com/mamba-org/setup-micromamba
        with:
          environment-name: build-env
          cache-environment: true
          init-shell: ${{ env.SHELL_NAME }}
          condarc: |
            remote_max_retries: 5
            remote_backoff_factor: 5
            conda-build:
              root-dir: ${{ env.CROOT_DIR }}
              output_folder: ${{ env.ARTIFACTS_DIR }}
              pkg_format: 2
              zstd_compression_level: 19
            channel_priority: strict
            channels:
              - ${{ env.EXTRA_CHANNEL }}
              - ${{ env.CONDA_CHANNEL }}
              - conda-forge
          create-args: >-
            python=3.11
            anaconda-client
            boa
            python-dotenv
            typer
            quetz-client
            conda-build

      - name: Install cpack-actions
        run: |
          python -m pip install .
        working-directory: src/cpack

      # For some reason on linux, the runner swig is chosen over the conda swig
      - name: try to remove swig on linux
        if: ${{ runner.os == 'Linux' }} # https://docs.github.com/en/actions/learn-github-actions/contexts#runner-context
        continue-on-error: true
        run: |
          sudo apt remove swig make
          sudo rm -r /usr/bin/swig4.0
          sudo rm -rf /usr/share/miniconda

      - name: make dirs
        run: |
          mkdir -p ${{ env.ARTIFACTS_DIR }}
          mkdir -p ${{ env.CROOT_DIR }}

      - name: build local packages Windows
        if: ${{ runner.os == 'Windows' }}
        shell: cmd /E:on /C call {0}
        run: |
          conda mambabuild . --python ${{ matrix.pyver }}${{ env.VARIANT_STR }}${{ env.EXTRA_BUILD_ARGS }}
        working-directory: ${{ env.CONDA_DIR }}
        env:
          QUETZ_URL: ${{ secrets.QUETZ_URL }}

      - name: build local packages Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          conda mambabuild . --python ${{ matrix.pyver }}${{ env.VARIANT_STR }}${{ env.EXTRA_BUILD_ARGS }}
        working-directory: ${{ env.CONDA_DIR }}
        env:
          QUETZ_URL: ${{ secrets.QUETZ_URL }}

      - name: Upload packages to Quetz Server
        if: ${{ inputs.use_quetz == 'True' }}
        run: |
          cpack-quetz upload ${{ env.ARTIFACTS_DIR }} ${{ inputs.conda_label }} --force
        env:
          QUETZ_URL: ${{ secrets.QUETZ_URL }}
          QUETZ_API_KEY: ${{ secrets.QUETZ_API_KEY }}

      - name: upload to anaconda
        if: ${{ inputs.use_quetz == 'False' }}
        run: |
          cpack-anaconda ${{ env.ARTIFACTS_DIR }} ${{ inputs.conda_label }} ${{ inputs.conda_user }}
        env:
          CONDA_API_TOKEN: ${{ secrets.CONDA_API_TOKEN }}