name: ci-code-aster-batch

# bump 1
on:
  workflow_call:
    inputs:
      package_name:
        description: 'package name'
        type: string
        required: true
      boa:
        description: 'use boa'
        type: boolean
        required: true
      debug_build:
        description: 'should produce a debug build'
        type: string
        required: false
        default: "False"
      work_dir:
        description: 'work dir'
        type: string
        required: false
        default: /home/runner/work
      conda_label:
        description: 'conda label'
        type: string
        required: true
      conda_user:
        description: 'conda user'
        type: string
        required: true
      conda_upstream_label:
        description: 'conda upstream label'
        type: string
        required: false
        default: None
      conda_upstream_user:
        description: 'conda upstream user'
        type: string
        required: false
        default: None

env:
  CONDA_TOKEN: ${{ secrets.ANACONDA_DEV_TOKEN }}
  PKG_DEBUG: "False"
  CONDA_UPSTREAM_LABEL: ${{ inputs.conda_upstream_label }}
  CONDA_UPSTREAM_USER: ${{ inputs.conda_upstream_user }}

jobs:
  build_conda:
    name: ${{ inputs.package_name }}-${{ matrix.platform }}-${{ matrix.pyver }}
    runs-on: ${{ matrix.platform }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        pyver: [ "3.9", "3.10", "3.11" ]
        platform: [ ubuntu-latest ] #, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Check if conda upstream inputs are not None. If so set equal to output values
        run: |
            if [[ ${{ inputs.conda_upstream_label }} == "None" ]]; then
                echo "CONDA_UPSTREAM_LABEL=${{ inputs.conda_label }}" >> $GITHUB_ENV
            fi
            if [[ ${{ inputs.conda_upstream_user }} == "None" ]]; then
                echo "CONDA_UPSTREAM_USER=${{ inputs.conda_user }}" >> $GITHUB_ENV
            fi

      - uses: mamba-org/setup-micromamba@v1 # https://github.com/mamba-org/setup-micromamba
        with:
          environment-file: environment.conda.yml
          condarc: |
            remote_max_retries: 5
            remote_backoff_factor: 5
            conda-build:
              pkg_format: 2
              zstd_compression_level: 19
            channel_priority: strict
            channels:
              - ${{ env.CONDA_UPSTREAM_USER }}/label/${{ env.CONDA_UPSTREAM_LABEL }}
              - conda-forge
          create-args: >-
            python=${{ matrix.pyver }}

      - name: Check if debug build
        run: |
          if [[ ${{ inputs.debug_build }} == "True" ]]; then
            echo "PKG_DEBUG=True" >> $GITHUB_ENV
          fi

      - name: try to remove swig
        continue-on-error: true
        run: |
          sudo apt remove swig make
          sudo rm -r /usr/bin/swig4.0
          sudo rm -rf /usr/share/miniconda

      - name: make dirs
        run: |
          mkdir -p ${{ inputs.work_dir }}/artifacts
          mkdir -p ${{ inputs.work_dir }}/build

      - name: build local packages
        run: |
          if [[ ${{ inputs.boa }} == true ]]; then
            boa build . --python ${{ matrix.pyver }} --croot ${{ inputs.work_dir }}/build --output-folder ${{ inputs.work_dir }}/artifacts --pkg-format=2
          else
            conda mambabuild . --python ${{ matrix.pyver }} --croot ${{ inputs.work_dir }}/build --output-folder ${{ inputs.work_dir }}/artifacts
          fi
        working-directory: src/code_aster/${{ inputs.package_name }}

      - name: set ENV WORK_DIR
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "PKG_DIR=win-64" >> $GITHUB_ENV
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "PKG_DIR=osx-64" >> $GITHUB_ENV
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "PKG_DIR=linux-64" >> $GITHUB_ENV
          fi

      - name: upload to anaconda
        run: |
          path="${{ inputs.work_dir }}/artifacts/${{ env.PKG_DIR }}/*.conda"
          if [ "${{ matrix.platform }}" == 'Windows' ]; then
            path="'$path'"
          fi
          anaconda -t ${{ env.CONDA_TOKEN }} upload --force --user ${{ inputs.conda_user }} --label ${{ inputs.conda_label }} $path

