name: ci-code-aster-batch

# bump 1
on:
  workflow_call:
    inputs:
      package_name:
        description: 'package name'
        type: string
        required: true
      conda_channel:
        description: 'conda channel name'
        type: string
        required: true
      python_versions:
        description: 'matrix type'
        type: string
        required: false
        default: "3.12"
      platforms:
        description: 'matrix type'
        type: string
        required: false
        default: "windows-latest,ubuntu-latest,macos-latest"
      variants:
        description: 'Variants compiled in parallel; <variant1_key>=<variant1_value>,<variant2_key>=<variant2_value>'
        type: string
        required: false
      upload_conda:
        description: 'Upload to conda server'
        type: string
        required: false
        default: False
      extra_build_args:
        description: 'extra build args'
        type: string
        required: false
        default: ""
      use_intel_fortran:
        description: 'Install intel fortran'
        type: string
        required: false
        default: False
      build_selection:
        description: 'A comma separated list of jobs'
        type: string
        required: false
        default: ""
      env_vars:
        description: 'A comma separated list of env vars'
        type: string
        required: false
        default: ""

env:
  CLICOLOR_FORCE: "1"
  VARIANT_STR: ""
  EXTRA_BUILD_ARGS: ""
  CONDA_BUILD_DIR: ""
  SHELL_NAME: bash

jobs:
  build_prep:
    runs-on: ubuntu-latest
    outputs:
      final_matrix: ${{ steps.job-matrix-builder.outputs.final_matrix }}
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'

      - uses: ./.github/actions/job-eval
        id: should_run
        with:
          build_selection: ${{ inputs.build_selection }}
          job_name: ${{ inputs.package_name }}

      - uses: ./.github/actions/job-matrix-builder
        id: job-matrix-builder
        with:
          python_versions: ${{ inputs.python_versions }}
          platforms: ${{ inputs.platforms }}
          variants: ${{ inputs.variants }}

  build_conda:
    needs: [ build_prep ]
    name: ${{ inputs.package_name }}-${{ matrix.platform.short }}-${{ matrix.pyver }}-${{ matrix.variants.value }}
    if: ${{ needs.build_prep.outputs.should_run == 'true' }}
    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build_prep.outputs.final_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '2'

      - uses: ./.github/actions/job-prep
        with:
          env_vars: ${{ inputs.env_vars }}
          variants: ${{ inputs.variants }}
          variants_base64_str: ${{ matrix.variants.var_str }}
          extra_build_args: ${{ inputs.extra_build_args }}

      - uses: ./.github/actions/install-intel-fortran
        if: ${{ inputs.use_intel_fortran == 'True' && runner.os == 'Windows' }}
        with:
          version: 2025.0.0

      - uses: prefix-dev/setup-pixi@v0.8.0
        with:
          pixi-version: v0.34.0
          environments: "boa"
          cache: true

      - name: Update condarc
        run: |
          pixi run cpack-config --root-dir=${{ env.CROOT_DIR }} --artifacts-dir=${{ env.ARTIFACTS_DIR }}

      - name: Add channel if not already exist
        run: |
          pixi run -e boa cpack-quetz create-channel ${{ inputs.conda_channel }}

      - name: build local packages
        run: |
          pixi run -e boa ${{ inputs.package_name }} --python ${{ matrix.pyver }}${{ env.VARIANT_STR }}${{ env.EXTRA_BUILD_ARGS }} -c ${{ secrets.QUETZ_URL }}/get/${{ inputs.conda_channel }}

      - name: Upload packages to Quetz Server
        if: ${{ inputs.upload_conda == 'True' }}
        run: |
          pixi run -e boa cpack-quetz upload ${{ env.ARTIFACTS_DIR }} ${{ inputs.conda_channel }} --force --create-channel-if-not-exists
        env:
          QUETZ_URL: ${{ secrets.QUETZ_URL }}
          QUETZ_API_KEY: ${{ secrets.QUETZ_API_KEY }}