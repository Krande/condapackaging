name: ci-code-aster-ctest

on:
  workflow_call:
    inputs:
      conda_channel:
        description: 'conda label'
        type: string
        required: true
      code_aster_version:
        description: 'code_aster version'
        type: string
        required: true
      python_versions:
        description: 'matrix type'
        type: string
        required: false
        default: "3.9,3.10,3.11"
      platforms:
        description: 'matrix type'
        type: string
        required: false
        default: "windows-latest,ubuntu-latest,macos-latest"
      variants:
        description: 'Variants compiled in parallel; <variant1_key>=<variant1_value>,<variant2_key>=<variant2_value>'
        type: string
        required: false
      test_description:
        description: 'Description of test'
        type: string
        required: false
        default: ""

env:
  VARIANT_FLAG: "*nompi*"
  PKG_TAR: ctest-results-${{ inputs.code_aster_version }}-${{ inputs.conda_channel }}.tar.gz
  CONDA_CHANNEL: ""
  DEV_CHANNEL: ""
  CTEST_DIR: ${{github.workspace}}\\ctest

jobs:
  build_matrix:
    runs-on: ubuntu-latest
    outputs:
      final_matrix: ${{ steps.job-matrix-builder.outputs.final_matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'

      - uses: ./.github/actions/job-matrix-builder
        id: job-matrix-builder
        with:
          python_versions: ${{ inputs.python_versions }}
          platforms: ${{ inputs.platforms }}
          variants: ${{ inputs.variants }}

  run_ctest:
    needs: build_matrix
    name: ctest-code_aster-${{ matrix.platform.short }}-${{ matrix.pyver }}-${{ matrix.variants.value }}
    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build_matrix.outputs.final_matrix) }}
    steps:
      - uses: actions/checkout@v4

      - uses: mamba-org/setup-micromamba@v2 # https://github.com/mamba-org/setup-micromamba
        with:
          environment-name: test-env
          init-shell: >-
            bash
            cmd.exe
          condarc: |
            remote_max_retries: 5
            remote_backoff_factor: 5
            channel_priority: strict
            channels:
              - ${{ secrets.QUETZ_URL }}/get/${{ inputs.conda_channel }}
              - ${{ secrets.QUETZ_URL }}/get/devtools
              - conda-forge
          create-args: >-
            python=${{ matrix.pyver }}
            colorama
            code-aster=${{ inputs.code_aster_version }}=*${{ matrix.variants.mpi }}*${{ matrix.variants.build_type }}*

      - name: run ctest [seq] [Windows]
        if: ${{ runner.os == 'Windows' && matrix.variants.mpi == 'nompi' }}
        continue-on-error: true
        shell: cmd /E:on /C call {0}
        run: |
          run_ctest --resutest=${{github.workspace}}\\ctest -L submit -L sequential -LE need_data --timefactor=12.0 --only-failed-results -j 2

      - name: run ctest [seq] [Linux]
        if: ${{ runner.os == 'Linux' && matrix.variants.mpi == 'nompi' }}
        continue-on-error: true
        run: |
          run_ctest --resutest=${{github.workspace}}/ctest -L submit -L sequential -LE need_data --timefactor=8.0 --only-failed-results -j 2

      - name: run ctest [mpi] [Linux]
        if: ${{ runner.os == 'Linux' && matrix.variants.mpi == 'openmpi' }}
        continue-on-error: true
        run: |
          run_ctest --resutest=${{github.workspace}}/ctest -L submit -LE need_data --timefactor=8.0 --only-failed-results -j 2

      - name: Save variants details to json
        shell: bash
        run: |
          mkdir -p ${{ github.workspace }}/ctest
          echo "${{ toJson(matrix) }}" > ${{ github.workspace }}/ctest/variants.json
      

      - name: add mamba data for linux
        if: ${{ runner.os == 'Linux' }}
        continue-on-error: true
        run: |
          echo "$(micromamba list)" > ${{ github.workspace }}/ctest/mamba.txt

      - name: add conda data for windows
        if: ${{ runner.os == 'Windows' }}
        continue-on-error: true
        shell: cmd /E:on /C call {0}
        run: |
          set wspace=${{ github.workspace }}
          REM change backslashes to forward slashes
          set wspace=%wspace:\=/%

          micromamba list > %wspace%/ctest/mamba.txt

      - name: Print and save debug logs
        continue-on-error: true
        run: |
          add_str=""
          if [[ ${{ matrix.variants.mpi }} == 'openmpi' ]]; then
            echo "MPI variant"
            add_str=" --mpi"
          fi
          python src/code_aster/.tests/scan_failed.py --test-dir=${{github.workspace}}/ctest --aster-ver=${{ inputs.code_aster_version }}$add_str
          python src/code_aster/.tests/scan_failed.py --test-dir=${{github.workspace}}/ctest --aster-ver=${{ inputs.code_aster_version }}$add_str > ${{ github.workspace }}/ctest/summary.txt

      - name: update env vars
        run: |
          echo "PKG_TAR=ctest-results-${{ inputs.code_aster_version }}-${{ inputs.conda_channel }}-${{ matrix.pyver }}-${{ matrix.variants.value }}.tar.gz" >> $GITHUB_ENV

      - name: Upload ctest for packaging
        uses: actions/upload-artifact@v4
        with:
          name: ctest-code_aster-${{ matrix.platform.short }}-${{ matrix.pyver }}-${{ matrix.variants.value }}-${{ github.run_id }}
          path: ${{ github.workspace }}/ctest

  upload_test_results:
    needs: run_ctest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: prefix-dev/setup-pixi@v0.8.0
        with:
          pixi-version: v0.34.0
          environments: "cpack"
          cache: true

      - name: Download all ctest artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ctest-code_aster-*-${{ github.run_id }}
          merge-multiple: 'true'
          path: ${{ github.workspace }}/ctest

      - name: Process ctest results
        run: |
          pixi run -e cpack cpack-ctest-md-gen --cache-dir ${{ github.workspace }}/ctest --output-md ${{ github.workspace }}/ctest/summary.md

      - name: Package ctest directories
        run: |
          tar czf ${{ env.PKG_TAR }} ${{ github.workspace }}/ctest/ctest-code_aster-*-${{ github.run_id }}

      - name: Create Release and Upload Tarball
        uses: softprops/action-gh-release@v2
        with:
          tag_name: code-aster-${{ inputs.code_aster_version }}-ctest-${{ inputs.conda_channel }}
          name: CTest Results code-aster-${{ inputs.code_aster_version }} [${{ inputs.conda_channel }}]
          body: |
            Automated release created on ${{ github.sha }}. Contains ctest results from ${{ inputs.conda_channel }}.

          body_path: ${{ github.workspace }}/ctest/summary.md
          draft: false
          prerelease: false
          files: ${{ env.PKG_TAR }}
