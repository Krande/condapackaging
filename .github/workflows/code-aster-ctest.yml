name: ci-code-aster-ctest

on:
  workflow_call:
    inputs:
      conda_label:
        description: 'conda label'
        type: string
        required: true
      conda_user:
        description: 'conda user'
        type: string
        required: true
      code_aster_version:
        description: 'code_aster version'
        type: string
        required: true
      mpi:
        description: 'Run MPI variant'
        type: boolean
        required: true
      suffix:
        description: 'Release suffix'
        default: ""
        type: string
        required: false
      python_versions:
        description: 'matrix type'
        type: string
        required: false
        default: "3.9,3.10,3.11"
      platforms:
        description: 'matrix type'
        type: string
        required: false
        default: "windows-latest,ubuntu-latest,macos-latest"
      variants:
        description: 'Variants compiled in parallel; <variant1_key>=<variant1_value>,<variant2_key>=<variant2_value>'
        type: string
        required: false
      use_quetz:
        description: 'use quetz server'
        type: string
        required: false
        default: False
      description:
        description: 'description'
        type: string
        required: false
        default: ""
      use_devtools:
        description: 'Use devtools channel'
        type: string
        required: false
        default: False
env:
  VARIANT_FLAG: "*nompi*"
  PKG_TAR: ctest-results-${{ inputs.code_aster_version }}-${{ inputs.conda_label }}-${{ inputs.suffix }}.tar.gz
  CONDA_CHANNEL: ""
  DEV_CHANNEL: ""

jobs:
  # run a preceding job to get the matrix only if matrix_str is None
  build_matrix:
    uses: ./.github/workflows/conda-build-prep.yml
    with:
      python_versions: ${{ inputs.python_versions }}
      platforms: ${{ inputs.platforms }}
      conda_label: ${{ inputs.conda_label }}
      conda_user: ${{ inputs.conda_user }}
      use_quetz: ${{ inputs.use_quetz }}
      variants: ${{ inputs.variants }}
    secrets: inherit

  run_ctest:
    needs: build_matrix
    name: ctest-code_aster-${{ matrix.platform.short }}-${{ matrix.pyver }}-${{ matrix.variants.value }}
    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build_matrix.outputs.final_matrix) }}
    steps:
      - uses: actions/checkout@v4
      - name: evaluate if seq or mpi
        run: |
          if [[ ${{ inputs.mpi }} == true ]]; then
            echo "VARIANT_FLAG=*openmpi*" >> $GITHUB_ENV
          fi

      - name: set ENV CONDA_CHANNEL
        run: |
          if [[ ${{ inputs.use_quetz }} == 'True' ]]; then
              echo "CONDA_CHANNEL=${{ secrets.QUETZ_URL }}/get/${{ inputs.conda_label }}" >> $GITHUB_ENV
          else
              echo "CONDA_CHANNEL=${{ inputs.conda_user }}/label/${{ inputs.conda_label }}" >> $GITHUB_ENV
          fi
        env:
          QUETZ_URL: ${{ secrets.QUETZ_URL }}
          QUETZ_API_KEY: ${{ secrets.QUETZ_API_KEY }}

      - name: use devtools channel
        if: ${{ inputs.use_devtools == 'True' }}
        run: |
          echo "DEV_CHANNEL=${{ secrets.QUETZ_URL }}/get/devtools" >> $GITHUB_ENV

      - uses: mamba-org/setup-micromamba@v1 # https://github.com/mamba-org/setup-micromamba
        with:
          environment-name: test-env
          init-shell: >-
            bash
            cmd.exe
          condarc: |
            remote_max_retries: 5
            remote_backoff_factor: 5
            channel_priority: strict
            channels:
              - ${{ env.DEV_CHANNEL }}
              - ${{ env.CONDA_CHANNEL }}
              - conda-forge
          create-args: >-
            python=${{ matrix.pyver }}
            colorama
            code-aster=${{ inputs.code_aster_version }}=${{ env.VARIANT_FLAG }}

      - name: run ctest [seq] [Windows]
        if: ${{ runner.os == 'Windows' && inputs.mpi == false }}
        continue-on-error: true
        shell: cmd /E:on /C call {0}
        run: |
          run_ctest --resutest=${{github.workspace}}/ctest -L submit -L sequential -LE need_data --timefactor=12.0 --only-failed-results -j 2

      - name: run ctest [seq] [Linux]
        if: ${{ runner.os == 'Linux' && inputs.mpi == false }}
        continue-on-error: true
        run: |
          run_ctest --resutest=${{github.workspace}}/ctest -L submit -L sequential -LE need_data --timefactor=8.0 --only-failed-results -j 2

      - name: run ctest [mpi] [Linux]
        if: ${{ runner.os == 'Linux' && inputs.mpi == true }}
        continue-on-error: true
        run: |
          run_ctest --resutest=${{github.workspace}}/ctest -L submit -LE need_data --timefactor=8.0 --only-failed-results -j 2

      - name: add mamba data for linux
        if: ${{ runner.os == 'Linux' }}
        continue-on-error: true
        run: |
          echo "$(micromamba list)" > ${{ github.workspace }}/ctest/mamba.txt

      - name: add conda data for windows
        if: ${{ runner.os == 'Windows' }}
        continue-on-error: true
        shell: cmd /E:on /C call {0}
        run: |
          set wspace=${{ github.workspace }}
          REM change backslashes to forward slashes
          set wspace=%wspace:\=/%

          micromamba list > %wspace%/ctest/conda.txt

      - name: print debug logs
        continue-on-error: true
        run: |
          if [[ ${{ inputs.mpi }} == true ]]; then
            echo "MPI variant"
            add_str=" --mpi"
          else
            echo "SEQ variant"
            add_str=""
          fi
          python src/code_aster/.tests/scan_failed.py --test-dir=${{github.workspace}}/ctest --aster-ver=${{ inputs.code_aster_version }}$add_str

      - name: save debug logs
        continue-on-error: true
        run: |
          if [[ ${{ inputs.mpi }} == true ]]; then
            echo "MPI variant"
            add_str=" --mpi"
          else
            echo "SEQ variant"
            add_str=""
          fi
          python src/code_aster/.tests/scan_failed.py --test-dir=${{github.workspace}}/ctest --aster-ver=${{ inputs.code_aster_version }}$add_str > ${{ github.workspace }}/ctest/summary.txt

      - name: update env vars
        run: |
          echo "PKG_TAR=ctest-results-${{ inputs.code_aster_version }}-${{ inputs.conda_label }}-${{ inputs.suffix }}-${{ matrix.pyver }}-${{ matrix.variants.value }}.tar.gz" >> $GITHUB_ENV

      - name: Upload ctest for packaging
        uses: actions/upload-artifact@v3
        with:
          name: ctest-code_aster-${{ matrix.platform.short }}-${{ matrix.pyver }}-${{ matrix.variants.value }}-${{ inputs.suffix }}
          path: ${{ github.workspace }}/ctest

  upload_test_results:
    needs: run_ctest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all ctest artifacts
        uses: actions/download-artifact@v3

      - name: Package ctest directories
        run: |
          tar czf ${{ env.PKG_TAR }} ctest-*-${{ inputs.suffix }}

      - name: Create Release and Upload Tarball
        uses: softprops/action-gh-release@v1
        with:
          tag_name: code-aster-${{ inputs.code_aster_version }}-ctest-${{ inputs.conda_label }}
          name: CTest Results code-aster-${{ inputs.code_aster_version }} [${{ inputs.conda_label }}]
          body: |
            Automated release created on ${{ github.sha }}. Contains ctest results from ${{ inputs.conda_label }}.
            
            Notes:
            * ${{ inputs.description }}
          draft: false
          prerelease: false
          files: ${{ env.PKG_TAR }}
