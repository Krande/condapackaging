name: ci-code-aster-batch

# bump 1
on:
  workflow_dispatch:
    inputs:
      description:
        description: 'Release Description'
        required: true
        type: string
        default: ""
      build_selection:
        description: 'Which builds'
        required: true
        type: string
        default: "all"
      conda_channel:
        description: 'Conda Channel for dependencies'
        required: false
        type: string
      python_versions:
        description: 'Python Versions'
        required: true
        type: string
        default: "3.11"
      platforms:
        description: 'Platforms'
        required: true
        type: string
        default: "windows-latest"
      variants:
        description: 'Build variants'
        required: true
        type: string
        default: "mpi=nompi;build_type=debug,mpi=nompi;build_type=release"
      extra_build_args:
        description: 'Extra build arguments'
        required: true
        type: string
        default: " -m '__root__/src/common.yaml'"
      use_intel_fortran:
        description: 'Install intel fortran'
        type: choice
        required: false
        options:
          - "True"
          - "False"
        default: "True"


# https://docs.github.com/en/actions/using-workflows/reusing-workflows#calling-a-reusable-workflow
jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      pkg_dir: src/code_aster
      use_quetz: "True"
      # This is where the conda user and label should be set
      code_aster_version: ${{ steps.env.outputs.code_aster_version }}
      conda_channel: ${{ steps.env.outputs.unique_suffix }}

    steps:
      - uses: ./.github/actions/ca-batch-prep
        with:
          conda_channel: ${{ inputs.conda_channel }}

  build_batch_1:
    needs: env
    uses: ./.github/workflows/conda-build-basic.yml
    strategy:
      fail-fast: false
      matrix:
        package: [
          { name: scotch },
          { name: metis },
          { name: homard },
          { name: hdf5 }
        ]
    with:
      package_name: ${{ matrix.package.name }}
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      variants: ${{ needs.env.outputs.variants }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  build_mpi_parmetis:
    needs: [ env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: parmetis
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      variants: ${{ needs.env.outputs.variants }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  build_batch_mumps:
    needs: [ build_batch_1, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: mumps
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  build_batch_libmed:
    needs: [env, build_batch_1]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: libmed
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  build_batch_petsc:
    needs: [ build_batch_mumps, build_mpi_parmetis, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: petsc
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      variants: ${{ needs.env.outputs.variants }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  build_batch_medcoupling:
    needs: [ build_batch_libmed, build_batch_petsc, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: medcoupling
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  build_batch_mfront:
    needs: [ env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: mfront
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  build_batch_mgis:
    needs: [ build_batch_mfront, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: mgis
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      variants: ${{ needs.env.outputs.variants }}
      platforms: ${{ needs.env.outputs.platforms }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  build_batch_code_aster:
    needs: [ build_batch_mumps, build_batch_mgis, build_batch_medcoupling, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: code_aster
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  test:
    needs: [ build_batch_code_aster, env ]
    uses: ./.github/workflows/code-aster-ctest.yml
    with:
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      code_aster_version: ${{ needs.env.outputs.code_aster_version }}
      variants: ${{ needs.env.outputs.variants }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      test_description: ${{ needs.env.outputs.description }}
    secrets: inherit
