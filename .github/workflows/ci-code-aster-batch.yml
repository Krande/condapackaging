name: ci-code-aster-batch

# bump 1
on:
  workflow_dispatch:
    inputs:
      description:
        description: 'Release Description'
        required: true
        type: string
        default: ""
      build_selection:
        description: 'Which builds'
        required: true
        type: string
        default: "all"
      conda_label:
        description: 'Conda Channel for dependencies'
        required: false
        type: string
      python_versions:
        description: 'Python Versions'
        required: true
        type: string
        default: "3.11"
      platforms:
        description: 'Platforms'
        required: true
        type: string
        default: "windows-latest"
      variants:
        description: 'mpi variants'
        required: true
        type: string
        default: "mpi=nompi,build_type=debug"
      extra_build_args:
        description: 'Extra build arguments'
        required: true
        type: string
        default: " -m '__root__/src/code_aster/common.yaml'"
      use_intel_fortran:
        description: 'Install intel fortran'
        type: choice
        required: false
        options:
          - "True"
          - "False"
        default: "True"


# https://docs.github.com/en/actions/using-workflows/reusing-workflows#calling-a-reusable-workflow
jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      conda_user: krandedev
      pkg_dir: src/code_aster
      use_quetz: "True"
      # This is where the conda user and label should be set
      code_aster_version: ${{ steps.env.outputs.code_aster_version }}
      conda_label: ${{ steps.env.outputs.unique_suffix }}
      python_versions: ${{ inputs.python_versions }}
      platforms: ${{ inputs.platforms }}
      variants: ${{ inputs.variants }}
      description: ${{ inputs.description }}
      extra_build_args: ${{ inputs.extra_build_args }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toposort==1.10
          pip install ./src/cpack          

      - name: dummy step
        id: env
        shell: python
        env:
          CONDA_LABEL: ${{ inputs.conda_label }}
        run: |
          import os
          import re
          
          
          def set_output(name, value):
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  print(f'{name}={value}', file=fh)
          
          # Get Code Aster Version
          with open('src/code_aster/code_aster/meta.yaml', 'r') as file:
            text = file.read()
          version_pattern = r"{%\s*set\s+version\s*=\s*['\"](.+?)['\"]\s*%}"
          match = re.search(version_pattern, text)
          if match:
            result = match.group(1)
            set_output('code_aster_version', result)
          else:
            raise ValueError('Unable to find version number')
          
          # Auto generate Conda label if not manually set
          conda_label = os.getenv('CONDA_LABEL', None)
          if not conda_label:
            conda_label = "ca-${{ github.run_id }}"
          
          print(f"{conda_label=}")
          set_output('unique_suffix', conda_label)

  build_batch_1:
    needs: env
    uses: ./.github/workflows/conda-build-basic.yml
    strategy:
      fail-fast: false
      matrix:
        package: [
          { name: scotch, boa: false },
          { name: metis, boa: false },
          { name: homard, boa: false },
          { name: hdf5, boa: false }
        ]
    with:
      package_name: ${{ matrix.package.name }}
      job_name: ${{ matrix.package.name }}
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  build_mpi_parmetis:
    needs: [ env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: parmetis
      job_name: parmetis
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  build_batch_mumps:
    needs: [ build_batch_1, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: mumps
      job_name: mumps
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  build_batch_libmed:
    needs: [env, build_batch_1]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: libmed
      job_name: libmed
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  build_batch_petsc:
    needs: [ build_batch_mumps, build_mpi_parmetis, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: petsc
      job_name: petsc
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  build_batch_medcoupling:
    needs: [ build_batch_libmed, build_batch_petsc, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: medcoupling
      job_name: medcoupling
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}

    secrets: inherit

  build_batch_mfront:
    needs: [ env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: mfront
      job_name: mfront
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  build_batch_mgis:
    needs: [ build_batch_mfront, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: mgis
      job_name: mgis
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  build_batch_code_aster:
    needs: [ build_batch_mumps, build_batch_mgis, build_batch_medcoupling, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: code_aster
      job_name: code_aster
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ inputs.use_intel_fortran }}
    secrets: inherit

  test_mpi:
    needs: [ build_batch_code_aster, env ]
    uses: ./.github/workflows/code-aster-ctest.yml
    with:
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      code_aster_version: ${{ needs.env.outputs.code_aster_version }}
      mpi: true
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      suffix: "mpi"
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      description: ${{ needs.env.outputs.description }}
    secrets: inherit

  test_seq:
    needs: [ build_batch_code_aster, env ]
    uses: ./.github/workflows/code-aster-ctest.yml
    with:
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      code_aster_version: ${{ needs.env.outputs.code_aster_version }}
      mpi: false
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      suffix: "seq"
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      description: ${{ needs.env.outputs.description }}
    secrets: inherit
