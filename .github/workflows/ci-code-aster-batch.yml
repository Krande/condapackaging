name: ci-code-aster-batch

# bump 1
on:
  workflow_dispatch:
    inputs:
      release_description:
        description: 'Release Description'
        required: true
        type: string
        default: ""
      build_selection:
        description: 'Which builds'
        required: true
        type: string
        default: "all,!homard,!parmetis,!petsc"
      conda_channel:
        description: 'Override Conda Channel name'
        required: false
        type: string
      python_versions:
        description: 'Python Versions'
        required: true
        type: string
        default: "3.12"
      platforms:
        description: 'Platforms'
        required: true
        type: string
        default: "windows-latest"
      variants:
        description: 'Build variants'
        required: true
        type: string
        default: "mpi=nompi;build_type=debug,mpi=nompi;build_type=release"
      extra_build_args:
        description: 'Extra build args ("__root__"=root dir).'
        required: false
        type: string
        default: ""
      conda_channel_description:
        description: "Conda channel description"
        required: false
        type: string
        default: "A temporary channel for Code Aster development"

# https://docs.github.com/en/actions/using-workflows/reusing-workflows#calling-a-reusable-workflow
jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      # This is where the conda user and label should be set
      code_aster_version: ${{ steps.env.outputs.code_aster_version }}
      conda_channel: ${{ steps.env.outputs.conda_channel }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'
      
      - uses: ./.github/actions/ca-batch-prep
        id: env
        with:
          conda_channel: ${{ inputs.conda_channel }}

      - name: Create channel if not exists
        shell: bash
        run: |
          pixi run -e cpack cpack-quetz create-channel ${{ steps.env.outputs.conda_channel }} --channel-description "${{ inputs.conda_channel_description }}"
        env:
          QUETZ_URL: ${{ secrets.QUETZ_URL }}
          QUETZ_API_KEY: ${{ secrets.QUETZ_API_KEY }}

  build_batch_1:
    needs: env
    uses: ./.github/workflows/conda-build-basic.yml
    strategy:
      fail-fast: false
      matrix:
        package: [
          { name: scotch, use_intel_fortran: True, build_env: "rattler", recipe_file: "__root__/src/code_aster/scotch/recipe.yaml", variants: "" },
          { name: metis, use_intel_fortran: False, build_env: "rattler", recipe_file: "__root__/src/code_aster/metis/recipe.yaml", variants: "" },
          { name: homard, use_intel_fortran: False, build_env: "boa", recipe_file: "", variants: "" },
          { name: hdf5, use_intel_fortran: True, build_env: "rattler", recipe_file: "__root__/src/hdf5/recipe.yaml", variants: "" }
        ]
    with:
      package_name: ${{ matrix.package.name }}
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      variants: ${{ matrix.package.variants }}
      python_versions: ${{ inputs.python_versions }}
      platforms: ${{ inputs.platforms }}
      extra_build_args: ${{ inputs.extra_build_args }}
      upload_conda: True
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: ${{ matrix.package.use_intel_fortran }}
      use_devtools: ${{ matrix.package.use_intel_fortran }}
      build_env: ${{ matrix.package.build_env }}
      recipe_file: ${{ matrix.package.recipe_file }}
    secrets: inherit

  build_mpi_parmetis:
    needs: [ env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: parmetis
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      extra_build_args: ${{ inputs.extra_build_args }}
      variants: ${{ inputs.variants }}
      python_versions: ${{ inputs.python_versions }}
      platforms: ${{ inputs.platforms }}
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: False
      upload_conda: True
    secrets: inherit

  build_batch_mumps:
    needs: [ build_batch_1, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: mumps
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      python_versions: ${{ inputs.python_versions }}
      platforms: ${{ inputs.platforms }}
      variants: ${{ inputs.variants }}
      extra_build_args: ${{ inputs.extra_build_args }}
      upload_conda: True
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: True
      use_devtools: True
      build_env: 'rattler'
      recipe_file: "__root__/src/code_aster/mumps/recipe.yaml"
    secrets: inherit

  build_batch_libmed:
    needs: [env, build_batch_1]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: libmed
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      python_versions: ${{ inputs.python_versions }}
      platforms: ${{ inputs.platforms }}
      variants: ${{ inputs.variants }}
      extra_build_args: ${{ inputs.extra_build_args }}
      upload_conda: True
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: True
      use_devtools: True
      build_env: 'rattler'
      recipe_file: "__root__/src/code_aster/libmed/recipe.yaml"
    secrets: inherit

  build_batch_petsc:
    needs: [ build_batch_mumps, build_mpi_parmetis, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: petsc
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      variants: ${{ inputs.variants }}
      python_versions: ${{ inputs.python_versions }}
      platforms: ${{ inputs.platforms }}
      extra_build_args: ${{ inputs.extra_build_args }}
      upload_conda: True
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: False
    secrets: inherit

  build_batch_medcoupling:
    needs: [ build_batch_libmed, build_batch_petsc, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: medcoupling
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      python_versions: ${{ inputs.python_versions }}
      platforms: ${{ inputs.platforms }}
      variants: ${{ inputs.variants }}
      extra_build_args: ${{ inputs.extra_build_args }}
      upload_conda: True
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: False
      build_env: 'rattler'
      recipe_file: "__root__/src/code_aster/medcoupling/recipe.yaml"
    secrets: inherit

  build_batch_mfront:
    needs: [ env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: mfront
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      python_versions: ${{ inputs.python_versions }}
      platforms: ${{ inputs.platforms }}
      variants: ${{ inputs.variants }}
      extra_build_args: ${{ inputs.extra_build_args }}
      upload_conda: True
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: True
      use_devtools: True
    secrets: inherit

  build_batch_mgis:
    needs: [ build_batch_mfront, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: mgis
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      python_versions: ${{ inputs.python_versions }}
      variants: ${{ inputs.variants }}
      platforms: ${{ inputs.platforms }}
      extra_build_args: ${{ inputs.extra_build_args }}
      upload_conda: True
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: True
      use_devtools: True
    secrets: inherit

  build_batch_code_aster:
    needs: [ build_batch_mumps, build_batch_mgis, build_batch_medcoupling, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: code_aster
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      python_versions: ${{ inputs.python_versions }}
      platforms: ${{ inputs.platforms }}
      variants: ${{ inputs.variants }}
      extra_build_args: ${{ inputs.extra_build_args }}
      upload_conda: True
      build_selection: ${{ inputs.build_selection }}
      use_intel_fortran: True
      use_devtools: True
    secrets: inherit

  test:
    needs: [ build_batch_code_aster, env ]
    uses: ./.github/workflows/code-aster-ctest.yml
    with:
      conda_channel: ${{ needs.env.outputs.conda_channel }}
      code_aster_version: ${{ needs.env.outputs.code_aster_version }}
      variants: ${{ inputs.variants }}
      python_versions: ${{ inputs.python_versions }}
      platforms: ${{ inputs.platforms }}
      test_description: ${{ inputs.release_description }}
    secrets: inherit
