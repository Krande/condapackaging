name: ci-code-aster-batch

# bump 1
on:
  push:
    paths:
      - .github/workflows/ci-code-aster-batch.yml
#    branches:
#      - donotrun


# https://docs.github.com/en/actions/using-workflows/reusing-workflows#calling-a-reusable-workflow
jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      # This is where the conda user and label should be set
      code_aster_version: 16.4.11
      conda_label: ca-${{ steps.env.outputs.unique_suffix }}
      conda_user: krandedev
      pkg_dir: src/code_aster
      debug_build: "False"
      python_versions: "3.10,3.11"
      platforms: "ubuntu-latest"
      mpi_variants: "mpi=openmpi,mpi=nompi"
      description: "Release 16.4.12 and refactor code_aster and run_aster to site packages"
      unique_suffix: ${{ steps.env.outputs.unique_suffix }}
      use_quetz: "True"

    steps:
      - name: dummy step
        id: env
        run: |
          python3 << EOF
          import os
          import datetime

          #suffix = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
          suffix = ${{ github.run_id }} # with this, it should never come into conflict with other builds

          env_file = os.environ.get("GITHUB_OUTPUT", None)
          with open(env_file, "a") as my_file:
              my_file.write(f"unique_suffix={suffix}\n")
          
          EOF

  build_batch_1:
    needs: env
    uses: ./.github/workflows/conda-build-basic.yml
    strategy:
      fail-fast: false
      matrix:
        package: [
          { name: scotch, boa: false },
          { name: metis, boa: false },
          { name: homard, boa: false },
        ]
    with:
      package_name: ${{ matrix.package.name }}
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_mpi_parmetis:
    needs: [env]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: parmetis
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_batch_mumps:
    needs: [ build_batch_1, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: mumps
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.mpi_variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_batch_libmed:
    needs: env
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: libmed
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.mpi_variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_batch_petsc:
    needs: [ build_batch_mumps, build_mpi_parmetis, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: petsc
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_batch_medcoupling:
    needs: [ build_batch_libmed, build_batch_petsc, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: medcoupling
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.mpi_variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_batch_mfront:
    needs: [ env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: mfront
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_batch_mgis:
    needs: [ build_batch_mfront, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: mgis
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_batch_code_aster:
    needs: [ build_batch_mumps, build_batch_mgis, build_batch_medcoupling, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: code_aster
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.mpi_variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  test_mpi:
    needs: [ build_batch_code_aster, env ]
    uses: ./.github/workflows/code-aster-ctest.yml
    with:
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      code_aster_version: ${{ needs.env.outputs.code_aster_version }}
      mpi: true
      python_versions: "3.10,3.11"
      platforms: "ubuntu-latest"
      suffix: "mpi"
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      description:  ${{ needs.env.outputs.description }}
    secrets: inherit

  test_seq:
    needs: [ build_batch_code_aster, env ]
    uses: ./.github/workflows/code-aster-ctest.yml
    with:
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      code_aster_version: ${{ needs.env.outputs.code_aster_version }}
      mpi: false
      python_versions: "3.10,3.11"
      platforms: "ubuntu-latest"
      suffix: "seq"
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      description:  ${{ needs.env.outputs.description }}
    secrets: inherit
