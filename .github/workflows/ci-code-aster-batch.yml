name: ci-code-aster-batch

# bump 1
on:
  workflow_dispatch:
    inputs:
      python_versions:
        description: 'Python Versions'
        required: true
        type: string
        default: "3.11,3.12"
      platforms:
        description: 'Platforms'
        required: true
        type: string
        default: "ubuntu-latest"
      description:
        description: 'Release Description'
        required: true
        type: string
        default: ""
      conda_label:
        description: 'Conda Channel for dependencies'
        required: true
        type: string
        default: ""
      mpi_variants:
        description: 'mpi variants'
        required: true
        type: string
        default: "mpi=openmpi,mpi=nompi"
      debug_build:
        type: choice
        required: true
        description: Debug build or not
        options:
          - "True"
          - "False"
        default: "True"

# https://docs.github.com/en/actions/using-workflows/reusing-workflows#calling-a-reusable-workflow
jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      # This is where the conda user and label should be set
      code_aster_version: 17.0.1
      conda_label: ${{ steps.env.outputs.unique_suffix }}
      conda_user: krandedev
      pkg_dir: src/code_aster
      debug_build: ${{ inputs.debug_build }}
      python_versions: ${{ inputs.python_versions }}
      platforms: ${{ inputs.platforms }}
      mpi_variants: ${{ inputs.mpi_variants }}
      description: ${{ inputs.description }}
      unique_suffix: ${{ steps.env.outputs.unique_suffix }}
      use_quetz: "True"
      extra_build_args: " -m __root__/src/code_aster/common.yaml"

    steps:
      - name: dummy step
        id: env
        shell: python
        env:
          CONDA_LABEL: ${{ inputs.conda_label }}
        run: |
          import os
          
          conda_label = os.getenv('CONDA_LABEL')
          if conda_label == "":
            suffix = "ca-${{ github.run_id }}" # with this, it should never come into conflict with other builds
          else:
            suffix = conda_label 
          
          env_file = os.environ.get("GITHUB_OUTPUT", None)
          with open(env_file, "a") as my_file:
              my_file.write(f"unique_suffix={suffix}\n")

  build_batch_1:
    needs: env
    uses: ./.github/workflows/conda-build-basic.yml
    strategy:
      fail-fast: false
      matrix:
        package: [
          { name: scotch, boa: false },
          { name: metis, boa: false },
          { name: homard, boa: false },
        ]
    with:
      package_name: ${{ matrix.package.name }}
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_mpi_parmetis:
    needs: [env]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: parmetis
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_batch_mumps:
    needs: [ build_batch_1, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: mumps
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.mpi_variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_batch_libmed:
    needs: env
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: libmed
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.mpi_variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_batch_petsc:
    needs: [ build_batch_mumps, build_mpi_parmetis, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: petsc
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_batch_medcoupling:
    needs: [ build_batch_libmed, build_batch_petsc, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: medcoupling
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.mpi_variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_batch_mfront:
    needs: [ env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: mfront
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_batch_mgis:
    needs: [ build_batch_mfront, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: mgis
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  build_batch_code_aster:
    needs: [ build_batch_mumps, build_batch_mgis, build_batch_medcoupling, env ]
    uses: ./.github/workflows/conda-build-basic.yml
    with:
      package_name: code_aster
      pkg_dir: ${{ needs.env.outputs.pkg_dir }}
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      debug_build: ${{ needs.env.outputs.debug_build }}
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      variants: ${{ needs.env.outputs.mpi_variants }}
      extra_build_args: ${{ needs.env.outputs.extra_build_args }}
      use_quetz: ${{ needs.env.outputs.use_quetz }}
    secrets: inherit

  test_mpi:
    needs: [ build_batch_code_aster, env ]
    uses: ./.github/workflows/code-aster-ctest.yml
    with:
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      code_aster_version: ${{ needs.env.outputs.code_aster_version }}
      mpi: true
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      suffix: "mpi"
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      description:  ${{ needs.env.outputs.description }}
    secrets: inherit

  test_seq:
    needs: [ build_batch_code_aster, env ]
    uses: ./.github/workflows/code-aster-ctest.yml
    with:
      conda_label: ${{ needs.env.outputs.conda_label }}
      conda_user: ${{ needs.env.outputs.conda_user }}
      code_aster_version: ${{ needs.env.outputs.code_aster_version }}
      mpi: false
      python_versions: ${{ needs.env.outputs.python_versions }}
      platforms: ${{ needs.env.outputs.platforms }}
      suffix: "seq"
      use_quetz: ${{ needs.env.outputs.use_quetz }}
      description:  ${{ needs.env.outputs.description }}
    secrets: inherit
