# a callable workflow that returns a json string of a matrix for either platforms or python versions
name: ci-matrix-builder

on:
  workflow_call:
    inputs:
      python_versions:
        description: 'Python version'
        type: string
        required: false
      platforms:
        description: 'Runner OS'
        type: string
        required: false
      variants:
        description: 'Conda package variant; <variant1_key>=<variant1_value>,<variant2_key>=<variant2_value>'
        type: string
        required: false

    outputs:
      final_matrix:
        description: "matrix"
        value: ${{ jobs.build.outputs.final_matrix }}

jobs:
  build:
    name: generate matrix
    outputs:
      final_matrix: ${{ steps.set-matrix.outputs.final_matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: set matrix
        id: set-matrix
        run: |
          python3 << EOF
          import os
          
          env_file = os.environ.get("GITHUB_OUTPUT", None)
          python_versions = "${{ inputs.python_versions }}"
          platforms = "${{ inputs.platforms }}"
          variants = "${{ inputs.variants }}"
      
          python_versions = python_versions.split(',') if python_versions else []
          platforms = platforms.split(',') if platforms else []
          variants = variants.split(',') if variants else []
          platforms_dicts = []
          for platform in platforms:
              if platform == 'windows-latest':
                  platforms_dicts.append({"os": platform, "short": "win"})
              elif platform == 'ubuntu-latest':
                  platforms_dicts.append({"os": platform, "short": "linux"})
              elif platform == 'macos-latest':
                  platforms_dicts.append({"os": platform, "short": "macos"})
              else:
                  raise ValueError(f"Unknown platform {platform}")
          
          matrix = {
              "pyver": python_versions,
              "platform": platforms_dicts
          }
      
          if len(variants) > 0:
              variant_list_of_dicts = []
              for v in variants:
                  key, *value = v.split('=')
                  value = '='.join(value) 
                  variant_list_of_dicts.append({"key": key, "value": value})
              matrix["variants"] = variant_list_of_dicts
      
          with open(env_file, "a") as my_file:
              my_file.write(f"final_matrix={matrix}\n")
          
          EOF
      - name: print matrix string
        run: |
          echo ${{ steps.set-matrix.outputs.final_matrix }}