name: Conditional Job Execution

description: "Evaluates whether a job should run based on input parameters."

inputs:
  build_selection:
    description: "Comma-separated list to determine job selection."
    required: true
    default: ""
  job_name:
    description: "Name of the job to evaluate."
    required: true

outputs:
  should_run:
    value: ${{ steps.evaluate_job.outputs.should_run }}
    description: "Indicates if the job should run."

runs:
  using: "composite"
  steps:
    - name: Evaluate job
      id: evaluate_job
      shell: python
      env:
        BUILD_SELECTION: ${{ inputs.build_selection }}
        JOB_NAME: ${{ inputs.job_name }}
      run: |
        import os

        def set_output(name, value):
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f'{name}={value}', file=fh)

        job_name = os.getenv('JOB_NAME', None)
        build_selection = os.getenv('BUILD_SELECTION', None)

        print(f'{job_name=}')
        
        if not build_selection:
            set_output("should_run", "true")
            exit(0)
        
        job_list = build_selection.split(',')
        print(f'{build_selection=}')
        print(f'{job_list=}')
        
        if "all" in job_list:
            if len(job_list) == 1:
                print('job_list is 1')
                set_output("should_run", "true")
                exit(0)
            
            if f'!{job_name}' in job_list:
                print(f'Job {job_name} is skipped')
                set_output("should_run", "false")
                exit(0)
            
            set_output("should_run", "true")
            exit(0)
            
        print('all at the bottom')
        if job_name in job_list:
            set_output("should_run", "true")
        else:
            set_output("should_run", "false")

